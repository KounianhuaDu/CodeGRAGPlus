{"task_id": "CPP/1", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> solve(int n, vector<int> h) {\n  vector<int> ans(n);\n  vector<int> prefixSum(n);\n  prefixSum[0] = h[0];\n  for (int i = 1; i < n; i++) {\n    prefixSum[i] = prefixSum[i - 1] + h[i];\n  }\n  for (int i = 0; i < n; i++) {\n    ans[i] = prefixSum[i] - h[i];\n  }\n  return ans;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  vector<int> h(n);\n  for (int i = 0; i < n; i++) {\n    cin >> h[i];\n  }\n  vector<int> ans = solve(n, h);\n  for (int i = 0; i < n; i++) {\n    cout << ans[i] << endl;\n  }\n  return 0;\n}\n", "testcases": [{"input": "5\n1 2 3 1 2", "output": "3 2 0 2 0"}, {"input": "4\n3 2 1 4", "output": "2 3 4 0"}, {"input": "1\n2", "output": "0"}, {"input": "2\n5 4", "output": "0 0"}, {"input": "5\n10 18 36 33 20", "output": "27 19 0 0 0"}, {"input": "5\n91 96 94 95 91", "output": "6 0 2 0 0"}, {"input": "10\n9 6 8 5 5 2 8 9 2 2", "output": "1 4 2 5 5 8 2 0 1 0"}, {"input": "10\n55 50 51 53 53 52 50 54 54 53", "output": "0 5 4 2 2 3 5 1 0 0"}, {"input": "20\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10", "output": "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0"}, {"input": "20\n82 78 86 80 80 76 88 74 70 88 71 75 73 72 79 85 79 90 79 77", "output": "9 13 5 11 11 15 3 17 21 3 20 16 18 19 12 6 12 0 0 0"}, {"input": "40\n66 68 59 100 55 53 63 95 70 55 51 54 97 80 88 83 90 81 84 53 84 91 85 75 82 56 88 86 79 97 56 63 57 55 93 93 81 99 58 54", "output": "35 33 42 0 45 47 37 5 30 45 49 46 3 20 12 17 10 19 16 47 16 9 15 25 18 44 12 14 21 3 44 37 43 45 7 7 19 0 0 0"}, {"input": "40\n99 8 32 95 40 43 69 26 4 81 67 78 17 58 88 55 73 80 16 50 20 14 94 75 66 14 23 68 95 63 1 56 81 68 48 77 2 51 29 27", "output": "0 88 64 1 56 53 27 70 92 15 29 18 79 38 8 41 23 16 80 46 76 82 2 21 30 82 73 28 0 19 81 26 0 10 30 0 50 0 0 0"}, {"input": "50\n50 53 54 54 52 51 53 51 50 52 53 52 55 52 51 55 52 53 53 52 53 53 52 52 51 52 53 54 50 50 55 50 55 50 55 54 53 50 52 52 51 54 52 54 53 51 54 50 55 54", "output": "6 3 2 2 4 5 3 5 6 4 3 4 1 4 5 1 4 3 3 4 3 3 4 4 5 4 3 2 6 6 1 6 1 6 1 2 3 6 4 4 5 2 4 2 3 5 2 6 0 0"}, {"input": "50\n94 96 98 96 91 90 96 92 95 96 96 99 99 90 93 90 99 95 91 92 99 91 93 92 100 94 93 90 93 93 98 91 95 96 93 90 90 92 94 91 90 90 97 91 100 96 100 96 91 90", "output": "7 5 3 5 10 11 5 9 6 5 5 2 2 11 8 11 2 6 10 9 2 10 8 9 1 7 8 11 8 8 3 10 6 5 8 11 11 9 7 10 11 11 4 10 1 5 0 0 0 0"}, {"input": "70\n50 5 6 69 36 65 94 57 33 62 72 89 22 83 37 94 72 46 99 43 64 1 69 85 88 63 70 47 64 20 18 66 73 28 39 67 45 41 66 9 77 77 32 11 14 5 17 44 34 76 8 73 20 85 1 89 22 76 93 70 86 65 82 17 69 86 45 11 11 88", "output": "50 95 94 31 64 35 6 43 67 38 28 11 78 17 63 6 28 54 0 51 30 93 25 9 6 31 24 47 30 74 76 28 21 66 55 27 49 53 28 85 17 17 62 83 80 89 77 50 60 18 86 21 74 9 93 5 72 18 0 19 3 24 7 72 20 3 44 78 78 0"}, {"input": "70\n40 43 42 40 42 43 41 43 40 40 41 42 40 40 42 42 42 40 43 40 42 43 41 42 43 42 41 41 41 43 42 42 40 41 41 42 43 41 43 40 42 41 43 43 41 40 41 41 43 43 40 41 43 43 41 42 42 40 42 42 43 43 40 40 41 41 41 42 41 43", "output": "4 1 2 4 2 1 3 1 4 4 3 2 4 4 2 2 2 4 1 4 2 1 3 2 1 2 3 3 3 1 2 2 4 3 3 2 1 3 1 4 2 3 1 1 3 4 3 3 1 1 4 3 1 1 3 2 2 4 2 2 1 1 4 4 3 3 3 2 3 0"}, {"input": "90\n74 78 57 97 75 85 87 89 71 76 50 71 94 82 87 51 84 87 63 51 88 53 82 88 94 90 58 65 91 69 99 56 58 78 74 74 52 80 100 85 72 50 92 97 77 97 91 85 86 64 75 99 51 79 76 64 66 85 64 63 99 84 74 99 83 70 84 54 91 94 51 68 86 61 81 60 100 52 92 52 59 90 57 57 85 83 59 56 67 63", "output": "27 23 44 4 26 16 14 12 30 25 51 30 7 19 14 50 17 14 38 50 13 48 19 13 7 11 43 36 10 32 2 45 43 23 27 27 49 21 1 16 29 51 9 4 24 4 10 16 15 37 26 2 50 22 25 37 35 16 37 38 2 17 27 2 18 31 17 47 10 7 50 33 15 40 20 41 0 41 0 39 32 0 29 29 0 0 9 12 0 0"}, {"input": "90\n8 11 37 11 34 18 34 5 35 11 16 20 17 14 9 22 39 13 23 36 26 9 20 18 13 10 11 26 22 2 36 17 23 26 12 1 30 5 19 30 21 8 36 25 2 17 16 32 40 4 11 12 21 39 30 1 18 23 19 1 38 25 12 10 35 27 29 35 15 15 37 35 5 23 33 34 2 35 17 38 40 5 25 8 14 38 34 28 13 22", "output": "33 30 4 30 7 23 7 36 6 30 25 21 24 27 32 19 2 28 18 5 15 32 21 23 28 31 30 15 19 39 5 24 18 15 29 40 11 36 22 11 20 33 5 16 39 24 25 9 1 37 30 29 20 2 11 40 23 18 22 40 3 16 29 31 6 14 12 6 26 26 4 6 36 18 8 7 39 6 24 3 0 34 14 31 25 0 0 0 10 0"}, {"input": "100\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 9 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 18 83 12 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14", "output": "90 90 27 44 85 91 44 41 64 32 96 81 26 7 58 50 84 39 81 33 90 73 2 52 56 11 28 2 80 65 51 3 20 46 91 75 30 50 87 76 22 87 78 11 33 90 70 86 38 30 45 22 58 86 95 31 62 25 92 93 70 23 44 27 10 95 21 72 70 17 81 16 87 95 67 30 10 14 33 86 7 45 61 94 73 43 82 44 70 95 82 60 70 5 96 32 14 0 0 0"}, {"input": "100\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 7 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 8 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 5 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 6 6 4 9 9 8 9", "output": "10 3 8 3 1 3 6 8 1 8 6 3 7 6 6 6 1 8 5 5 5 5 5 4 9 4 9 7 4 3 8 3 4 9 6 5 10 6 6 4 2 4 5 2 10 3 10 8 5 6 10 8 5 2 6 5 3 7 3 5 1 2 9 2 8 3 4 6 9 1 9 1 8 5 6 6 8 6 1 9 8 4 1 3 3 7 8 7 2 5 0 3 4 4 4 6 1 1 2 0"}, {"input": "10\n4 5 2 3 4 9 1 2 3 10", "output": "7 6 9 8 7 2 10 9 8 0"}, {"input": "1\n100", "output": "0"}, {"input": "2\n1 100", "output": "100 0"}, {"input": "4\n4 98 99 100", "output": "97 3 2 0"}, {"input": "5\n5 5 5 5 5", "output": "1 1 1 1 0"}, {"input": "10\n4 1 4 1 4 1 4 1 4 1", "output": "1 4 1 4 1 4 1 4 0 0"}, {"input": "5\n1 3 5 7 9", "output": "9 7 5 3 0"}, {"input": "2\n1 1", "output": "1 0"}, {"input": "3\n4 4 4", "output": "1 1 0"}, {"input": "2\n2 2", "output": "1 0"}, {"input": "4\n1 1 1 1", "output": "1 1 1 0"}, {"input": "3\n3 3 3", "output": "1 1 0"}, {"input": "6\n3 3 4 2 3 3", "output": "2 2 0 2 1 0"}], "language": "cpp"}, "prompt": "B. Luxurious Houses\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nThe capital of Berland has n multifloor buildings. The architect who built up the capital was very creative, so all the houses were built in one row.\nLet's enumerate all the houses from left to right, starting with one. A house is considered to be luxurious if the number of floors in it is strictly greater than in all the houses with larger numbers. In other words, a house is luxurious if the number of floors in it is strictly greater than in all the houses, which are located to the right from it. In this task it is assumed that the heights of floors in the houses are the same.\nThe new architect is interested in n questions, i-th of them is about the following: \"how many floors should be added to the i-th house to make it luxurious?\" (for all i from 1 to n, inclusive). You need to help him cope with this task.\nNote that all these questions are independent from each other - the answer to the question for house i does not affect other answers (i.e., the floors to the houses are not actually added).\nInput\nThe first line of the input contains a single number n (1 <= n <= 105) - the number of houses in the capital of Berland.\nThe second line contains n space-separated positive integers hi (1 <= hi <= 109), where hi equals the number of floors in the i-th house.\nOutput\nPrint n integers a1, a2, ..., an, where number ai is the number of floors that need to be added to the house number i to make it luxurious. If the house is already luxurious and nothing needs to be added to it, then ai should be equal to zero.\nAll houses are numbered from left to right, starting from one.\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> solve(int n, vector<int> h) {\n  vector<int> ans(n);\n  vector<int> prefixSum(n);\n  prefixSum[0] = h[0];\n  for (int i = 1; i < n; i++) {\n    prefixSum[i] = prefixSum[i - 1] + h[i];\n  }\n  for (int i = 0; i < n; i++) {\n    ans[i] = prefixSum[i] - h[i];\n  }\n  return ans;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  vector<int> h(n);\n  for (int i = 0; i < n; i++) {\n    cin >> h[i];\n  }\n  vector<int> ans = solve(n, h);\n  for (int i = 0; i < n; i++) {\n    cout << ans[i] << endl;\n  }\n  return 0;\n}\n", "result": "failed: wrong answer @ testcase 1", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/2", "completion_id": 0, "test_suite": {"code": "int solve(int a, int b) {\n  int minSocks = min(a, b);\n  int maxDays = minSocks;\n  a -= minSocks;\n  b -= minSocks;\n  maxDays += a / 2 + b / 2;\n  return maxDays;\n}\n\n", "testcases": [{"input": "3 1", "output": "1 1"}, {"input": "2 3", "output": "2 0"}, {"input": "7 3", "output": "3 2"}, {"input": "100 100", "output": "100 0"}, {"input": "4 10", "output": "4 3"}, {"input": "6 10", "output": "6 2"}, {"input": "6 11", "output": "6 2"}, {"input": "10 40", "output": "10 15"}, {"input": "11 56", "output": "11 22"}, {"input": "34 30", "output": "30 2"}, {"input": "33 33", "output": "33 0"}, {"input": "100 45", "output": "45 27"}, {"input": "100 23", "output": "23 38"}, {"input": "45 12", "output": "12 16"}, {"input": "1 1", "output": "1 0"}, {"input": "1 100", "output": "1 49"}, {"input": "100 1", "output": "1 49"}, {"input": "68 59", "output": "59 4"}, {"input": "45 99", "output": "45 27"}, {"input": "99 100", "output": "99 0"}, {"input": "100 98", "output": "98 1"}, {"input": "59 12", "output": "12 23"}, {"input": "86 4", "output": "4 41"}, {"input": "68 21", "output": "21 23"}, {"input": "100 11", "output": "11 44"}, {"input": "100 10", "output": "10 45"}, {"input": "15 45", "output": "15 15"}, {"input": "11 32", "output": "11 10"}, {"input": "34 96", "output": "34 31"}, {"input": "89 89", "output": "89 0"}], "language": "cpp"}, "prompt": "A. Vasya the Hipster\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nOne day Vasya the Hipster decided to count how many socks he had. It turned out that he had a red socks and b blue socks.\nAccording to the latest fashion, hipsters should wear the socks of different colors: a red one on the left foot, a blue one on the right foot.\nEvery day Vasya puts on new socks in the morning and throws them away before going to bed as he doesn't want to wash them.\nVasya wonders, what is the maximum number of days when he can dress fashionable and wear different socks, and after that, for how many days he can then wear the same socks until he either runs out of socks or cannot make a single pair from the socks he's got.\nCan you help him?\nInput\nThe single line of the input contains two positive integers a and b (1 <= a, b <= 100) - the number of red and blue socks that Vasya's got.\nOutput\nPrint two space-separated integers - the maximum number of days when Vasya can wear different socks and the number of days when he can wear the same socks until he either runs out of socks or cannot make a single pair from the socks he's got.\nKeep in mind that at the end of the day Vasya throws away the socks that he's been wearing on that day.\n", "generation": "int solve(int a, int b) {\n  int minSocks = min(a, b);\n  int maxDays = minSocks;\n  a -= minSocks;\n  b -= minSocks;\n  maxDays += a / 2 + b / 2;\n  return maxDays;\n}\n\n", "result": "failed: compilation error: test.cpp: In function \u2018int solve(int, int)\u2019:\ntest.cpp:2:18: error: \u2018min\u2019 was not declared in this scope\n    2 |   int minSocks = min(a, b);\n      |                  ^~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/3", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n  int n, k;\n  cin >> n;\n  cin >> k;\n\n  vector<int> a(n);\n  for (int i = 0; i < n; i++) {\n    cin >> a[i];\n  }\n\n  sort(a.begin(), a.end());\n\n  int sum = 0;\n  for (int i = 0; i < n; i++) {\n    sum += a[i];\n  }\n\n  int min_units = min(k, sum - sum / 100 * 100);\n\n  cout << sum - min_units * 100;\n  return 0;\n}\n", "testcases": [{"input": "2 4\n7 9", "output": "2"}, {"input": "3 8\n17 15 19", "output": "5"}, {"input": "2 2\n99 100", "output": "20"}, {"input": "100 10000\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "output": "1000"}, {"input": "100 10000\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100", "output": "1000"}, {"input": "1 16\n78", "output": "9"}, {"input": "2 33\n30 88", "output": "15"}, {"input": "3 9\n93 62 7", "output": "16"}, {"input": "100000 10000000\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...", "output": "1000000"}, {"input": "5 145\n19 77 59 1 63", "output": "36"}, {"input": "7 168\n2 71 56 58 42 61 39", "output": "49"}, {"input": "10 217\n48 30 82 70 10 5 34 11 90 90", "output": "68"}, {"input": "15 204\n19 81 24 22 59 46 48 8 1 66 100 20 46 56 61", "output": "86"}, {"input": "20 484\n24 72 72 13 85 50 52 3 81 79 71 57 57 75 6 52 54 41 61 73", "output": "156"}, {"input": "30 825\n33 25 61 69 92 38 2 62 73 78 83 32 25 5 5 82 64 93 38 25 52 9 40 52 38 90 25 85 99 20", "output": "232"}, {"input": "40 700\n43 35 51 91 44 51 86 20 64 10 50 40 16 25 37 89 18 44 94 99 18 30 11 27 73 3 90 78 28 98 87 43 85 88 29 93 6 81 78 16", "output": "276"}, {"input": "50 1607\n19 55 52 35 18 39 3 12 55 78 62 83 85 56 36 86 96 28 70 40 40 83 27 2 51 49 87 28 58 75 27 69 36 82 78 29 99 87 29 78 82 78 15 85 52 32 90 6 1 76", "output": "424"}, {"input": "60 2213\n17 98 74 91 59 84 87 71 13 9 74 48 75 76 36 25 49 80 25 92 41 24 99 45 98 95 27 54 88 63 25 50 19 43 15 90 58 48 58 83 37 88 35 63 63 23 27 82 80 7 82 93 71 18 85 17 13 2 50 74", "output": "552"}, {"input": "70 1313\n27 7 64 45 44 29 37 63 38 9 85 56 43 74 46 55 59 97 13 33 75 78 2 88 32 7 24 36 86 40 66 42 26 48 64 14 50 21 20 10 50 73 21 29 17 46 97 90 81 73 61 25 95 82 93 94 72 38 80 13 3 3 20 90 34 20 24 49 96 51", "output": "468"}, {"input": "40 108\n20 100 99 50 8 78 44 67 91 75 93 53 96 81 96 86 81 0 58 9 51 63 70 73 80 79 28 82 4 15 60 74 19 17 54 81 11 67 71 66", "output": "245"}, {"input": "50 284\n61 25 82 73 57 61 90 22 63 99 58 4 27 54 8 29 46 99 73 73 60 42 45 17 75 86 38 83 4 1 67 44 74 87 32 33 14 95 87 46 40 3 37 6 42 38 51 39 98 48", "output": "282"}, {"input": "60 1947\n46 29 55 97 37 32 24 22 35 66 24 78 92 5 55 41 21 30 88 24 13 89 77 30 71 15 58 26 39 10 42 36 28 66 21 28 51 55 91 4 94 59 63 46 1 39 46 1 70 7 46 37 96 41 70 19 55 80 59 83", "output": "471"}, {"input": "70 2454\n88 23 5 86 53 48 60 78 97 90 0 18 57 78 68 28 87 39 70 9 0 35 18 53 67 56 0 71 7 86 39 96 83 45 99 92 43 38 40 63 81 59 89 86 28 62 53 97 53 2 73 93 38 49 51 62 93 3 63 49 47 85 72 98 43 91 7 20 47 66", "output": "632"}, {"input": "80 1879\n36 27 86 90 18 85 99 54 29 8 64 31 34 26 45 51 13 48 58 6 98 30 74 63 78 53 88 98 15 17 29 67 78 8 2 7 42 26 72 83 5 59 8 7 27 59 34 65 93 71 50 34 63 45 21 81 19 30 99 41 25 11 83 62 17 29 80 61 91 22 19 95 80 73 15 39 10 37 88 42", "output": "570"}, {"input": "90 1191\n46 37 76 11 60 29 49 13 88 41 65 7 2 13 44 58 23 10 45 48 63 83 79 5 89 99 28 80 34 6 37 92 61 70 51 0 34 67 68 77 62 69 27 86 71 83 72 73 93 92 62 68 86 76 28 24 67 66 61 12 3 52 45 44 58 83 0 84 18 50 75 51 41 25 21 53 39 20 36 45 62 24 12 33 61 81 9 13 27 22", "output": "554"}, {"input": "100 1257\n80 15 39 54 98 10 65 77 55 98 15 25 78 40 25 16 17 60 25 60 56 29 91 16 14 60 47 31 15 59 83 77 10 54 27 21 50 34 64 69 43 81 32 14 30 93 0 91 75 51 19 84 88 14 30 4 99 59 94 69 24 51 35 99 22 25 41 77 64 97 10 4 56 75 97 54 4 55 29 8 14 16 88 34 80 47 66 30 80 60 45 45 93 85 49 91 37 16 49 56", "output": "619"}, {"input": "100 3852\n71 34 1 77 97 36 66 78 95 47 47 15 50 100 43 47 20 23 61 92 49 86 29 92 100 85 5 58 59 19 16 81 16 89 93 75 46 86 9 50 9 49 61 88 76 13 14 99 47 64 39 42 63 5 57 8 51 21 21 62 92 84 84 56 9 37 72 19 99 19 8 60 25 21 4 0 98 80 29 63 52 87 91 30 79 79 96 22 32 63 87 73 51 89 81 84 69 30 55 31", "output": "922"}, {"input": "100 2533\n16 32 22 100 52 10 43 28 87 72 69 84 26 0 74 46 28 34 46 47 90 18 49 6 42 30 18 33 86 38 94 78 8 39 54 46 72 45 83 68 38 4 14 6 86 24 71 36 22 8 37 99 28 7 88 49 4 69 46 81 30 95 92 18 81 21 14 7 43 14 80 59 14 72 93 6 78 43 56 12 66 21 81 80 39 5 54 69 40 12 41 35 23 58 1 75 40 3 36 97", "output": "706"}, {"input": "100 2239\n95 9 31 56 96 85 88 79 78 63 68 95 1 91 94 56 57 88 30 92 64 52 91 11 17 99 65 63 35 68 82 18 66 57 26 62 32 70 89 98 42 17 68 93 53 79 50 6 30 76 69 10 4 41 18 56 81 49 14 10 91 6 32 80 85 94 2 95 66 9 18 58 71 23 23 48 68 72 39 51 0 23 71 73 10 89 13 15 16 30 27 44 63 93 22 77 12 12 28 5", "output": "737"}, {"input": "100 1689\n40 18 85 79 18 70 44 62 37 21 68 6 9 60 13 55 98 98 82 80 4 75 44 83 60 44 10 60 28 65 59 82 48 41 20 100 57 62 28 60 3 5 54 91 31 89 6 44 38 20 34 90 14 99 82 96 57 97 39 73 30 96 41 42 56 33 45 83 78 15 79 25 27 7 43 54 14 90 22 68 3 1 27 88 49 37 84 61 92 37 14 41 81 62 10 36 73 86 9 4", "output": "666"}, {"input": "1 44\n56", "output": "10"}, {"input": "5 136\n65 53 80 92 74", "output": "50"}, {"input": "20 964\n70 82 81 14 73 35 40 21 73 70 71 35 32 43 26 51 51 62 45 61", "output": "200"}, {"input": "80 4124\n14 37 6 11 63 59 43 72 88 0 53 43 42 95 65 61 9 69 9 95 49 64 27 34 53 31 34 26 30 48 85 97 35 60 74 45 35 86 11 34 45 72 95 95 95 13 58 2 0 38 37 13 61 47 85 77 96 10 34 3 54 55 91 23 57 13 33 16 2 17 80 61 36 57 79 81 90 33 82 48", "output": "800"}, {"input": "100 4899\n66 100 11 81 19 55 96 14 66 10 49 75 1 58 64 80 47 95 45 79 36 89 31 30 61 96 93 86 50 61 64 32 82 13 57 75 5 46 96 49 3 98 34 6 91 7 50 62 46 31 100 4 2 16 20 47 86 41 73 17 43 71 84 47 18 100 55 23 10 37 4 19 84 61 27 61 42 29 95 41 93 5 72 58 24 10 80 45 78 68 19 18 30 28 95 91 15 90 87 47", "output": "1000"}, {"input": "1 7035769\n1", "output": "10"}, {"input": "5 5012340\n10 63 89 25 29", "output": "50"}, {"input": "20 5527187\n15 91 34 37 16 77 85 4 31 28 2 47 8 45 57 51 58 72 97 16", "output": "200"}, {"input": "80 8000114\n27 46 16 80 85 11 20 22 80 24 85 22 17 86 96 60 16 12 94 39 23 86 12 49 28 78 80 23 92 78 62 38 27 43 35 62 60 89 85 63 39 27 70 13 73 91 82 73 98 83 70 93 5 37 15 85 39 58 92 34 93 44 31 86 28 86 43 3 25 12 18 61 25 7 67 87 37 29 65 98", "output": "800"}, {"input": "100 9455943\n44 8 21 71 7 29 40 65 91 70 48 19 77 48 16 22 54 4 29 34 9 22 73 34 47 41 5 83 32 91 52 6 74 64 18 23 9 4 36 78 98 20 20 3 69 86 41 67 54 76 87 84 47 6 52 87 61 100 98 80 14 14 24 99 90 73 97 79 22 65 65 51 29 44 15 67 21 58 79 80 96 40 63 73 96 59 72 24 87 85 74 49 81 30 16 61 87 30 0 13", "output": "1000"}, {"input": "98878 1204096\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...", "output": "120409"}, {"input": "1 6\n27", "output": "3"}, {"input": "1 10\n88", "output": "9"}, {"input": "1 3\n93", "output": "9"}, {"input": "2 22\n48 44", "output": "11"}, {"input": "1 48\n52", "output": "10"}, {"input": "1 2135072\n72", "output": "10"}, {"input": "500 5970269\n53 25 33 30 68 71 2 32 4 19 21 25 1 29 70 31 36 17 55 18 58 84 97 27 31 47 98 4 36 70 96 20 80 14 52 87 66 37 20 33 44 42 24 30 65 31 24 82 20 66 23 97 8 28 7 99 51 98 50 80 35 79 84 61 87 85 61 80 84 25 31 40 64 48 38 79 17 15 39 100 34 93 56 26 86 90 45 22 55 57 29 85 86 98 3 13 82 80 77 89 98 27 71 86 36 26 21 27 98 11 27 73 77 92 83 100 39 44 98 23 81 11 60 16 69 64 36 66 63 91 83 99 64 26 71 75 88 3 17 65 61 53 71 6 66 72 76 74 96 51 28 81 57 71 52 14 22 99 48 23 45 23 13 57 99 95 95 27 4...", "output": "5000"}, {"input": "1000 7037249\n39 48 91 10 8 21 78 75 97 86 0 13 52 26 88 17 7 34 52 5 9 71 75 25 4 32 63 53 48 60 11 53 49 39 47 31 0 44 55 78 48 84 87 37 42 42 74 55 97 70 56 10 88 53 82 81 100 46 24 44 12 3 5 71 99 19 4 30 76 80 45 100 88 66 55 12 45 65 100 13 70 42 99 60 29 9 54 63 70 92 19 49 64 28 88 74 20 41 22 23 46 54 55 28 98 11 78 18 26 38 100 25 47 6 17 2 65 18 39 8 14 77 34 65 59 32 86 49 81 53 41 19 86 70 10 7 56 94 25 71 91 38 62 24 46 29 100 0 31 55 95 37 86 92 19 86 70 83 14 83 77 36 25 85 42 55 81 38 35 7...", "output": "10000"}, {"input": "5000 9839765\n53 73 67 86 31 56 68 41 50 55 35 64 53 22 60 45 46 42 60 28 9 66 21 63 55 75 93 30 35 70 34 89 37 11 62 10 93 73 32 58 84 63 20 23 35 58 62 80 90 40 40 27 65 14 21 82 10 9 1 77 10 86 35 39 13 38 6 54 5 33 60 81 25 93 6 62 21 8 54 63 97 14 96 1 89 26 34 55 86 80 57 68 37 72 63 92 0 91 42 45 72 65 31 39 28 40 30 70 54 95 89 10 41 67 43 75 94 45 3 7 100 96 85 5 11 99 92 67 57 81 54 86 14 65 42 81 53 78 82 6 12 93 64 40 64 53 80 90 8 24 59 69 57 30 31 5 12 9 54 24 31 70 96 13 96 90 13 93 43 16 81...", "output": "50000"}, {"input": "10000 8911013\n99 91 79 76 73 60 19 36 59 42 59 84 97 51 56 24 92 21 22 4 60 17 67 30 22 92 10 28 92 61 1 20 18 87 70 24 59 45 74 76 23 39 55 51 100 6 36 83 67 4 83 62 92 95 87 47 36 38 76 10 72 64 5 65 40 56 27 80 73 78 20 82 24 38 71 23 54 94 52 31 49 44 70 46 83 78 12 89 6 29 34 97 33 36 51 16 42 7 0 25 20 60 80 96 34 30 93 52 15 10 89 6 33 91 81 92 67 13 95 21 93 85 100 100 87 26 95 29 30 7 95 39 24 29 96 71 18 41 60 69 3 1 19 63 62 15 41 53 67 31 36 14 64 38 24 46 67 34 93 6 25 23 11 68 65 4 69 92 97 ...", "output": "100000"}, {"input": "50000 8354582\n48 70 72 1 48 21 87 39 76 4 65 19 78 38 75 16 94 59 96 53 55 30 71 93 73 84 32 100 3 83 26 59 36 19 32 92 92 86 29 22 45 43 48 80 2 79 51 15 0 30 62 23 46 50 9 69 2 91 87 64 1 13 68 62 75 19 28 41 88 33 30 16 60 18 94 52 0 55 28 36 79 48 23 69 46 51 54 90 79 85 69 1 89 58 4 67 92 51 8 25 94 25 26 77 4 79 12 1 34 31 66 15 90 6 23 47 30 99 69 71 89 53 52 41 47 19 97 36 56 32 25 31 1 83 84 45 14 61 89 95 88 38 80 82 24 43 37 89 76 57 93 67 6 35 23 51 34 32 21 14 13 86 64 45 86 70 100 1 35 38 10...", "output": "500000"}, {"input": "100000 10000000\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...", "output": "1000000"}, {"input": "100000 10000000\noutput": "1000000"}, {"input": "3 5\n2 3 1", "output": "0"}, {"input": "5 1\n8 8 8 8 8", "output": "0"}, {"input": "3 150\n1 1 1", "output": "15"}, {"input": "4 3\n7 9 9 9", "output": "3"}, {"input": "1 10\n100", "output": "10"}, {"input": "3 11\n100 100 100", "output": "30"}, {"input": "2 11\n99 100", "output": "20"}], "language": "cpp"}, "prompt": "C. Developing Skills\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nPetya loves computer games. Finally a game that he's been waiting for so long came out!\nThe main character of this game has n different skills, each of which is characterized by an integer ai from 0 to 100. The higher the number ai is, the higher is the i-th skill of the character. The total rating of the character is calculated as the sum of the values   of  for all i from 1 to n. The expression [ x] denotes the result of rounding the number x down to the nearest integer.\nAt the beginning of the game Petya got k improvement units as a bonus that he can use to increase the skills of his character and his total rating. One improvement unit can increase any skill of Petya's character by exactly one. For example, if a4 = 46, after using one imporvement unit to this skill, it becomes equal to 47. A hero's skill cannot rise higher more than 100. Thus, it is permissible that some of the units will remain unused.\nYour task is to determine the optimal way of using the improvement units so as to maximize the overall rating of the character. It is not necessary to use all the improvement units.\nInput\nThe first line of the input contains two positive integers n and k (1 <= n <= 105, 0 <= k <= 107) - the number of skills of the character and the number of units of improvements at Petya's disposal.\nThe second line of the input contains a sequence of n integers ai (0 <= ai <= 100), where ai characterizes the level of the i-th skill of the character.\nOutput\nThe first line of the output should contain a single non-negative integer - the maximum total rating of the character that Petya can get using k or less improvement units.\n", "generation": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n  int n, k;\n  cin >> n;\n  cin >> k;\n\n  vector<int> a(n);\n  for (int i = 0; i < n; i++) {\n    cin >> a[i];\n  }\n\n  sort(a.begin(), a.end());\n\n  int sum = 0;\n  for (int i = 0; i < n; i++) {\n    sum += a[i];\n  }\n\n  int min_units = min(k, sum - sum / 100 * 100);\n\n  cout << sum - min_units * 100;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:11:3: error: \u2018vector\u2019 was not declared in this scope\n   11 |   vector<int> a(n);\n      |   ^~~~~~\ntest.cpp:3:1: note: \u2018std::vector\u2019 is defined in header \u2018<vector>\u2019; did you forget to \u2018#include <vector>\u2019?\n    2 | #include <algorithm>\n  +++ |+#include <vector>\n    3 | \ntest.cpp:11:10: error: expected primary-expression before \u2018int\u2019\n   11 |   vector<int> a(n);\n      |          ^~~\ntest.cpp:13:12: error: \u2018a\u2019 was not declared in this scope\n   13 |     cin >> a[i];\n      |            ^\ntest.cpp:16:8: error: \u2018a\u2019 was not declared in this scope\n   16 |   sort(a.begin(), a.end());\n      |        ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/4", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nbool isPossible(int x1, int y1, int x2, int y2, int x3, int y3) {\n  int area1 = x1 * y1;\n  int area2 = x2 * y2;\n  int area3 = x3 * y3;\n  int totalArea = area1 + area2 + area3;\n  if (totalArea > 10000) {\n    return false;\n  }\n  if (area1 + area2 + area3 != totalArea) {\n    return false;\n  }\n  return true;\n}\n\nint main() {\n  int x1, y1, x2, y2, x3, y3;\n  cin >> x1;\n  cin >> y1;\n  cin >> x2;\n  cin >> y2;\n  cin >> x3;\n  cin >> y3;\n\n  if (!isPossible(x1, y1, x2, y2, x3, y3)) {\n    cout << -1;\n  } else {\n    int n = max(x1, max(x2, x3)) + 1;\n    cout << n << endl;\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < n; j++) {\n        char c = 'A' + i - 1;\n        cout << c;\n      }\n      cout << endl;\n    }\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "5 1 2 5 5 2", "output": "5\nAAAAA\nBBBBB\nBBBBB\nCCCCC\nCCCCC"}, {"input": "1 3 1 3 3 1", "output": "3\nAAA\nBBB\nCCC"}, {"input": "2 4 1 4 1 4", "output": "4\nAAAA\nAAAA\nBBBB\nCCCC"}, {"input": "7 2 7 2 7 3", "output": "7\nAAAAAAA\nAAAAAAA\nBBBBBBB\nBBBBBBB\nCCCCCCC\nCCCCCCC\nCCCCCCC"}, {"input": "1 10 6 10 3 10", "output": "10\nAAAAAAAAAA\nBBBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB\nCCCCCCCCCC\nCCCCCCCCCC\nCCCCCCCCCC"}, {"input": "20 1 20 1 18 20", "output": "20\nAAAAAAAAAAAAAAAAAAAA\nBBBBBBBBBBBBBBBBBBBB\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC\nCCCCCCCCCCCCCCCCCCCC"}, {"input": "100 100 100 100 100 100", "output": "-1"}, {"input": "1 100 100 1 1 100", "output": "-1"}, {"input": "100 100 100 1 100 100", "output": "-1"}, {"input": "3 8 4 8 2 8", "output": "-1"}, {"input": "70 7 70 2 70 62", "output": "-1"}, {"input": "6 100 20 100 75 100", "output": "-1"}, {"input": "17 100 62 100 100 22", "output": "-1"}, {"input": "2 3 2 5 5 8", "output": "-1"}, {"input": "70 10 47 59 23 59", "output": "-1"}, {"input": "42 69 41 31 58 100", "output": "-1"}, {"input": "96 70 3 100 30 96", "output": "-1"}, {"input": "1 1 2 2 2 2", "output": "-1"}, {"input": "2 5 6 7 3 4", "output": "-1"}, {"input": "2 3 2 3 2 2", "output": "-1"}, {"input": "1 1 1 1 1 1", "output": "-1"}], "language": "cpp"}, "prompt": "D. Three Logos\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nThree companies decided to order a billboard with pictures of their logos. A billboard is a big square board. A logo of each company is a rectangle of a non-zero area.\nAdvertisers will put up the ad only if it is possible to place all three logos on the billboard so that they do not overlap and the billboard has no empty space left. When you put a logo on the billboard, you should rotate it so that the sides were parallel to the sides of the billboard.\nYour task is to determine if it is possible to put the logos of all the three companies on some square billboard without breaking any of the described rules.\nInput\nThe first line of the input contains six positive integers x1, y1, x2, y2, x3, y3 (1 <= x1, y1, x2, y2, x3, y3 <= 100), where xi and yi determine the length and width of the logo of the i-th company respectively.\nOutput\nIf it is impossible to place all the three logos on a square shield, print a single integer \"-1\" (without the quotes).\nIf it is possible, print in the first line the length of a side of square n, where you can place all the three logos. Each of the next n lines should contain n uppercase English letters \"A\", \"B\" or \"C\". The sets of the same letters should form solid rectangles, provided that:\nthe sizes of the rectangle composed from letters \"A\" should be equal to the sizes of the logo of the first company,\nthe sizes of the rectangle composed from letters \"B\" should be equal to the sizes of the logo of the second company,\nthe sizes of the rectangle composed from letters \"C\" should be equal to the sizes of the logo of the third company,\nNote that the logos of the companies can be rotated for printing on the billboard. The billboard mustn't have any empty space. If a square billboard can be filled with the logos in multiple ways, you are allowed to print any of them.\nSee the samples to better understand the statement.\n", "generation": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nbool isPossible(int x1, int y1, int x2, int y2, int x3, int y3) {\n  int area1 = x1 * y1;\n  int area2 = x2 * y2;\n  int area3 = x3 * y3;\n  int totalArea = area1 + area2 + area3;\n  if (totalArea > 10000) {\n    return false;\n  }\n  if (area1 + area2 + area3 != totalArea) {\n    return false;\n  }\n  return true;\n}\n\nint main() {\n  int x1, y1, x2, y2, x3, y3;\n  cin >> x1;\n  cin >> y1;\n  cin >> x2;\n  cin >> y2;\n  cin >> x3;\n  cin >> y3;\n\n  if (!isPossible(x1, y1, x2, y2, x3, y3)) {\n    cout << -1;\n  } else {\n    int n = max(x1, max(x2, x3)) + 1;\n    cout << n << endl;\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < n; j++) {\n        char c = 'A' + i - 1;\n        cout << c;\n      }\n      cout << endl;\n    }\n  }\n\n  return 0;\n}\n", "result": "failed: wrong answer @ testcase 1", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/5", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool cmp(pair<int, int> a, pair<int, int> b) {\n  return a.second > b.second;\n}\n\nint main() {\n  int e, s, n, m;\n  cin >> e;\n  cin >> s;\n  cin >> n;\n  cin >> m;\n\n  vector<pair<int, int>> g(n);\n  for (int i = 0; i < n; i++) {\n    cin >> g[i].first;\n    cin >> g[i].second;\n  }\n\n  vector<pair<int, int>> f(m);\n  for (int i = 0; i < m; i++) {\n    cin >> f[i].first;\n    cin >> f[i].second;\n  }\n\n  vector<int> ans(m);\n  for (int i = 0; i < m; i++) {\n    int min_reg = INT_MAX;\n    int min_prem = INT_MAX;\n    for (int j = 0; j < n; j++) {\n      if (g[j].second >= f[i].first) {\n        int fuel_used = g[j].first - s;\n        if (fuel_used < min_reg) {\n          min_reg = fuel_used;\n        }\n        if (fuel_used < min_prem) {\n          min_prem = fuel_used;\n        }\n      }\n    }\n\n    ans[i] = min_reg + min_prem;\n    if (ans[i] == INT_MAX) {\n      ans[i] = -1;\n    }\n  }\n\n  for (int i = 0; i < m; i++) {\n    cout << ans[i] << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "8 4 1 1\n2 4\n0", "output": "0 4"}, {"input": "9 3 2 3\n2 3\n1 6\n-1 0 1", "output": "-1 -1\n3 3\n3 2"}, {"input": "20 9 2 4\n1 5\n2 10\n-1 0 1 2", "output": "-1 -1\n-1 -1\n-1 -1\n-1 -1"}, {"input": "18 9 2 1\n2 9\n1 12\n0", "output": "0 9"}, {"input": "18 9 2 1\n1 9\n2 12\n0", "output": "3 6"}, {"input": "9 3 2 1\n2 3\n1 6\n0", "output": "3 3"}, {"input": "67 10 9 10\n3 -1\n1 59\n1 39\n1 -11\n2 29\n1 9\n1 19\n1 49\n3 77\n27 14 21 36 0 13 57 41 20 28", "output": "28 2\n33 10\n28 8\n21 0\n47 10\n34 10\n0 0\n16 0\n28 9\n28 1"}, {"input": "216 15 19 10\n2 -31\n2 100\n3 230\n1 57\n3 42\n1 157\n2 186\n1 113\n2 -16\n3 245\n2 142\n1 86\n2 -3\n3 201\n3 128\n3 12\n3 171\n2 27\n2 72\n98 197 114 0 155 35 36 11 146 27", "output": "27 31\n0 0\n14 29\n55 74\n1 15\n55 59\n55 59\n55 74\n10 15\n55 59"}, {"input": "386 20 29 30\n1 349\n2 482\n1 112\n1 93\n2 189\n1 207\n2 35\n2 -5\n1 422\n1 442\n1 402\n2 238\n3 258\n3 54\n2 369\n2 290\n2 329\n3 74\n3 -62\n2 170\n1 462\n2 15\n2 222\n1 309\n3 150\n1 -25\n3 130\n1 271\n1 -43\n351 250 91 102 0 286 123 93 100 205 328 269 188 83 73 35 188 223 73 215 199 64 47 379 61 298 295 65 158 211", "output": "0 15\n51 57\n83 132\n72 132\n100 166\n39 41\n64 132\n81 132\n74 132\n51 90\n20 18\n40 57\n64 94\n91 132\n100 132\n100 132\n64 94\n51 72\n100 132\n51 80\n54 93\n100 132\n100 132\n0 0\n100 132\n31 37\n34 37\n100 132\n64 124\n51 84"}, {"input": "1000000000 1 1 1\n3 775565805\n0", "output": "-1 -1"}, {"input": "1000000000 2 5 5\n2 118899563\n2 -442439384\n1 -961259426\n2 -156596184\n1 -809672605\n249460520 -545686472 0 -653929719 905155526", "output": "-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1"}], "language": "cpp"}, "prompt": "E. Kojiro and Furrari\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nMotorist Kojiro spent 10 years saving up for his favorite car brand, Furrari. Finally Kojiro's dream came true! Kojiro now wants to get to his girlfriend Johanna to show off his car to her.\nKojiro wants to get to his girlfriend, so he will go to her along a coordinate line. For simplicity, we can assume that Kojiro is at the point f of a coordinate line, and Johanna is at point e. Some points of the coordinate line have gas stations. Every gas station fills with only one type of fuel: Regular-92, Premium-95 or Super-98. Thus, each gas station is characterized by a pair of integers ti and xi - the number of the gas type and its position.\nOne liter of fuel is enough to drive for exactly 1 km (this value does not depend on the type of fuel). Fuels of three types differ only in quality, according to the research, that affects the lifetime of the vehicle motor. A Furrari tank holds exactly s liters of fuel (regardless of the type of fuel). At the moment of departure from point f Kojiro's tank is completely filled with fuel Super-98. At each gas station Kojiro can fill the tank with any amount of fuel, but of course, at no point in time, the amount of fuel in the tank can be more than s liters. Note that the tank can simultaneously have different types of fuel. The car can moves both left and right.\nTo extend the lifetime of the engine Kojiro seeks primarily to minimize the amount of fuel of type Regular-92. If there are several strategies to go from f to e, using the minimum amount of fuel of type Regular-92, it is necessary to travel so as to minimize the amount of used fuel of type Premium-95.\nWrite a program that can for the m possible positions of the start fi minimize firstly, the amount of used fuel of type Regular-92 and secondly, the amount of used fuel of type Premium-95.\nInput\nThe first line of the input contains four positive integers e, s, n, m (1 <= e, s <= 109, 1 <= n, m <= 2.105) - the coordinate of the point where Johanna is, the capacity of a Furrari tank, the number of gas stations and the number of starting points.\nNext n lines contain two integers each ti, xi (1 <= ti <= 3,  - 109 <= xi <= 109), representing the type of the i-th gas station (1 represents Regular-92, 2 - Premium-95 and 3 - Super-98) and the position on a coordinate line of the i-th gas station. Gas stations don't necessarily follow in order from left to right.\nThe last line contains m integers fi ( - 109 <= fi < e). Start positions don't necessarily follow in order from left to right.\nNo point of the coordinate line contains more than one gas station. It is possible that some of points fi or point e coincide with a gas station.\nOutput\nPrint exactly m lines. The i-th of them should contain two integers - the minimum amount of gas of type Regular-92 and type Premium-95, if Kojiro starts at point fi. First you need to minimize the first value. If there are multiple ways to do it, you need to also minimize the second value.\nIf there is no way to get to Johanna from point fi, the i-th line should look like that \"-1 -1\" (two numbers minus one without the quotes).\n", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool cmp(pair<int, int> a, pair<int, int> b) {\n  return a.second > b.second;\n}\n\nint main() {\n  int e, s, n, m;\n  cin >> e;\n  cin >> s;\n  cin >> n;\n  cin >> m;\n\n  vector<pair<int, int>> g(n);\n  for (int i = 0; i < n; i++) {\n    cin >> g[i].first;\n    cin >> g[i].second;\n  }\n\n  vector<pair<int, int>> f(m);\n  for (int i = 0; i < m; i++) {\n    cin >> f[i].first;\n    cin >> f[i].second;\n  }\n\n  vector<int> ans(m);\n  for (int i = 0; i < m; i++) {\n    int min_reg = INT_MAX;\n    int min_prem = INT_MAX;\n    for (int j = 0; j < n; j++) {\n      if (g[j].second >= f[i].first) {\n        int fuel_used = g[j].first - s;\n        if (fuel_used < min_reg) {\n          min_reg = fuel_used;\n        }\n        if (fuel_used < min_prem) {\n          min_prem = fuel_used;\n        }\n      }\n    }\n\n    ans[i] = min_reg + min_prem;\n    if (ans[i] == INT_MAX) {\n      ans[i] = -1;\n    }\n  }\n\n  for (int i = 0; i < m; i++) {\n    cout << ans[i] << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:32:19: error: \u2018INT_MAX\u2019 was not declared in this scope\n   32 |     int min_reg = INT_MAX;\n      |                   ^~~~~~~\ntest.cpp:4:1: note: \u2018INT_MAX\u2019 is defined in header \u2018<climits>\u2019; did you forget to \u2018#include <climits>\u2019?\n    3 | #include <algorithm>\n  +++ |+#include <climits>\n    4 | \n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/7", "completion_id": 0, "test_suite": {"code": "vector<int> restoreArray(vector<int>& gcd) {\n  int n = gcd.size();\n  vector<int> a(n);\n  for(int i = 0; i < n; i++) {\n    a[i] = gcd[i] * 2 - 1;\n  }\n  return a;\n}\n", "testcases": [{"input": "1\n42", "output": "42"}, {"input": "2\n1 1 1 1", "output": "1 1"}], "language": "cpp"}, "prompt": "A. GCD Table\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nThe GCD table G of size n * n for an array of positive integers a of length n is defined by formula\nLet us remind you that the greatest common divisor (GCD) of two positive integers x and y is the greatest integer that is divisor of both x and y, it is denoted as . For example, for array a = {4, 3, 6, 2} of length 4 the GCD table will look as follows:\nGiven all the numbers of the GCD table G, restore array a.\nInput\nThe first line contains number n (1 <= n <= 500) - the length of array a. The second line contains n2 space-separated numbers - the elements of the GCD table of G for array a.\nAll the numbers in the table are positive integers, not exceeding 109. Note that the elements are given in an arbitrary order. It is guaranteed that the set of the input data corresponds to some array a.\nOutput\nIn the single line print n positive integers - the elements of array a. If there are multiple possible solutions, you are allowed to print any of them.\n", "generation": "vector<int> restoreArray(vector<int>& gcd) {\n  int n = gcd.size();\n  vector<int> a(n);\n  for(int i = 0; i < n; i++) {\n    a[i] = gcd[i] * 2 - 1;\n  }\n  return a;\n}\n", "result": "failed: compilation error: test.cpp:1:1: error: \u2018vector\u2019 does not name a type\n    1 | vector<int> restoreArray(vector<int>& gcd) {\n      | ^~~~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/9", "completion_id": 0, "test_suite": {"code": "int longest_sequence(int n, int T, vector<int> &a) {\n  vector<int> dp(n + 1, 1);\n  for (int i = 1; i <= n; i++) {\n    for (int j = 0; j < i; j++) {\n      if (a[j] <= a[i]) {\n        dp[i] = max(dp[i], dp[j] + 1);\n      }\n    }\n  }\n  return dp[n];\n}\n", "testcases": [{"input": "4 3\n3 1 4 2", "output": "5"}, {"input": "1 1000\n42", "output": "1000"}, {"input": "31 3767\n16 192 152 78 224 202 186 52 118 19 13 38 199 196 35 295 100 64 205 37 166 124 169 214 66 243 134 192 253 270 92", "output": "7546"}, {"input": "15 12226\n18 125 213 221 124 147 154 182 134 184 51 49 267 88 251", "output": "12234"}, {"input": "81 10683\n3 52 265 294 213 242 185 151 27 165 128 237 124 14 43 147 104 162 124 103 233 156 288 57 289 195 129 77 97 138 153 289 203 126 34 5 97 35 224 120 200 203 222 94 171 294 293 108 145 193 227 206 34 295 1 233 258 7 246 34 60 232 58 169 77 150 272 279 171 228 168 84 114 229 149 97 66 246 212 236 151", "output": "32070"}, {"input": "29 7954\n1 257 8 47 4 26 49 228 120 53 138 101 101 35 293 232 299 195 219 45 195 174 96 157 168 138 288 114 291", "output": "15919"}, {"input": "39 1057\n1 120 247 206 260 117 152 24 162 266 202 152 278 199 63 188 271 62 62 177 213 77 229 197 263 178 211 102 255 257 163 134 14 66 11 113 216 288 225", "output": "2128"}, {"input": "2 766\n147 282", "output": "767"}, {"input": "2 13101\n180 199", "output": "13102"}, {"input": "29 1918\n8 81 38 146 195 199 31 153 267 139 48 202 38 259 139 71 253 3 289 44 210 81 78 259 236 189 219 102 133", "output": "3845"}, {"input": "46 13793\n1 239 20 83 33 183 122 208 46 141 11 264 196 266 104 130 116 117 31 213 235 207 219 206 206 46 89 112 260 191 245 234 87 255 186 4 251 177 130 59 81 54 227 116 105 284", "output": "27600"}, {"input": "2 8698\n71 225", "output": "8699"}, {"input": "68 2450\n107 297 185 215 224 128 8 65 101 202 19 145 255 233 138 223 144 132 32 122 153 85 31 160 219 125 167 220 138 255 219 119 165 249 47 124 20 37 160 24 156 154 163 226 270 88 74 192 204 300 194 184 235 93 267 160 12 216 91 191 267 241 152 9 111 76 201 295", "output": "7366"}, {"input": "100 10000000\n98 99 96 97 94 95 92 93 90 91 88 89 86 87 84 85 82 83 80 81 78 79 76 77 74 75 72 73 70 71 68 69 66 67 64 65 62 63 60 61 58 59 56 57 54 55 52 53 50 51 48 49 46 47 44 45 42 43 40 41 38 39 36 37 34 35 32 33 30 31 28 29 26 27 24 25 22 23 20 21 18 19 16 17 14 15 12 13 10 11 8 9 6 7 4 5 2 3 1 100", "output": "10000050"}, {"input": "99 10000000\n97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2 99", "output": "10000050"}, {"input": "99 10000000\n96 97 98 93 94 95 90 91 92 87 88 89 84 85 86 81 82 83 78 79 80 75 76 77 72 73 74 69 70 71 66 67 68 63 64 65 60 61 62 57 58 59 54 55 56 51 52 53 48 49 50 45 46 47 42 43 44 39 40 41 36 37 38 33 34 35 30 31 32 27 28 29 24 25 26 21 22 23 18 19 20 15 16 17 12 13 14 9 10 11 6 7 8 3 4 5 2 1 99", "output": "10000065"}, {"input": "100 10000000\n97 98 99 94 95 96 91 92 93 88 89 90 85 86 87 82 83 84 79 80 81 76 77 78 73 74 75 70 71 72 67 68 69 64 65 66 61 62 63 58 59 60 55 56 57 52 53 54 49 50 51 46 47 48 43 44 45 40 41 42 37 38 39 34 35 36 31 32 33 28 29 30 25 26 27 22 23 24 19 20 21 16 17 18 13 14 15 10 11 12 7 8 9 4 5 6 1 2 3 100", "output": "10000067"}, {"input": "98 10000000\n95 96 97 92 93 94 89 90 91 86 87 88 83 84 85 80 81 82 77 78 79 74 75 76 71 72 73 68 69 70 65 66 67 62 63 64 59 60 61 56 57 58 53 54 55 50 51 52 47 48 49 44 45 46 41 42 43 38 39 40 35 36 37 32 33 34 29 30 31 26 27 28 23 24 25 20 21 22 17 18 19 14 15 16 11 12 13 8 9 10 5 6 7 2 3 4 97 98", "output": "20000034"}, {"input": "95 10000000\n92 93 94 89 90 91 86 87 88 83 84 85 80 81 82 77 78 79 74 75 76 71 72 73 68 69 70 65 66 67 62 63 64 59 60 61 56 57 58 53 54 55 50 51 52 47 48 49 44 45 46 41 42 43 38 39 40 35 36 37 32 33 34 29 30 31 26 27 28 23 24 25 20 21 22 17 18 19 14 15 16 11 12 13 8 9 10 5 6 7 2 3 4 94 95", "output": "20000033"}, {"input": "98 10000000\n195 196 197 192 193 194 189 190 191 186 187 188 183 184 185 180 181 182 177 178 179 174 175 176 171 172 173 168 169 170 165 166 167 162 163 164 159 160 161 156 157 158 153 154 155 150 151 152 147 148 149 144 145 146 141 142 143 138 139 140 135 136 137 132 133 134 129 130 131 126 127 128 123 124 125 120 121 122 117 118 119 114 115 116 111 112 113 108 109 110 105 106 107 102 103 104 1 2", "output": "10000065"}, {"input": "95 10000000\n192 193 194 189 190 191 186 187 188 183 184 185 180 181 182 177 178 179 174 175 176 171 172 173 168 169 170 165 166 167 162 163 164 159 160 161 156 157 158 153 154 155 150 151 152 147 148 149 144 145 146 141 142 143 138 139 140 135 136 137 132 133 134 129 130 131 126 127 128 123 124 125 120 121 122 117 118 119 114 115 116 111 112 113 108 109 110 105 106 107 102 103 104 1 2", "output": "10000063"}, {"input": "98 10000000\n1 2 195 196 197 192 193 194 189 190 191 186 187 188 183 184 185 180 181 182 177 178 179 174 175 176 171 172 173 168 169 170 165 166 167 162 163 164 159 160 161 156 157 158 153 154 155 150 151 152 147 148 149 144 145 146 141 142 143 138 139 140 135 136 137 132 133 134 129 130 131 126 127 128 123 124 125 120 121 122 117 118 119 114 115 116 111 112 113 108 109 110 105 106 107 102 103 104", "output": "10000066"}, {"input": "98 10000000\n1 2 5 4 3 8 7 6 11 10 9 14 13 12 17 16 15 20 19 18 23 22 21 26 25 24 29 28 27 32 31 30 35 34 33 38 37 36 41 40 39 44 43 42 47 46 45 50 49 48 53 52 51 56 55 54 59 58 57 62 61 60 65 64 63 68 67 66 71 70 69 74 73 72 77 76 75 80 79 78 83 82 81 86 85 84 89 88 87 92 91 90 95 94 93 98 97 96", "output": "10000033"}, {"input": "98 10000000\n1 1 5 4 3 8 7 6 11 10 9 14 13 12 17 16 15 20 19 18 23 22 21 26 25 24 29 28 27 32 31 30 35 34 33 38 37 36 41 40 39 44 43 42 47 46 45 50 49 48 53 52 51 56 55 54 59 58 57 62 61 60 65 64 63 68 67 66 71 70 69 74 73 72 77 76 75 80 79 78 83 82 81 86 85 84 89 88 87 92 91 90 95 94 93 98 97 96", "output": "20000032"}, {"input": "98 10000000\n1 2 95 96 97 92 93 94 89 90 91 86 87 88 83 84 85 80 81 82 77 78 79 74 75 76 71 72 73 68 69 70 65 66 67 62 63 64 59 60 61 56 57 58 53 54 55 50 51 52 47 48 49 44 45 46 41 42 43 38 39 40 35 36 37 32 33 34 29 30 31 26 27 28 23 24 25 20 21 22 17 18 19 14 15 16 11 12 13 8 9 10 5 6 7 2 3 4", "output": "20000034"}, {"input": "99 10000000\n1 2 3 95 96 97 92 93 94 89 90 91 86 87 88 83 84 85 80 81 82 77 78 79 74 75 76 71 72 73 68 69 70 65 66 67 62 63 64 59 60 61 56 57 58 53 54 55 50 51 52 47 48 49 44 45 46 41 42 43 38 39 40 35 36 37 32 33 34 29 30 31 26 27 28 23 24 25 20 21 22 17 18 19 14 15 16 11 12 13 8 9 10 5 6 7 2 3 4", "output": "20000034"}, {"input": "100 10000000\n1 2 2 1 2 2 1 1 2 2 1 2 1 1 1 1 1 2 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 1 2 2 2 1 1 2 2 1 1 2 2 2 2 2 2 1 1 2 2 1 1 2 1 1 2 1 2 1 1 2 1 2 2 2 1 1 2 2 1 2 1 1 2 2 1 1 1 2 1 2 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1", "output": "560000000"}, {"input": "100 10000000\n2 4 2 5 2 1 1 3 2 4 3 5 3 4 2 4 2 4 1 2 3 3 1 1 3 3 1 3 5 1 2 1 5 2 3 4 5 2 1 2 1 3 4 4 4 3 5 5 3 1 5 2 1 4 4 3 2 3 2 3 2 4 2 1 3 3 3 2 3 5 1 5 4 3 1 4 5 3 2 4 5 4 1 3 4 1 1 3 4 2 2 5 4 2 2 3 3 2 3 1", "output": "260000004"}, {"input": "100 10000000\n31 150 132 17 273 18 292 260 226 217 165 68 36 176 89 75 227 246 137 151 87 215 267 242 21 156 27 27 202 73 218 290 57 2 85 159 96 39 191 268 67 64 55 266 29 209 215 85 149 267 161 153 118 293 104 197 91 252 275 56 288 76 82 239 215 105 283 88 76 294 138 166 9 273 14 119 67 101 250 13 63 215 80 5 221 234 258 195 129 67 152 56 277 129 111 98 213 22 209 299", "output": "40000023"}, {"input": "100 10000000\n285 219 288 277 266 249 297 286 290 266 210 201 275 280 200 272 297 253 246 292 272 285 226 250 297 270 214 251 263 285 237 292 245 225 247 221 263 250 253 280 235 288 278 297 283 294 208 279 227 290 246 208 274 238 282 240 214 277 239 282 255 278 214 292 277 267 290 257 239 234 252 246 217 274 254 249 229 275 210 297 254 215 222 228 262 287 290 292 277 227 292 282 248 278 207 249 236 240 252 216", "output": "50000016"}, {"input": "100 10000000\n300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300", "output": "1000000000"}, {"input": "99 10000000\n300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300", "output": "990000000"}, {"input": "99 10000000\n299 299 300 300 299 299 300 299 299 299 299 299 299 299 299 300 300 300 299 300 300 300 299 299 299 299 299 299 300 299 299 300 299 299 300 300 300 299 300 300 299 299 300 299 300 300 299 300 299 300 299 300 300 299 299 299 299 299 299 300 299 299 300 300 300 299 300 299 300 300 299 299 299 299 299 299 299 299 300 299 300 300 299 300 300 299 299 300 300 299 300 300 299 300 299 299 300 299 299", "output": "580000001"}, {"input": "1 1\n5", "output": "1"}, {"input": "1 10000000\n1", "output": "10000000"}, {"input": "2 1\n1 2", "output": "2"}, {"input": "2 2\n1 2", "output": "3"}, {"input": "2 1000\n1 2", "output": "1001"}, {"input": "100 100\n99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2", "output": "150"}, {"input": "100 82\n151 81 114 37 17 178 92 164 215 108 286 89 108 87 77 166 110 215 212 300 125 92 247 221 78 120 163 113 249 141 36 241 179 116 187 287 69 103 76 80 160 200 249 170 159 72 8 138 171 45 97 271 114 176 54 181 4 259 246 39 29 292 203 49 122 253 99 259 252 74 231 92 43 142 23 144 109 282 47 207 140 212 9 3 255 137 285 146 22 84 52 98 41 21 177 63 217 62 291 64", "output": "274"}, {"input": "99 105\n16 118 246 3 44 149 156 290 44 267 221 123 57 175 233 24 23 120 298 228 119 62 23 183 169 294 195 115 131 157 223 298 77 106 283 117 255 41 17 298 22 176 164 187 214 101 10 181 117 70 271 291 59 156 44 204 140 205 253 176 270 43 188 287 40 250 271 100 244 297 133 228 98 218 290 69 171 66 195 283 63 154 191 66 238 104 32 122 79 190 55 110 276 2 188 26 44 276 230", "output": "435"}, {"input": "99 84\n62 4 145 285 106 132 30 96 211 28 144 190 95 184 227 177 128 60 143 19 19 81 38 83 108 172 241 228 48 39 171 282 233 294 74 271 178 87 24 180 212 190 223 153 230 198 261 232 150 18 190 91 265 61 280 13 207 70 182 117 270 77 242 163 138 212 165 273 247 23 52 88 243 85 293 12 135 284 162 91 174 109 42 19 218 289 9 59 9 117 61 122 78 287 144 176 281 123 243", "output": "280"}, {"input": "99 116\n102 257 115 247 279 111 118 255 198 168 183 184 32 3 36 204 178 186 88 67 205 91 21 40 116 93 2 148 226 65 37 69 69 7 82 205 152 25 34 272 26 283 78 142 17 110 101 250 120 128 145 276 182 57 19 104 228 221 94 220 279 216 220 294 3 289 185 272 73 180 246 107 246 260 219 268 218 41 166 50 230 143 166 158 194 153 256 209 28 255 77 33 143 296 38 81 133 57 263", "output": "268"}, {"input": "99 125\n85 108 102 3 173 193 27 38 288 272 14 270 98 42 34 206 275 54 20 164 207 255 3 196 183 3 61 37 98 223 208 231 144 76 114 19 138 156 157 198 124 39 120 283 34 139 240 240 247 132 211 81 225 12 101 108 63 20 30 158 266 201 101 101 113 157 132 108 41 215 54 27 154 102 175 276 103 35 52 130 10 266 229 202 85 210 116 149 214 14 121 263 217 152 240 275 113 253 53", "output": "404"}, {"input": "99 9\n218 254 64 32 130 52 242 40 29 188 196 300 258 165 110 151 265 142 295 166 141 260 158 218 184 251 180 16 177 125 192 279 201 189 170 37 7 150 117 79 97 13 69 156 254 287 17 214 95 300 150 197 133 161 46 26 82 119 174 6 252 42 264 136 273 127 42 274 113 278 165 173 231 209 159 56 248 39 46 41 222 278 114 84 150 13 63 106 179 279 44 15 13 74 50 168 38 181 127", "output": "51"}, {"input": "100 200\n99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2", "output": "250"}, {"input": "100 201\n99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2", "output": "251"}, {"input": "100 199\n99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2", "output": "249"}], "language": "cpp"}, "prompt": "B. Once Again...\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nYou are given an array of positive integers a1, a2, ..., an * T of length n * T. We know that for any i > n it is true that ai = ai - n. Find the length of the longest non-decreasing sequence of the given array.\nInput\nThe first line contains two space-separated integers: n, T (1 <= n <= 100, 1 <= T <= 107). The second line contains n space-separated integers a1, a2, ..., an (1 <= ai <= 300).\nOutput\nPrint a single number - the length of a sought sequence.\n", "generation": "int longest_sequence(int n, int T, vector<int> &a) {\n  vector<int> dp(n + 1, 1);\n  for (int i = 1; i <= n; i++) {\n    for (int j = 0; j < i; j++) {\n      if (a[j] <= a[i]) {\n        dp[i] = max(dp[i], dp[j] + 1);\n      }\n    }\n  }\n  return dp[n];\n}\n", "result": "failed: compilation error: test.cpp:1:36: error: \u2018vector\u2019 has not been declared\n    1 | int longest_sequence(int n, int T, vector<int> &a) {\n      |                                    ^~~~~~\ntest.cpp:1:42: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018<\u2019 token\n    1 | int longest_sequence(int n, int T, vector<int> &a) {\n      |                                          ^\ntest.cpp: In function \u2018int longest_sequence(int, int, int)\u2019:\ntest.cpp:2:3: error: \u2018vector\u2019 was not declared in this scope\n    2 |   vector<int> dp(n + 1, 1);\n      |   ^~~~~~\ntest.cpp:2:10: error: expected primary-expression before \u2018int\u2019\n    2 |   vector<int> dp(n + 1, 1);\n      |          ^~~\ntest.cpp:5:11: error: \u2018a\u2019 was not declared in this scope\n    5 |       if (a[j] <= a[i]) {\n      |           ^\ntest.cpp:6:9: error: \u2018dp\u2019 was not declared in this scope\n    6 |         dp[i] = max(dp[i], dp[j] + 1);\n      |         ^~\ntest.cpp:6:17: error: \u2018max\u2019 was not declared in this scope\n    6 |         dp[i] = max(dp[i], dp[j] + 1);\n      |                 ^~~\ntest.cpp:10:10: error: \u2018dp\u2019 was not declared in this scope\n   10 |   return dp[n];\n      |          ^~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/11", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nlong long binom(int n, int r) {\n  return (long long)n choose r  / n! * (n - r)!;\n}\n\nint main() {\n  int p, alpha, A;\n  cin >> p;\n  cin >> alpha;\n  cin >> A;\n\n  long long ans = binom(A, p) * alpha;\n  cout << ans % (109 + 7) << endl;\n\n  return 0;\n}\n", "testcases": [{"input": "2 2\n7", "output": "3"}, {"input": "3 1\n9", "output": "17"}, {"input": "3 3\n9", "output": "0"}, {"input": "2 4\n5000", "output": "8576851"}, {"input": "59 3\n1278", "output": "0"}, {"input": "2 32000\n9640964517994512271549217984818688593750307265582881241933884424292553671710475114982485640729953611583901114174942225900833823781043202544700074467407019076486780806448401525011217363960434588627694210928908532781134521088386662525919074361649345689756096665052715927642290443098675390900077017216490087339841268580935767414369148088637309271415965473890166274382207883459835363974593476565655346239571671868466476986169010091857678352088197896990815389107926049336567060930731697350931135059903111865...", "output": "0"}, {"input": "2 43\n91294524189682126912108591094343060560279041112882482536264020611963632671143642291897074749724140970161480778960471179126432402190291911033525586159516887280471798432987512205195031180182769198893571", "output": "466618476"}, {"input": "3 1\n67", "output": "1518"}, {"input": "3 1\n8", "output": "9"}, {"input": "17 1\n3343", "output": "3955866"}, {"input": "13 2\n825", "output": "70548"}, {"input": "17 1\n935747", "output": "349474793"}, {"input": "79 2\n484521", "output": "136267727"}, {"input": "4679 2\n96533885", "output": "31957885"}, {"input": "251 3\n34106727", "output": "243909930"}, {"input": "2 23\n2825666196", "output": "684631706"}, {"input": "5 12\n1594355", "output": "0"}, {"input": "100003 2\n97389782", "output": "0"}, {"input": "999999937 1\n3501092449", "output": "365423796"}, {"input": "999999929 1\n708929754", "output": "0"}, {"input": "2 203\n1364314877317006994721955753062669519721387443256362764663300316014405415427100793395824989466006051", "output": "200605144"}, {"input": "5 102\n6488994830394029396353515227107480047703257955061407081771245058930506496128212235396729161430031", "output": "689966800"}, {"input": "100003 17\n11308756195429026209159218281779131898260926255198579096122089230609019579878999794185954258912170", "output": "92344311"}, {"input": "999999937 11\n5288940788755459409564349320259509293731609366571637200283425133566419952358519527220164588187924778", "output": "734024483"}, {"input": "999999929 10\n252415489202912310205276639219302507423145151212606944393620004151279088543717368355582320756277628", "output": "410991035"}, {"input": "8030623 1\n7391946705", "output": "16151750"}, {"input": "8428969 1\n51642713", "output": "25668431"}, {"input": "875509 1\n9748849576", "output": "206824394"}, {"input": "1221971 1\n79131359", "output": "344669306"}, {"input": "3677111 1\n3947614679", "output": "731336001"}, {"input": "4055801 1\n57128202", "output": "694460592"}, {"input": "6648143 1\n5875544750", "output": "907664841"}, {"input": "7040413 1\n78640343", "output": "299757593"}, {"input": "9709009 1\n2634859963", "output": "497869486"}, {"input": "70979 1\n56655195", "output": "873157860"}, {"input": "5893919 9\n2210309498556502639082865806054288036968702568515503990010345752069086486014544763616785766171083029", "output": "509168733"}, {"input": "3286427 3\n32824120217168867503177075773101487258651027053054498182388625841560564426484376370000468826643786", "output": "218416035"}, {"input": "8934829 12\n5048272609027744689584230909741172415239400471666476392160572093949157832786399486962245730213411626", "output": "203584930"}, {"input": "6243073 4\n54400052247879189148039137626578952762968555544521623972286314204888279306920422704563468161626006", "output": "872781381"}, {"input": "1672457 15\n3847806708076502739500476173585865162224673529150721814545285545371388410787530016329736665854635480", "output": "732273771"}, {"input": "9293491 7\n48319797892187743808453690342431892528370716043453177493057646722749549949137439033049576518430270", "output": "199732363"}, {"input": "4540993 10\n5694761289449694169154104450970948644405389630203784854430413891269455104899781759279256470945063996", "output": "194137151"}, {"input": "1994623 4\n16382948906033764999878837315878029135617293130932808617919331691967251084555542282238971884256579", "output": "802566567"}, {"input": "7542851 4\n6595054484074093529836320042218879209936747749396675376618286577189222598359156018487897406667640759", "output": "278827366"}, {"input": "4884179 10\n75275670396386658491762589457701754821709330221849314456866064056828965964277393680113615925466793", "output": "549377788"}, {"input": "2 3320\n46428326859562520245449090606603472259178467542626320725451996911071869965691975407825434739376383059346909365956149461638633445399118477675528743697164187399071256353948939884169261671460252010781215860667432734707322452207513974247807635497920875327890483792027119980335888484837159343756246517310712068405834652118587656573642635181869624733812768771233304782134136090334480415015720170922573554288208337368814639892882232736472316732343263221764722441119326123668394048262555206442385912709943313984...", "output": "0"}, {"input": "999999937 1000000000\n451531881185286042788184213096036770282425261750733189085557152505960582776831249777382886952152439212458147970966520074527240096093404741881217177946040698723518792759407214986179071660704688622417320905711590362964562189805113996288569757020814648409114723474691090193383005171346440682203478162064409225960309923931660156586041239634014238801318495347445797123088171385181197211886687999535925998303982411770208681433504269637746796863561965786128888861132670272939618895183735142700535...", "output": "0"}], "language": "cpp"}, "prompt": "D. Number of Binominal Coefficients\ntime limit per test\n4 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nFor a given prime integer p and integers alpha, A calculate the number of pairs of integers (n, k), such that 0 <= k <= n <= A and  is divisible by palpha.\nAs the answer can be rather large, print the remainder of the answer moduly 109 + 7.\nLet us remind you that  is the number of ways k objects can be chosen from the set of n objects.\nInput\nThe first line contains two integers, p and alpha (1 <= p, alpha <= 109, p is prime).\nThe second line contains the decimal record of integer A (0 <= A < 101000) without leading zeroes.\nOutput\nIn the single line print the answer to the problem.\n", "generation": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nlong long binom(int n, int r) {\n  return (long long)n choose r  / n! * (n - r)!;\n}\n\nint main() {\n  int p, alpha, A;\n  cin >> p;\n  cin >> alpha;\n  cin >> A;\n\n  long long ans = binom(A, p) * alpha;\n  cout << ans % (109 + 7) << endl;\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018long long int binom(int, int)\u2019:\ntest.cpp:8:22: error: expected \u2018;\u2019 before \u2018choose\u2019\n    8 |   return (long long)n choose r  / n! * (n - r)!;\n      |                      ^~~~~~~\n      |                      ;\ntest.cpp:8:23: error: \u2018choose\u2019 was not declared in this scope\n    8 |   return (long long)n choose r  / n! * (n - r)!;\n      |                       ^~~~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/12", "completion_id": 0, "test_suite": {"code": "int main() {\n  int n;\n  cin >> n;\n\n  vector<int> h, v, ans;\n  for (int i = 0; i < n; i++) {\n    cin >> h[i] >> v[i];\n  }\n\n  vector<int> roadMap(n * n, 0);\n  for (int i = 0; i < n; i++) {\n    roadMap[h[i]]++;\n    roadMap[v[i]]++;\n  }\n\n  for (int i = 1; roadMap[i] > 0; i++) {\n    ans.push_back(i);\n  }\n\n  sort(ans.begin(), ans.end());\n  for (int i = 0; i < ans.size(); i++) {\n    cout << ans[i] << \" \";\n  }\n  cout << endl;\n\n  return 0;\n}\n", "testcases": [{"input": "2\n1 1\n1 2\n2 1\n2 2", "output": "1 4"}, {"input": "1\n1 1", "output": "1"}, {"input": "2\n1 1\n2 2\n1 2\n2 1", "output": "1 2"}, {"input": "2\n1 2\n2 2\n2 1\n1 1", "output": "1 3"}, {"input": "3\n2 2\n1 2\n3 2\n3 3\n1 1\n2 3\n1 3\n3 1\n2 1", "output": "1 4 5"}, {"input": "3\n1 3\n3 1\n2 1\n1 1\n1 2\n2 2\n3 2\n3 3\n2 3", "output": "1 2 6"}, {"input": "4\n1 3\n2 3\n2 4\n4 4\n3 1\n1 1\n3 4\n2 1\n1 4\n4 3\n4 1\n3 2\n1 2\n4 2\n2 2\n3 3", "output": "1 3 5 14"}, {"input": "4\n3 3\n4 2\n2 3\n3 4\n4 4\n1 2\n3 2\n2 2\n1 4\n3 1\n4 1\n2 1\n1 3\n1 1\n4 3\n2 4", "output": "1 2 9 12"}, {"input": "9\n4 5\n2 3\n8 3\n5 6\n9 3\n4 4\n5 4\n4 7\n1 7\n8 4\n1 4\n1 5\n5 7\n7 8\n7 1\n9 9\n8 7\n7 5\n3 7\n6 6\n7 3\n5 2\n3 6\n7 4\n9 6\n5 8\n9 7\n6 3\n7 9\n1 2\n1 1\n6 2\n5 3\n7 2\n1 6\n4 1\n6 1\n8 9\n2 2\n3 9\n2 9\n7 7\n2 8\n9 4\n2 5\n8 6\n3 4\n2 1\n2 7\n6 5\n9 1\n3 3\n3 8\n5 5\n4 3\n3 1\n1 9\n6 4\n3 2\n6 8\n2 6\n5 9\n8 5\n8 8\n9 5\n6 9\n9 2\n3 5\n4 9\n4 8\n2 4\n5 1\n4 6\n7 6\n9 8\n1 3\n4 2\n8 1\n8 2\n6 7\n1 8", "output": "1 2 4 9 10 14 16 32 56"}, {"input": "8\n1 1\n1 2\n1 3\n1 4\n1 5\n8 6\n1 7\n1 8\n2 1\n8 5\n2 3\n2 4\n2 5\n2 6\n4 3\n2 2\n3 1\n3 2\n3 3\n3 4\n3 5\n3 6\n5 6\n3 8\n4 1\n4 2\n2 7\n4 4\n8 8\n4 6\n4 7\n4 8\n5 1\n5 2\n5 3\n6 5\n5 5\n3 7\n5 7\n5 8\n6 1\n6 2\n6 3\n6 4\n5 4\n6 6\n6 7\n6 8\n7 1\n7 2\n7 3\n7 4\n7 5\n7 6\n7 7\n7 8\n8 1\n8 2\n8 3\n8 4\n2 8\n1 6\n8 7\n4 5", "output": "1 6 11 18 28 36 39 56"}, {"input": "9\n9 9\n5 5\n8 8\n3 3\n2 2\n6 6\n4 4\n1 1\n7 7\n8 4\n1 4\n1 5\n5 7\n7 8\n7 1\n1 7\n8 7\n7 5\n3 7\n5 6\n7 3\n5 2\n3 6\n7 4\n9 6\n5 8\n9 7\n6 3\n7 9\n1 2\n4 5\n6 2\n5 3\n7 2\n1 6\n4 1\n6 1\n8 9\n2 3\n3 9\n2 9\n5 4\n2 8\n9 4\n2 5\n8 6\n3 4\n2 1\n2 7\n6 5\n9 1\n8 3\n3 8\n9 3\n4 3\n3 1\n1 9\n6 4\n3 2\n6 8\n2 6\n5 9\n8 5\n4 7\n9 5\n6 9\n9 2\n3 5\n4 9\n4 8\n2 4\n5 1\n4 6\n7 6\n9 8\n1 3\n4 2\n8 1\n8 2\n6 7\n1 8", "output": "1 2 3 4 5 6 7 8 9"}], "language": "cpp"}, "prompt": "A. Asphalting Roads\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nCity X consists of n vertical and n horizontal infinite roads, forming n * n intersections. Roads (both vertical and horizontal) are numbered from 1 to n, and the intersections are indicated by the numbers of the roads that form them.\nSand roads have long been recognized out of date, so the decision was made to asphalt them. To do this, a team of workers was hired and a schedule of work was made, according to which the intersections should be asphalted.\nRoad repairs are planned for n2 days. On the i-th day of the team arrives at the i-th intersection in the list and if none of the two roads that form the intersection were already asphalted they asphalt both roads. Otherwise, the team leaves the intersection, without doing anything with the roads.\nAccording to the schedule of road works tell in which days at least one road will be asphalted.\nInput\nThe first line contains integer n (1 <= n <= 50) - the number of vertical and horizontal roads in the city.\nNext n2 lines contain the order of intersections in the schedule. The i-th of them contains two numbers hi, vi (1 <= hi, vi <= n), separated by a space, and meaning that the intersection that goes i-th in the timetable is at the intersection of the hi-th horizontal and vi-th vertical roads. It is guaranteed that all the intersections in the timetable are distinct.\nOutput\nIn the single line print the numbers of the days when road works will be in progress in ascending order. The days are numbered starting from 1.\n", "generation": "int main() {\n  int n;\n  cin >> n;\n\n  vector<int> h, v, ans;\n  for (int i = 0; i < n; i++) {\n    cin >> h[i] >> v[i];\n  }\n\n  vector<int> roadMap(n * n, 0);\n  for (int i = 0; i < n; i++) {\n    roadMap[h[i]]++;\n    roadMap[v[i]]++;\n  }\n\n  for (int i = 1; roadMap[i] > 0; i++) {\n    ans.push_back(i);\n  }\n\n  sort(ans.begin(), ans.end());\n  for (int i = 0; i < ans.size(); i++) {\n    cout << ans[i] << \" \";\n  }\n  cout << endl;\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> n;\n      |   ^~~\ntest.cpp:5:3: error: \u2018vector\u2019 was not declared in this scope\n    5 |   vector<int> h, v, ans;\n      |   ^~~~~~\ntest.cpp:5:10: error: expected primary-expression before \u2018int\u2019\n    5 |   vector<int> h, v, ans;\n      |          ^~~\ntest.cpp:7:12: error: \u2018h\u2019 was not declared in this scope\n    7 |     cin >> h[i] >> v[i];\n      |            ^\ntest.cpp:7:20: error: \u2018v\u2019 was not declared in this scope\n    7 |     cin >> h[i] >> v[i];\n      |                    ^\ntest.cpp:10:10: error: expected primary-expression before \u2018int\u2019\n   10 |   vector<int> roadMap(n * n, 0);\n      |          ^~~\ntest.cpp:12:5: error: \u2018roadMap\u2019 was not declared in this scope\n   12 |     roadMap[h[i]]++;\n      |     ^~~~~~~\ntest.cpp:12:13: error: \u2018h\u2019 was not declared in this scope\n   12 |     roadMap[h[i]]++;\n      |             ^\ntest.cpp:13:13: error: \u2018v\u2019 was not declared in this scope\n   13 |     roadMap[v[i]]++;\n      |             ^\ntest.cpp:16:19: error: \u2018roadMap\u2019 was not declared in this scope\n   16 |   for (int i = 1; roadMap[i] > 0; i++) {\n      |                   ^~~~~~~\ntest.cpp:17:5: error: \u2018ans\u2019 was not declared in this scope\n   17 |     ans.push_back(i);\n      |     ^~~\ntest.cpp:20:8: error: \u2018ans\u2019 was not declared in this scope\n   20 |   sort(ans.begin(), ans.end());\n      |        ^~~\ntest.cpp:20:3: error: \u2018sort\u2019 was not declared in this scope; did you mean \u2018short\u2019?\n   20 |   sort(ans.begin(), ans.end());\n      |   ^~~~\n      |   short\ntest.cpp:22:5: error: \u2018cout\u2019 was not declared in this scope\n   22 |     cout << ans[i] << \" \";\n      |     ^~~~\ntest.cpp:24:3: error: \u2018cout\u2019 was not declared in this scope\n   24 |   cout << endl;\n      |   ^~~~\ntest.cpp:24:11: error: \u2018endl\u2019 was not declared in this scope\n   24 |   cout << endl;\n      |           ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/13", "completion_id": 0, "test_suite": {"code": "int solve(int n, vector<int> a) {\n  int ans = 0;\n  int i = 0;\n  vector<int> v(n);\n  v[0] = 1;\n  for (int j = 1; j < n; j++) {\n    v[j] = v[j - 1] + abs(a[j] - a[j - 1]) + 1;\n  }\n  return v[n - 1];\n}\n", "testcases": [{"input": "3\n0 2 0", "output": "1"}, {"input": "5\n4 2 3 0 1", "output": "3"}, {"input": "7\n0 3 1 0 5 2 6", "output": "2"}, {"input": "1\n0", "output": "0"}, {"input": "2\n0 1", "output": "0"}, {"input": "10\n0 0 0 0 0 0 0 0 0 0", "output": "0"}, {"input": "3\n0 2 1", "output": "1"}, {"input": "10\n7 1 9 3 5 8 6 0 2 4", "output": "9"}, {"input": "10\n1 3 5 7 9 8 6 4 2 0", "output": "9"}, {"input": "10\n5 0 0 1 3 2 2 2 5 7", "output": "1"}, {"input": "10\n8 6 5 3 9 7 1 4 2 0", "output": "8"}, {"input": "10\n1 2 4 5 0 1 3 7 1 4", "output": "2"}, {"input": "10\n3 4 8 9 5 1 2 0 6 7", "output": "6"}, {"input": "10\n2 2 0 0 6 2 9 0 2 0", "output": "2"}, {"input": "10\n1 7 5 3 2 6 0 8 4 9", "output": "8"}, {"input": "9\n1 3 8 6 2 4 5 0 7", "output": "7"}, {"input": "9\n1 3 5 7 8 6 4 2 0", "output": "8"}, {"input": "9\n2 4 3 1 3 0 5 4 3", "output": "3"}, {"input": "9\n3 5 6 8 7 0 4 2 1", "output": "5"}, {"input": "9\n2 0 8 1 0 3 0 5 3", "output": "2"}, {"input": "9\n6 2 3 7 4 8 5 1 0", "output": "4"}, {"input": "9\n3 1 5 6 0 3 2 0 0", "output": "2"}, {"input": "9\n2 6 4 1 0 8 5 3 7", "output": "7"}, {"input": "100\n27 20 18 78 93 38 56 2 48 75 36 88 96 57 69 10 25 74 68 86 65 85 66 14 22 12 43 80 99 34 42 63 61 71 77 15 37 54 21 59 23 94 28 30 50 84 62 76 47 16 26 64 82 92 72 53 17 11 41 91 35 83 79 95 67 13 1 7 3 4 73 90 8 19 33 58 98 32 39 45 87 52 60 46 6 44 49 70 51 9 5 29 31 24 40 97 81 0 89 55", "output": "69"}, {"input": "100\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99 98 96 94 92 90 88 86 84 82 80 78 76 74 72 70 68 66 64 62 60 58 56 54 52 50 48 46 44 42 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2 0", "output": "99"}, {"input": "100\n13 89 81 0 62 1 59 92 29 13 1 37 2 8 53 15 20 34 12 70 0 85 97 55 84 60 37 54 14 65 22 69 30 22 95 44 59 85 50 80 9 71 91 93 74 21 11 78 28 21 40 81 76 24 26 60 48 85 61 68 89 76 46 73 34 52 98 29 4 38 94 51 5 55 6 27 74 27 38 37 82 70 44 89 51 59 30 37 15 55 63 78 42 39 71 43 4 10 2 13", "output": "21"}, {"input": "100\n1 3 5 7 58 11 13 15 17 19 45 23 25 27 29 31 33 35 37 39 41 43 21 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 81 79 83 85 87 89 91 93 95 97 48 98 96 94 92 90 88 44 84 82 80 78 76 74 72 70 68 66 64 62 60 9 56 54 52 50 99 46 86 42 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2 0", "output": "96"}, {"input": "100\n32 47 74 8 14 4 12 68 18 0 44 80 14 38 6 57 4 72 69 3 21 78 74 22 39 32 58 63 34 33 23 6 39 11 6 12 18 4 0 11 20 28 16 1 22 12 57 55 13 48 43 1 50 18 87 6 11 45 38 67 37 14 7 56 6 41 1 55 5 73 78 64 38 18 38 8 37 0 18 61 37 58 58 62 86 5 0 2 15 43 34 61 2 21 15 9 69 1 11 24", "output": "4"}, {"input": "100\n40 3 55 7 6 77 13 46 17 64 21 54 25 27 91 41 1 15 37 82 23 43 42 47 26 95 53 5 11 59 61 9 78 67 69 58 73 0 36 79 60 83 2 87 63 33 71 89 97 99 98 93 56 92 19 88 86 84 39 28 65 20 34 76 51 94 66 12 62 49 96 72 24 52 48 50 44 35 74 31 38 57 81 32 22 80 70 29 30 18 68 16 14 90 10 8 85 4 45 75", "output": "75"}, {"input": "100\n34 16 42 21 84 27 11 7 82 16 95 39 36 64 26 0 38 37 2 2 16 56 16 61 55 42 26 5 61 8 30 20 19 15 9 78 5 34 15 0 3 17 36 36 1 5 4 26 18 0 14 25 7 5 91 7 43 26 79 37 17 27 40 55 66 7 0 2 16 23 68 35 2 5 9 21 1 7 2 9 4 3 22 15 27 6 0 47 5 0 12 9 20 55 36 10 6 8 5 1", "output": "3"}, {"input": "100\n35 53 87 49 13 24 93 20 5 11 31 32 40 52 96 46 1 25 66 69 28 88 84 82 70 9 75 39 26 21 18 29 23 57 90 16 48 22 95 0 58 43 7 73 8 62 63 30 64 92 79 3 6 94 34 12 76 99 67 55 56 97 14 91 68 36 44 78 41 71 86 89 47 74 4 45 98 37 80 33 83 27 42 59 72 54 17 60 51 81 15 77 65 50 10 85 61 19 38 2", "output": "67"}, {"input": "99\n89 96 56 31 32 14 9 66 87 34 69 5 92 54 41 52 46 30 22 26 16 18 20 68 62 73 90 43 79 33 58 98 37 45 10 78 94 51 19 0 91 39 28 47 17 86 3 61 77 7 15 64 55 83 65 71 97 88 6 48 24 11 8 42 81 4 63 93 50 74 35 12 95 27 53 82 29 85 84 60 72 40 36 57 23 13 38 59 49 1 75 44 76 2 21 25 70 80 67", "output": "75"}, {"input": "99\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 98 96 94 92 90 88 86 84 82 80 78 76 74 72 70 68 66 64 62 60 58 56 54 52 50 48 46 44 42 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2 0", "output": "98"}, {"input": "99\n82 7 6 77 17 28 90 3 68 12 63 60 24 20 4 81 71 85 57 45 11 84 3 91 49 34 89 82 0 50 48 88 36 76 36 5 62 48 20 2 20 45 69 27 37 62 42 31 57 51 92 84 89 25 7 62 12 23 23 56 30 90 27 10 77 58 48 38 56 68 57 15 33 1 34 67 16 47 75 70 69 28 38 16 5 61 85 76 44 90 37 22 77 94 55 1 97 8 69", "output": "22"}, {"input": "99\n1 51 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 42 43 45 47 49 3 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 98 96 94 92 90 88 86 84 82 80 8 76 74 72 70 68 66 22 62 60 58 56 54 52 0 48 46 44 41 40 38 36 34 32 30 28 26 24 64 20 18 16 14 12 10 78 6 4 2 50", "output": "96"}, {"input": "99\n22 3 19 13 65 87 28 17 41 40 31 21 8 37 29 65 65 53 16 33 13 5 76 4 72 9 2 76 57 72 50 15 75 0 30 13 83 36 12 31 49 51 65 22 48 31 60 15 2 17 6 1 8 0 1 63 3 16 7 7 2 1 47 28 26 21 2 36 1 5 20 25 44 0 2 39 46 30 33 11 15 34 34 4 84 52 0 39 7 3 17 15 6 38 52 64 26 1 0", "output": "3"}, {"input": "99\n24 87 25 82 97 11 37 15 23 19 34 17 76 13 45 89 33 1 27 78 63 43 54 47 49 2 42 41 75 83 61 90 65 67 21 71 60 57 77 62 81 58 85 69 3 91 68 55 72 93 29 94 66 16 88 86 84 53 14 39 35 44 9 70 80 92 56 79 74 5 64 31 52 50 48 46 51 59 40 38 36 96 32 30 28 95 7 22 20 18 26 73 12 10 8 6 4 98 0", "output": "74"}, {"input": "99\n22 14 0 44 6 17 6 6 37 45 0 48 19 8 57 8 10 0 3 12 25 2 5 53 9 49 15 6 38 14 9 40 38 22 27 12 64 10 11 35 89 19 46 39 12 24 48 0 52 1 27 27 24 4 64 24 5 0 67 3 5 39 0 1 13 37 2 8 46 1 28 70 6 79 14 15 33 6 7 34 6 18 4 71 1 55 33 71 18 11 47 23 72 53 65 32 2 7 28", "output": "3"}, {"input": "99\n28 59 73 89 52 27 0 20 36 12 83 95 31 24 54 94 49 14 51 34 50 93 13 1 2 68 63 48 41 81 23 43 18 9 16 38 33 60 62 3 40 85 72 69 90 98 11 37 22 44 35 6 21 39 82 10 64 66 96 42 74 30 8 67 97 46 84 32 17 57 75 71 5 26 4 55 58 29 7 15 45 19 92 91 78 65 88 25 86 80 77 87 79 53 47 70 56 76 61", "output": "63"}], "language": "cpp"}, "prompt": "B. Robot's Task\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nRobot Doc is located in the hall, with n computers stand in a line, numbered from left to right from 1 to n. Each computer contains exactly one piece of information, each of which Doc wants to get eventually. The computers are equipped with a security system, so to crack the i-th of them, the robot needs to collect at least ai any pieces of information from the other computers. Doc can hack the computer only if he is right next to it.\nThe robot is assembled using modern technologies and can move along the line of computers in either of the two possible directions, but the change of direction requires a large amount of resources from Doc. Tell the minimum number of changes of direction, which the robot will have to make to collect all n parts of information if initially it is next to computer with number 1.\nIt is guaranteed that there exists at least one sequence of the robot's actions, which leads to the collection of all information. Initially Doc doesn't have any pieces of information.\nInput\nThe first line contains number n (1 <= n <= 1000). The second line contains n non-negative integers a1, a2, ..., an (0 <= ai < n), separated by a space. It is guaranteed that there exists a way for robot to collect all pieces of the information.\nOutput\nPrint a single number - the minimum number of changes in direction that the robot will have to make in order to collect all n parts of information.\n", "generation": "int solve(int n, vector<int> a) {\n  int ans = 0;\n  int i = 0;\n  vector<int> v(n);\n  v[0] = 1;\n  for (int j = 1; j < n; j++) {\n    v[j] = v[j - 1] + abs(a[j] - a[j - 1]) + 1;\n  }\n  return v[n - 1];\n}\n", "result": "failed: compilation error: test.cpp:1:18: error: \u2018vector\u2019 has not been declared\n    1 | int solve(int n, vector<int> a) {\n      |                  ^~~~~~\ntest.cpp:1:24: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018<\u2019 token\n    1 | int solve(int n, vector<int> a) {\n      |                        ^\ntest.cpp: In function \u2018int solve(int, int)\u2019:\ntest.cpp:4:3: error: \u2018vector\u2019 was not declared in this scope\n    4 |   vector<int> v(n);\n      |   ^~~~~~\ntest.cpp:4:10: error: expected primary-expression before \u2018int\u2019\n    4 |   vector<int> v(n);\n      |          ^~~\ntest.cpp:5:3: error: \u2018v\u2019 was not declared in this scope\n    5 |   v[0] = 1;\n      |   ^\ntest.cpp:7:27: error: \u2018a\u2019 was not declared in this scope\n    7 |     v[j] = v[j - 1] + abs(a[j] - a[j - 1]) + 1;\n      |                           ^\ntest.cpp:7:23: error: \u2018abs\u2019 was not declared in this scope; did you mean \u2018ans\u2019?\n    7 |     v[j] = v[j - 1] + abs(a[j] - a[j - 1]) + 1;\n      |                       ^~~\n      |                       ans\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/14", "completion_id": 0, "test_suite": {"code": "vector<int> findArray(vector<int>& gcdTable) {\n  int n = gcdTable.size();\n  vector<int> a(n);\n\n  // Calculate the GCD of two numbers and store it in the table\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n      int gcd = __gcd(gcdTable[i], gcdTable[j]);\n      gcdTable[i] = gcd;\n    }\n  }\n\n  // Find the common divisor that is shared by all numbers in the table\n  int gcd = gcdTable[0];\n  for (int i = 1; i < n; i++) {\n    if (gcdTable[i] != gcd) {\n      gcd = 0;\n      break;\n    }\n  }\n\n  // If there is a common divisor, restore array a\n  if (gcd) {\n    for (int i = 0; i < n; i++) {\n      a[i] = gcdTable[i] / gcd;\n    }\n  }\n\n  return a;\n}\n", "testcases": [{"input": "4\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2", "output": "2 3 4 6"}, {"input": "1\n42", "output": "42"}, {"input": "2\n1 1 1 1", "output": "1 1"}, {"input": "2\n54748096 1 641009859 1", "output": "54748096 641009859"}, {"input": "3\n1 7 923264237 374288891 7 524125987 1 1 1", "output": "374288891 524125987 923264237"}, {"input": "4\n1 1 1 1 1 702209411 496813081 673102149 1 1 561219907 1 1 1 1 1", "output": "496813081 561219907 673102149 702209411"}, {"input": "5\n1 1 1 1 1 9 564718673 585325539 1 1 3 1 9 1 1 365329221 3 291882089 3 1 412106895 1 1 1 3", "output": "291882089 365329221 412106895 564718673 585325539"}, {"input": "5\n1 161 1 534447872 161 233427865 1 7 7 73701396 1 401939237 4 1 1 1 1 1 7 115704211 1 4 1 7 1", "output": "73701396 115704211 233427865 401939237 534447872"}, {"input": "5\n2 11 1 1 2 4 2 1 181951 4 345484316 2 4 4 4 2 1 140772746 1 634524 4 521302304 1 2 11", "output": "181951 634524 140772746 345484316 521302304"}, {"input": "5\n27 675 1 1 347621274 5 2 13 189 738040275 5 1 189 13 1 959752125 770516962 769220855 5 5 2 675 1 1 27", "output": "347621274 738040275 769220855 770516962 959752125"}, {"input": "5\n2029 6087 2029 2029 6087 2029 527243766 4058 2029 2029 2029 2029 2029 2029 2029 2029 165353355 4058 2029 731472761 739767313 2029 2029 2029 585281282", "output": "165353355 527243766 585281282 731472761 739767313"}, {"input": "5\n537163 537163 537163 537163 537163 537163 1074326 537163 537163 537163 515139317 1074326 537163 537163 537163 539311652 321760637 170817834 537163 537163 537163 537163 537163 537163 392666153", "output": "170817834 321760637 392666153 515139317 539311652"}, {"input": "4\n1 188110 607844 2 1 1 695147 1 1 1 143380513 1 1 1 1 2", "output": "188110 607844 695147 143380513"}, {"input": "4\n3 1 96256522 120 360284388 3 3 2 2 2 3 12 12 2 1 198192381", "output": "120 96256522 198192381 360284388"}, {"input": "4\n67025 13405 1915 1915 1915 1915 5745 676469920 53620 5745 660330300 67025 53620 380098775 533084295 13405", "output": "380098775 533084295 660330300 676469920"}, {"input": "4\n700521 233507 759364764 467014 468181535 233507 233507 890362191 233507 700521 467014 233507 946637378 233507 233507 233507", "output": "468181535 759364764 890362191 946637378"}, {"input": "3\n484799 1 1 744137 1 1 909312183 1 1", "output": "484799 744137 909312183"}, {"input": "3\n1 716963379 1 1 205 1 1 964 1", "output": "205 964 716963379"}, {"input": "3\n5993 781145599 54740062 5993 5993 267030101 5993 5993 5993", "output": "54740062 267030101 781145599"}, {"input": "3\n121339 121339 121339 55451923 531222142 121339 121339 435485671 121339", "output": "55451923 435485671 531222142"}, {"input": "5\n4 4 4 4 4 4 4 4 4 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1", "output": "1 2 4 4 4"}, {"input": "4\n1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3", "output": "1 1 3 3"}, {"input": "6\n1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 6 6 6 6 6 6 6 6 6", "output": "1 3 3 6 6 6"}], "language": "cpp"}, "prompt": "C. GCD Table\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nThe GCD table G of size n * n for an array of positive integers a of length n is defined by formula\nLet us remind you that the greatest common divisor (GCD) of two positive integers x and y is the greatest integer that is divisor of both x and y, it is denoted as . For example, for array a = {4, 3, 6, 2} of length 4 the GCD table will look as follows:\nGiven all the numbers of the GCD table G, restore array a.\nInput\nThe first line contains number n (1 <= n <= 500) - the length of array a. The second line contains n2 space-separated numbers - the elements of the GCD table of G for array a.\nAll the numbers in the table are positive integers, not exceeding 109. Note that the elements are given in an arbitrary order. It is guaranteed that the set of the input data corresponds to some array a.\nOutput\nIn the single line print n positive integers - the elements of array a. If there are multiple possible solutions, you are allowed to print any of them.\n", "generation": "vector<int> findArray(vector<int>& gcdTable) {\n  int n = gcdTable.size();\n  vector<int> a(n);\n\n  // Calculate the GCD of two numbers and store it in the table\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n; j++) {\n      int gcd = __gcd(gcdTable[i], gcdTable[j]);\n      gcdTable[i] = gcd;\n    }\n  }\n\n  // Find the common divisor that is shared by all numbers in the table\n  int gcd = gcdTable[0];\n  for (int i = 1; i < n; i++) {\n    if (gcdTable[i] != gcd) {\n      gcd = 0;\n      break;\n    }\n  }\n\n  // If there is a common divisor, restore array a\n  if (gcd) {\n    for (int i = 0; i < n; i++) {\n      a[i] = gcdTable[i] / gcd;\n    }\n  }\n\n  return a;\n}\n", "result": "failed: compilation error: test.cpp:1:1: error: \u2018vector\u2019 does not name a type\n    1 | vector<int> findArray(vector<int>& gcdTable) {\n      | ^~~~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/15", "completion_id": 0, "test_suite": {"code": "int longest_sequence(int n, int T, vector<int> &a) {\n  vector<int> dp(n + 1, 1);\n  for (int i = 1; i <= n; i++) {\n    for (int j = 0; j < i; j++) {\n      if (a[j] <= a[i]) {\n        dp[i] = max(dp[i], dp[j] + 1);\n      }\n    }\n  }\n  return dp[n];\n}\n", "testcases": [{"input": "4 3\n3 1 4 2", "output": "5"}, {"input": "1 1000\n42", "output": "1000"}, {"input": "31 3767\n16 192 152 78 224 202 186 52 118 19 13 38 199 196 35 295 100 64 205 37 166 124 169 214 66 243 134 192 253 270 92", "output": "7546"}, {"input": "15 12226\n18 125 213 221 124 147 154 182 134 184 51 49 267 88 251", "output": "12234"}, {"input": "81 10683\n3 52 265 294 213 242 185 151 27 165 128 237 124 14 43 147 104 162 124 103 233 156 288 57 289 195 129 77 97 138 153 289 203 126 34 5 97 35 224 120 200 203 222 94 171 294 293 108 145 193 227 206 34 295 1 233 258 7 246 34 60 232 58 169 77 150 272 279 171 228 168 84 114 229 149 97 66 246 212 236 151", "output": "32070"}, {"input": "29 7954\n1 257 8 47 4 26 49 228 120 53 138 101 101 35 293 232 299 195 219 45 195 174 96 157 168 138 288 114 291", "output": "15919"}, {"input": "39 1057\n1 120 247 206 260 117 152 24 162 266 202 152 278 199 63 188 271 62 62 177 213 77 229 197 263 178 211 102 255 257 163 134 14 66 11 113 216 288 225", "output": "2128"}, {"input": "2 766\n147 282", "output": "767"}, {"input": "2 13101\n180 199", "output": "13102"}, {"input": "29 1918\n8 81 38 146 195 199 31 153 267 139 48 202 38 259 139 71 253 3 289 44 210 81 78 259 236 189 219 102 133", "output": "3845"}, {"input": "46 13793\n1 239 20 83 33 183 122 208 46 141 11 264 196 266 104 130 116 117 31 213 235 207 219 206 206 46 89 112 260 191 245 234 87 255 186 4 251 177 130 59 81 54 227 116 105 284", "output": "27600"}, {"input": "2 8698\n71 225", "output": "8699"}, {"input": "68 2450\n107 297 185 215 224 128 8 65 101 202 19 145 255 233 138 223 144 132 32 122 153 85 31 160 219 125 167 220 138 255 219 119 165 249 47 124 20 37 160 24 156 154 163 226 270 88 74 192 204 300 194 184 235 93 267 160 12 216 91 191 267 241 152 9 111 76 201 295", "output": "7366"}, {"input": "100 10000000\n98 99 96 97 94 95 92 93 90 91 88 89 86 87 84 85 82 83 80 81 78 79 76 77 74 75 72 73 70 71 68 69 66 67 64 65 62 63 60 61 58 59 56 57 54 55 52 53 50 51 48 49 46 47 44 45 42 43 40 41 38 39 36 37 34 35 32 33 30 31 28 29 26 27 24 25 22 23 20 21 18 19 16 17 14 15 12 13 10 11 8 9 6 7 4 5 2 3 1 100", "output": "10000050"}, {"input": "99 10000000\n97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2 99", "output": "10000050"}, {"input": "99 10000000\n96 97 98 93 94 95 90 91 92 87 88 89 84 85 86 81 82 83 78 79 80 75 76 77 72 73 74 69 70 71 66 67 68 63 64 65 60 61 62 57 58 59 54 55 56 51 52 53 48 49 50 45 46 47 42 43 44 39 40 41 36 37 38 33 34 35 30 31 32 27 28 29 24 25 26 21 22 23 18 19 20 15 16 17 12 13 14 9 10 11 6 7 8 3 4 5 2 1 99", "output": "10000065"}, {"input": "100 10000000\n97 98 99 94 95 96 91 92 93 88 89 90 85 86 87 82 83 84 79 80 81 76 77 78 73 74 75 70 71 72 67 68 69 64 65 66 61 62 63 58 59 60 55 56 57 52 53 54 49 50 51 46 47 48 43 44 45 40 41 42 37 38 39 34 35 36 31 32 33 28 29 30 25 26 27 22 23 24 19 20 21 16 17 18 13 14 15 10 11 12 7 8 9 4 5 6 1 2 3 100", "output": "10000067"}, {"input": "98 10000000\n95 96 97 92 93 94 89 90 91 86 87 88 83 84 85 80 81 82 77 78 79 74 75 76 71 72 73 68 69 70 65 66 67 62 63 64 59 60 61 56 57 58 53 54 55 50 51 52 47 48 49 44 45 46 41 42 43 38 39 40 35 36 37 32 33 34 29 30 31 26 27 28 23 24 25 20 21 22 17 18 19 14 15 16 11 12 13 8 9 10 5 6 7 2 3 4 97 98", "output": "20000034"}, {"input": "95 10000000\n92 93 94 89 90 91 86 87 88 83 84 85 80 81 82 77 78 79 74 75 76 71 72 73 68 69 70 65 66 67 62 63 64 59 60 61 56 57 58 53 54 55 50 51 52 47 48 49 44 45 46 41 42 43 38 39 40 35 36 37 32 33 34 29 30 31 26 27 28 23 24 25 20 21 22 17 18 19 14 15 16 11 12 13 8 9 10 5 6 7 2 3 4 94 95", "output": "20000033"}, {"input": "98 10000000\n195 196 197 192 193 194 189 190 191 186 187 188 183 184 185 180 181 182 177 178 179 174 175 176 171 172 173 168 169 170 165 166 167 162 163 164 159 160 161 156 157 158 153 154 155 150 151 152 147 148 149 144 145 146 141 142 143 138 139 140 135 136 137 132 133 134 129 130 131 126 127 128 123 124 125 120 121 122 117 118 119 114 115 116 111 112 113 108 109 110 105 106 107 102 103 104 1 2", "output": "10000065"}, {"input": "95 10000000\n192 193 194 189 190 191 186 187 188 183 184 185 180 181 182 177 178 179 174 175 176 171 172 173 168 169 170 165 166 167 162 163 164 159 160 161 156 157 158 153 154 155 150 151 152 147 148 149 144 145 146 141 142 143 138 139 140 135 136 137 132 133 134 129 130 131 126 127 128 123 124 125 120 121 122 117 118 119 114 115 116 111 112 113 108 109 110 105 106 107 102 103 104 1 2", "output": "10000063"}, {"input": "98 10000000\n1 2 195 196 197 192 193 194 189 190 191 186 187 188 183 184 185 180 181 182 177 178 179 174 175 176 171 172 173 168 169 170 165 166 167 162 163 164 159 160 161 156 157 158 153 154 155 150 151 152 147 148 149 144 145 146 141 142 143 138 139 140 135 136 137 132 133 134 129 130 131 126 127 128 123 124 125 120 121 122 117 118 119 114 115 116 111 112 113 108 109 110 105 106 107 102 103 104", "output": "10000066"}, {"input": "98 10000000\n1 2 5 4 3 8 7 6 11 10 9 14 13 12 17 16 15 20 19 18 23 22 21 26 25 24 29 28 27 32 31 30 35 34 33 38 37 36 41 40 39 44 43 42 47 46 45 50 49 48 53 52 51 56 55 54 59 58 57 62 61 60 65 64 63 68 67 66 71 70 69 74 73 72 77 76 75 80 79 78 83 82 81 86 85 84 89 88 87 92 91 90 95 94 93 98 97 96", "output": "10000033"}, {"input": "98 10000000\n1 1 5 4 3 8 7 6 11 10 9 14 13 12 17 16 15 20 19 18 23 22 21 26 25 24 29 28 27 32 31 30 35 34 33 38 37 36 41 40 39 44 43 42 47 46 45 50 49 48 53 52 51 56 55 54 59 58 57 62 61 60 65 64 63 68 67 66 71 70 69 74 73 72 77 76 75 80 79 78 83 82 81 86 85 84 89 88 87 92 91 90 95 94 93 98 97 96", "output": "20000032"}, {"input": "98 10000000\n1 2 95 96 97 92 93 94 89 90 91 86 87 88 83 84 85 80 81 82 77 78 79 74 75 76 71 72 73 68 69 70 65 66 67 62 63 64 59 60 61 56 57 58 53 54 55 50 51 52 47 48 49 44 45 46 41 42 43 38 39 40 35 36 37 32 33 34 29 30 31 26 27 28 23 24 25 20 21 22 17 18 19 14 15 16 11 12 13 8 9 10 5 6 7 2 3 4", "output": "20000034"}, {"input": "99 10000000\n1 2 3 95 96 97 92 93 94 89 90 91 86 87 88 83 84 85 80 81 82 77 78 79 74 75 76 71 72 73 68 69 70 65 66 67 62 63 64 59 60 61 56 57 58 53 54 55 50 51 52 47 48 49 44 45 46 41 42 43 38 39 40 35 36 37 32 33 34 29 30 31 26 27 28 23 24 25 20 21 22 17 18 19 14 15 16 11 12 13 8 9 10 5 6 7 2 3 4", "output": "20000034"}, {"input": "100 10000000\n1 2 2 1 2 2 1 1 2 2 1 2 1 1 1 1 1 2 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 1 2 2 2 1 1 2 2 1 1 2 2 2 2 2 2 1 1 2 2 1 1 2 1 1 2 1 2 1 1 2 1 2 2 2 1 1 2 2 1 2 1 1 2 2 1 1 1 2 1 2 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1", "output": "560000000"}, {"input": "100 10000000\n2 4 2 5 2 1 1 3 2 4 3 5 3 4 2 4 2 4 1 2 3 3 1 1 3 3 1 3 5 1 2 1 5 2 3 4 5 2 1 2 1 3 4 4 4 3 5 5 3 1 5 2 1 4 4 3 2 3 2 3 2 4 2 1 3 3 3 2 3 5 1 5 4 3 1 4 5 3 2 4 5 4 1 3 4 1 1 3 4 2 2 5 4 2 2 3 3 2 3 1", "output": "260000004"}, {"input": "100 10000000\n31 150 132 17 273 18 292 260 226 217 165 68 36 176 89 75 227 246 137 151 87 215 267 242 21 156 27 27 202 73 218 290 57 2 85 159 96 39 191 268 67 64 55 266 29 209 215 85 149 267 161 153 118 293 104 197 91 252 275 56 288 76 82 239 215 105 283 88 76 294 138 166 9 273 14 119 67 101 250 13 63 215 80 5 221 234 258 195 129 67 152 56 277 129 111 98 213 22 209 299", "output": "40000023"}, {"input": "100 10000000\n285 219 288 277 266 249 297 286 290 266 210 201 275 280 200 272 297 253 246 292 272 285 226 250 297 270 214 251 263 285 237 292 245 225 247 221 263 250 253 280 235 288 278 297 283 294 208 279 227 290 246 208 274 238 282 240 214 277 239 282 255 278 214 292 277 267 290 257 239 234 252 246 217 274 254 249 229 275 210 297 254 215 222 228 262 287 290 292 277 227 292 282 248 278 207 249 236 240 252 216", "output": "50000016"}, {"input": "100 10000000\n300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300", "output": "1000000000"}, {"input": "99 10000000\n300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300", "output": "990000000"}, {"input": "99 10000000\n299 299 300 300 299 299 300 299 299 299 299 299 299 299 299 300 300 300 299 300 300 300 299 299 299 299 299 299 300 299 299 300 299 299 300 300 300 299 300 300 299 299 300 299 300 300 299 300 299 300 299 300 300 299 299 299 299 299 299 300 299 299 300 300 300 299 300 299 300 300 299 299 299 299 299 299 299 299 300 299 300 300 299 300 300 299 299 300 300 299 300 300 299 300 299 299 300 299 299", "output": "580000001"}, {"input": "1 1\n5", "output": "1"}, {"input": "1 10000000\n1", "output": "10000000"}, {"input": "2 1\n1 2", "output": "2"}, {"input": "2 2\n1 2", "output": "3"}, {"input": "2 1000\n1 2", "output": "1001"}, {"input": "100 100\n99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2", "output": "150"}, {"input": "100 82\n151 81 114 37 17 178 92 164 215 108 286 89 108 87 77 166 110 215 212 300 125 92 247 221 78 120 163 113 249 141 36 241 179 116 187 287 69 103 76 80 160 200 249 170 159 72 8 138 171 45 97 271 114 176 54 181 4 259 246 39 29 292 203 49 122 253 99 259 252 74 231 92 43 142 23 144 109 282 47 207 140 212 9 3 255 137 285 146 22 84 52 98 41 21 177 63 217 62 291 64", "output": "274"}, {"input": "99 105\n16 118 246 3 44 149 156 290 44 267 221 123 57 175 233 24 23 120 298 228 119 62 23 183 169 294 195 115 131 157 223 298 77 106 283 117 255 41 17 298 22 176 164 187 214 101 10 181 117 70 271 291 59 156 44 204 140 205 253 176 270 43 188 287 40 250 271 100 244 297 133 228 98 218 290 69 171 66 195 283 63 154 191 66 238 104 32 122 79 190 55 110 276 2 188 26 44 276 230", "output": "435"}, {"input": "99 84\n62 4 145 285 106 132 30 96 211 28 144 190 95 184 227 177 128 60 143 19 19 81 38 83 108 172 241 228 48 39 171 282 233 294 74 271 178 87 24 180 212 190 223 153 230 198 261 232 150 18 190 91 265 61 280 13 207 70 182 117 270 77 242 163 138 212 165 273 247 23 52 88 243 85 293 12 135 284 162 91 174 109 42 19 218 289 9 59 9 117 61 122 78 287 144 176 281 123 243", "output": "280"}, {"input": "99 116\n102 257 115 247 279 111 118 255 198 168 183 184 32 3 36 204 178 186 88 67 205 91 21 40 116 93 2 148 226 65 37 69 69 7 82 205 152 25 34 272 26 283 78 142 17 110 101 250 120 128 145 276 182 57 19 104 228 221 94 220 279 216 220 294 3 289 185 272 73 180 246 107 246 260 219 268 218 41 166 50 230 143 166 158 194 153 256 209 28 255 77 33 143 296 38 81 133 57 263", "output": "268"}, {"input": "99 125\n85 108 102 3 173 193 27 38 288 272 14 270 98 42 34 206 275 54 20 164 207 255 3 196 183 3 61 37 98 223 208 231 144 76 114 19 138 156 157 198 124 39 120 283 34 139 240 240 247 132 211 81 225 12 101 108 63 20 30 158 266 201 101 101 113 157 132 108 41 215 54 27 154 102 175 276 103 35 52 130 10 266 229 202 85 210 116 149 214 14 121 263 217 152 240 275 113 253 53", "output": "404"}, {"input": "99 9\n218 254 64 32 130 52 242 40 29 188 196 300 258 165 110 151 265 142 295 166 141 260 158 218 184 251 180 16 177 125 192 279 201 189 170 37 7 150 117 79 97 13 69 156 254 287 17 214 95 300 150 197 133 161 46 26 82 119 174 6 252 42 264 136 273 127 42 274 113 278 165 173 231 209 159 56 248 39 46 41 222 278 114 84 150 13 63 106 179 279 44 15 13 74 50 168 38 181 127", "output": "51"}, {"input": "100 200\n99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2", "output": "250"}, {"input": "100 201\n99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2", "output": "251"}, {"input": "100 199\n99 100 97 98 95 96 93 94 91 92 89 90 87 88 85 86 83 84 81 82 79 80 77 78 75 76 73 74 71 72 69 70 67 68 65 66 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 45 46 43 44 41 42 39 40 37 38 35 36 33 34 31 32 29 30 27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2", "output": "249"}], "language": "cpp"}, "prompt": "D. Once Again...\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nYou are given an array of positive integers a1, a2, ..., an * T of length n * T. We know that for any i > n it is true that ai = ai - n. Find the length of the longest non-decreasing sequence of the given array.\nInput\nThe first line contains two space-separated integers: n, T (1 <= n <= 100, 1 <= T <= 107). The second line contains n space-separated integers a1, a2, ..., an (1 <= ai <= 300).\nOutput\nPrint a single number - the length of a sought sequence.\n", "generation": "int longest_sequence(int n, int T, vector<int> &a) {\n  vector<int> dp(n + 1, 1);\n  for (int i = 1; i <= n; i++) {\n    for (int j = 0; j < i; j++) {\n      if (a[j] <= a[i]) {\n        dp[i] = max(dp[i], dp[j] + 1);\n      }\n    }\n  }\n  return dp[n];\n}\n", "result": "failed: compilation error: test.cpp:1:36: error: \u2018vector\u2019 has not been declared\n    1 | int longest_sequence(int n, int T, vector<int> &a) {\n      |                                    ^~~~~~\ntest.cpp:1:42: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018<\u2019 token\n    1 | int longest_sequence(int n, int T, vector<int> &a) {\n      |                                          ^\ntest.cpp: In function \u2018int longest_sequence(int, int, int)\u2019:\ntest.cpp:2:3: error: \u2018vector\u2019 was not declared in this scope\n    2 |   vector<int> dp(n + 1, 1);\n      |   ^~~~~~\ntest.cpp:2:10: error: expected primary-expression before \u2018int\u2019\n    2 |   vector<int> dp(n + 1, 1);\n      |          ^~~\ntest.cpp:5:11: error: \u2018a\u2019 was not declared in this scope\n    5 |       if (a[j] <= a[i]) {\n      |           ^\ntest.cpp:6:9: error: \u2018dp\u2019 was not declared in this scope\n    6 |         dp[i] = max(dp[i], dp[j] + 1);\n      |         ^~\ntest.cpp:6:17: error: \u2018max\u2019 was not declared in this scope\n    6 |         dp[i] = max(dp[i], dp[j] + 1);\n      |                 ^~~\ntest.cpp:10:10: error: \u2018dp\u2019 was not declared in this scope\n   10 |   return dp[n];\n      |          ^~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/17", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nbool is divisible(int n, int t) {\n  return n % t == 0;\n}\n\nint main() {\n  int n, t;\n  cin >> n;\n  cin >> t;\n\n  int ans = -1;\n  for (int i = 1; i <= n; i++) {\n    int num = i;\n    string str = to_string(num);\n    if (str.length() == n && is divisible(num, t)) {\n      ans = num;\n      break;\n    }\n  }\n\n  if (ans == -1) {\n    cout << -1;\n  } else {\n    cout << ans;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "3 2", "output": "222"}, {"input": "2 2", "output": "22"}, {"input": "4 3", "output": "3333"}, {"input": "5 3", "output": "33333"}, {"input": "10 7", "output": "7777777777"}, {"input": "2 9", "output": "99"}, {"input": "18 8", "output": "888888888888888888"}, {"input": "1 5", "output": "5"}, {"input": "1 10", "output": "-1"}, {"input": "100 5", "output": "5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555"}, {"input": "10 2", "output": "2222222222"}, {"input": "18 10", "output": "111111111111111110"}, {"input": "1 9", "output": "9"}, {"input": "7 6", "output": "6666666"}, {"input": "4 4", "output": "4444"}, {"input": "14 7", "output": "77777777777777"}, {"input": "3 8", "output": "888"}, {"input": "1 3", "output": "3"}, {"input": "2 8", "output": "88"}, {"input": "3 8", "output": "888"}, {"input": "4 3", "output": "3333"}, {"input": "5 9", "output": "99999"}, {"input": "4 8", "output": "8888"}, {"input": "3 4", "output": "444"}, {"input": "9 4", "output": "444444444"}, {"input": "8 10", "output": "11111110"}, {"input": "1 6", "output": "6"}, {"input": "20 3", "output": "33333333333333333333"}, {"input": "15 10", "output": "111111111111110"}, {"input": "31 4", "output": "4444444444444444444444444444444"}, {"input": "18 9", "output": "999999999999999999"}, {"input": "72 4", "output": "444444444444444444444444444444444444444444444444444444444444444444444444"}, {"input": "76 8", "output": "8888888888888888888888888888888888888888888888888888888888888888888888888888"}, {"input": "12 5", "output": "555555555555"}, {"input": "54 5", "output": "555555555555555555555555555555555555555555555555555555"}, {"input": "96 10", "output": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110"}, {"input": "15 9", "output": "999999999999999"}, {"input": "100 2", "output": "2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222"}, {"input": "99 3", "output": "333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"}, {"input": "98 4", "output": "44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"}, {"input": "97 5", "output": "5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555"}, {"input": "100 6", "output": "6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666"}, {"input": "99 7", "output": "777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777"}, {"input": "98 8", "output": "88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888"}, {"input": "97 9", "output": "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"}, {"input": "100 10", "output": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110"}, {"input": "3 10", "output": "110"}, {"input": "2 4", "output": "44"}, {"input": "2 10", "output": "10"}, {"input": "10 10", "output": "1111111110"}, {"input": "4 10", "output": "1110"}, {"input": "25 10", "output": "1111111111111111111111110"}, {"input": "50 10", "output": "11111111111111111111111111111111111111111111111110"}, {"input": "5 10", "output": "11110"}, {"input": "99 10", "output": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110"}, {"input": "100 10", "output": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110"}, {"input": "1 2", "output": "2"}, {"input": "20 10", "output": "11111111111111111110"}, {"input": "99 7", "output": "777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777"}, {"input": "89 5", "output": "55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555"}, {"input": "6 10", "output": "111110"}, {"input": "3 8", "output": "888"}, {"input": "1 9", "output": "9"}, {"input": "1 4", "output": "4"}, {"input": "100 7", "output": "7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777"}], "language": "cpp"}, "prompt": "A. Olesya and Rodion\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nOlesya loves numbers consisting of n digits, and Rodion only likes numbers that are divisible by t. Find some number that satisfies both of them.\nYour task is: given the n and t print an integer strictly larger than zero consisting of n digits that is divisible by t. If such number doesn't exist, print  - 1.\nInput\nThe single line contains two numbers, n and t (1 <= n <= 100, 2 <= t <= 10) - the length of the number and the number it should be divisible by.\nOutput\nPrint one such positive number without leading zeroes, - the answer to the problem, or  - 1, if such number doesn't exist. If there are multiple possible answers, you are allowed to print any of them.\n", "generation": "#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nbool is divisible(int n, int t) {\n  return n % t == 0;\n}\n\nint main() {\n  int n, t;\n  cin >> n;\n  cin >> t;\n\n  int ans = -1;\n  for (int i = 1; i <= n; i++) {\n    int num = i;\n    string str = to_string(num);\n    if (str.length() == n && is divisible(num, t)) {\n      ans = num;\n      break;\n    }\n  }\n\n  if (ans == -1) {\n    cout << -1;\n  } else {\n    cout << ans;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp:6:9: error: expected initializer before \u2018divisible\u2019\n    6 | bool is divisible(int n, int t) {\n      |         ^~~~~~~~~\ntest.cpp: In function \u2018int main()\u2019:\ntest.cpp:19:30: error: \u2018is\u2019 was not declared in this scope; did you mean \u2018i\u2019?\n   19 |     if (str.length() == n && is divisible(num, t)) {\n      |                              ^~\n      |                              i\ntest.cpp:19:32: error: expected \u2018)\u2019 before \u2018divisible\u2019\n   19 |     if (str.length() == n && is divisible(num, t)) {\n      |        ~                       ^~~~~~~~~~\n      |                                )\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/18", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nlong long solve() {\n  int n;\n  cin >> n;\n\n  long long ans = 0;\n  for (int i = 0; i < n; i++) {\n    int a;\n    cin >> a;\n    long long sum = a + a + n + a + 2n;\n    if (sum != 6) {\n      ans++;\n    }\n  }\n\n  return ans % (109 + 7);\n}\n\nint main() {\n  long long t = 1;\n  cin >> t;\n  for (int i = 0; i < t; i++) {\n    cout << solve() << endl;\n  }\n  return 0;\n}\n", "testcases": [{"input": "1", "output": "20"}, {"input": "2", "output": "680"}, {"input": "3", "output": "19340"}, {"input": "4", "output": "529040"}, {"input": "5", "output": "14332100"}, {"input": "7", "output": "459529590"}, {"input": "10", "output": "848178170"}, {"input": "14", "output": "356372551"}, {"input": "58000", "output": "66667472"}, {"input": "6", "output": "387302840"}, {"input": "8", "output": "423769706"}, {"input": "9", "output": "557078005"}, {"input": "15", "output": "83420839"}, {"input": "20", "output": "208683407"}, {"input": "22", "output": "695178405"}, {"input": "48", "output": "974152357"}, {"input": "74", "output": "972015869"}, {"input": "100", "output": "364994225"}, {"input": "866", "output": "363347020"}, {"input": "1673", "output": "112069243"}, {"input": "555", "output": "506150275"}, {"input": "2000", "output": "394190362"}, {"input": "9877", "output": "915063121"}, {"input": "5984", "output": "546302050"}, {"input": "2091", "output": "982683445"}, {"input": "10000", "output": "246305722"}, {"input": "10868", "output": "118127713"}, {"input": "66115", "output": "413345995"}, {"input": "62212", "output": "587210092"}, {"input": "100000", "output": "192156836"}, {"input": "2441", "output": "149858187"}, {"input": "18569", "output": "54080463"}, {"input": "69289", "output": "582363404"}, {"input": "85417", "output": "796810422"}, {"input": "68841", "output": "371243141"}, {"input": "10000", "output": "246305722"}, {"input": "4343", "output": "682818914"}, {"input": "12312", "output": "837337190"}, {"input": "5462", "output": "719513799"}, {"input": "100", "output": "364994225"}, {"input": "11", "output": "550315374"}, {"input": "100000", "output": "192156836"}], "language": "cpp"}, "prompt": "B. Kolya and Tanya\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nKolya loves putting gnomes at the circle table and giving them coins, and Tanya loves studying triplets of gnomes, sitting in the vertexes of an equilateral triangle.\nMore formally, there are 3n gnomes sitting in a circle. Each gnome can have from 1 to 3 coins. Let's number the places in the order they occur in the circle by numbers from 0 to 3n - 1, let the gnome sitting on the i-th place have ai coins. If there is an integer i (0 <= i < n) such that ai + ai + n + ai + 2n != 6, then Tanya is satisfied.\nCount the number of ways to choose ai so that Tanya is satisfied. As there can be many ways of distributing coins, print the remainder of this number modulo 109 + 7. Two ways, a and b, are considered distinct if there is index i (0 <= i < 3n), such that ai != bi (that is, some gnome got different number of coins in these two ways).\nInput\nA single line contains number n (1 <= n <= 105) - the number of the gnomes divided by three.\nOutput\nPrint a single number - the remainder of the number of variants of distributing coins that satisfy Tanya modulo 109 + 7.\n", "generation": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nlong long solve() {\n  int n;\n  cin >> n;\n\n  long long ans = 0;\n  for (int i = 0; i < n; i++) {\n    int a;\n    cin >> a;\n    long long sum = a + a + n + a + 2n;\n    if (sum != 6) {\n      ans++;\n    }\n  }\n\n  return ans % (109 + 7);\n}\n\nint main() {\n  long long t = 1;\n  cin >> t;\n  for (int i = 0; i < t; i++) {\n    cout << solve() << endl;\n  }\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018long long int solve()\u2019:\ntest.cpp:14:37: error: unable to find numeric literal operator \u2018operator\"\"n\u2019\n   14 |     long long sum = a + a + n + a + 2n;\n      |                                     ^~\ntest.cpp:14:37: note: use \u2018-fext-numeric-literals\u2019 to enable more built-in suffixes\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/20", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool isPrime(int n) {\n  for (int i = 2; i * i <= n; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nint main() {\n  int n;\n  cin >> n;\n\n  int k = 0;\n  vector<int> primes;\n  for (int i = 2; i * i <= n; i++) {\n    if (isPrime(i) && n - i > primes.size()) {\n      primes.push_back(i);\n      k++;\n    }\n  }\n\n  cout << k << endl;\n  for (int prime : primes) {\n    cout << prime << \" \";\n  }\n  cout << endl;\n\n  return 0;\n}\n", "testcases": [{"input": "27", "output": "3\n2 2 23"}, {"input": "3", "output": "1\n3"}, {"input": "25", "output": "2\n2 23"}, {"input": "9", "output": "2\n2 7"}, {"input": "91", "output": "2\n2 89"}, {"input": "57", "output": "3\n2 2 53"}, {"input": "31", "output": "1\n31"}, {"input": "555", "output": "3\n3 5 547"}, {"input": "700000001", "output": "1\n700000001"}, {"input": "5", "output": "1\n5"}, {"input": "7", "output": "1\n7"}, {"input": "11", "output": "1\n11"}, {"input": "13", "output": "1\n13"}, {"input": "15", "output": "2\n2 13"}, {"input": "17", "output": "1\n17"}, {"input": "19", "output": "1\n19"}, {"input": "21", "output": "2\n2 19"}, {"input": "23", "output": "1\n23"}, {"input": "29", "output": "1\n29"}, {"input": "79", "output": "1\n79"}, {"input": "99", "output": "2\n2 97"}, {"input": "27", "output": "3\n2 2 23"}, {"input": "55", "output": "2\n2 53"}, {"input": "79", "output": "1\n79"}, {"input": "585", "output": "3\n3 5 577"}, {"input": "245", "output": "3\n2 2 241"}, {"input": "793", "output": "3\n3 3 787"}, {"input": "133", "output": "2\n2 131"}, {"input": "681", "output": "3\n2 2 677"}, {"input": "981399", "output": "2\n2 981397"}, {"input": "867773", "output": "1\n867773"}, {"input": "654141", "output": "3\n3 11 654127"}, {"input": "202985", "output": "3\n2 2 202981"}, {"input": "784533", "output": "3\n3 17 784513"}, {"input": "370359", "output": "3\n19 79 370261"}, {"input": "396831", "output": "3\n19 79 396733"}, {"input": "492211", "output": "3\n19 79 492113"}, {"input": "838347", "output": "3\n19 79 838249"}, {"input": "1098945", "output": "3\n19 79 1098847"}, {"input": "1313565", "output": "3\n19 79 1313467"}, {"input": "1349631", "output": "3\n19 79 1349533"}, {"input": "1357299", "output": "3\n19 79 1357201"}, {"input": "1357323", "output": "3\n13 109 1357201"}, {"input": "1357329", "output": "3\n19 109 1357201"}, {"input": "1388581", "output": "3\n19 79 1388483"}, {"input": "5275", "output": "2\n2 5273"}, {"input": "9515", "output": "3\n2 2 9511"}, {"input": "7847", "output": "3\n3 3 7841"}, {"input": "7077", "output": "3\n3 5 7069"}, {"input": "9531", "output": "3\n3 7 9521"}, {"input": "7865", "output": "3\n5 7 7853"}, {"input": "9675", "output": "3\n3 11 9661"}, {"input": "8909", "output": "3\n3 13 8893"}, {"input": "7147", "output": "3\n5 13 7129"}, {"input": "8487", "output": "3\n3 17 8467"}, {"input": "436273289", "output": "3\n3 277 436273009"}, {"input": "649580445", "output": "3\n3 271 649580171"}, {"input": "944193065", "output": "3\n7 251 944192807"}, {"input": "630045387", "output": "3\n11 239 630045137"}, {"input": "931103229", "output": "3\n3 223 931103003"}, {"input": "950664039", "output": "3\n3 197 950663839"}, {"input": "996104777", "output": "3\n7 173 996104597"}, {"input": "997255617", "output": "3\n7 157 997255453"}, {"input": "999962901", "output": "3\n19 109 999962773"}, {"input": "999995529", "output": "3\n19 79 999995431"}, {"input": "999995339", "output": "3\n5 43 999995291"}, {"input": "999998367", "output": "3\n5 23 999998339"}, {"input": "999999891", "output": "3\n3 5 999999883"}, {"input": "999999935", "output": "3\n3 3 999999929"}, {"input": "999999755", "output": "3\n2 2 999999751"}, {"input": "999999759", "output": "2\n2 999999757"}, {"input": "999999191", "output": "1\n999999191"}, {"input": "999999999", "output": "3\n3 59 999999937"}, {"input": "409449117", "output": "3\n2 2 409449113"}, {"input": "882499837", "output": "3\n3 3 882499831"}, {"input": "765615965", "output": "3\n5 23 765615937"}, {"input": "648732093", "output": "3\n3 11 648732079"}, {"input": "826815517", "output": "3\n3 11 826815503"}, {"input": "4898941", "output": "2\n2 4898939"}, {"input": "182982365", "output": "3\n5 13 182982347"}, {"input": "66098493", "output": "3\n3 41 66098449"}, {"input": "539149213", "output": "1\n539149213"}, {"input": "655957385", "output": "3\n3 13 655957369"}, {"input": "199999581", "output": "3\n19 79 199999483"}, {"input": "199998345", "output": "3\n19 79 199998247"}, {"input": "199991935", "output": "3\n19 79 199991837"}, {"input": "199986207", "output": "3\n19 79 199986109"}, {"input": "499991589", "output": "3\n19 79 499991491"}, {"input": "499984689", "output": "3\n19 79 499984591"}, {"input": "499984159", "output": "3\n19 79 499984061"}, {"input": "499966179", "output": "3\n19 79 499966081"}, {"input": "999995529", "output": "3\n19 79 999995431"}, {"input": "999995085", "output": "3\n19 79 999994987"}, {"input": "999991817", "output": "3\n11 137 999991669"}, {"input": "999991797", "output": "3\n19 109 999991669"}, {"input": "999991791", "output": "3\n13 109 999991669"}, {"input": "748859699", "output": "3\n3 3 748859693"}, {"input": "323845235", "output": "3\n3 3 323845229"}, {"input": "462409937", "output": "3\n2 2 462409933"}, {"input": "618047403", "output": "3\n3 13 618047387"}, {"input": "501148647", "output": "3\n2 2 501148643"}, {"input": "998017623", "output": "2\n2 998017621"}, {"input": "436273289", "output": "3\n3 277 436273009"}, {"input": "999999965", "output": "3\n5 23 999999937"}, {"input": "5", "output": "1\n5"}, {"input": "1000037", "output": "1\n1000037"}, {"input": "989898987", "output": "3\n2 2 989898983"}, {"input": "999999999", "output": "3\n3 59 999999937"}, {"input": "100000003", "output": "3\n3 11 99999989"}], "language": "cpp"}, "prompt": "D. Dima and Lisa\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nDima loves representing an odd number as the sum of multiple primes, and Lisa loves it when there are at most three primes. Help them to represent the given number as the sum of at most than three primes.\nMore formally, you are given an odd numer n. Find a set of numbers pi (1 <= i <= k), such that\n1 <= k <= 3\npi is a prime\nThe numbers pi do not necessarily have to be distinct. It is guaranteed that at least one possible solution exists.\nInput\nThe single line contains an odd number n (3 <= n < 109).\nOutput\nIn the first line print k (1 <= k <= 3), showing how many numbers are in the representation you found.\nIn the second line print numbers pi in any order. If there are multiple possible solutions, you can print any of them.\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool isPrime(int n) {\n  for (int i = 2; i * i <= n; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nint main() {\n  int n;\n  cin >> n;\n\n  int k = 0;\n  vector<int> primes;\n  for (int i = 2; i * i <= n; i++) {\n    if (isPrime(i) && n - i > primes.size()) {\n      primes.push_back(i);\n      k++;\n    }\n  }\n\n  cout << k << endl;\n  for (int prime : primes) {\n    cout << prime << \" \";\n  }\n  cout << endl;\n\n  return 0;\n}\n", "result": "failed: wrong answer @ testcase 1", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/22", "completion_id": 0, "test_suite": {"code": "int main() {\n  int n;\n  cin >> n;\n\n  vector<int> v(n);\n  vector<int> d(n);\n  vector<int> p(n);\n\n  for (int i = 0; i < n; i++) {\n    cin >> v[i];\n    cin >> d[i];\n    cin >> p[i];\n  }\n\n  vector<int> ans;\n  int k = 0;\n  for (int i = 0; i < n; i++) {\n    p[i] -= v[i];\n    if (p[i] < 0) {\n      k++;\n      for (int j = i; j < n; j++) {\n        p[j] -= d[i];\n      }\n    }\n  }\n\n  cout << k << endl;\n  for (int i = 0; i < k; i++) {\n    cout << p[i] << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "5\n4 2 2\n4 1 2\n5 2 4\n3 3 5\n5 1 2", "output": "2\n1 3"}, {"input": "5\n4 5 1\n5 3 9\n4 1 2\n2 1 8\n4 1 9", "output": "4\n1 2 4 5"}, {"input": "10\n10 7 10\n3 6 11\n8 4 10\n10 1 11\n7 3 13\n7 2 13\n7 6 14\n3 4 17\n9 4 20\n5 2 24", "output": "3\n1 2 5"}, {"input": "10\n5 6 3\n7 4 10\n9 1 17\n2 8 23\n9 10 24\n6 8 18\n3 2 35\n7 6 6\n1 3 12\n9 9 5", "output": "6\n1 2 3 4 5 7"}, {"input": "10\n4 9 1\n8 2 14\n7 10 20\n6 9 18\n5 3 19\n2 9 7\n6 8 30\n8 7 38\n6 5 5\n6 9 37", "output": "8\n1 2 3 4 5 7 8 10"}, {"input": "10\n10 3 3\n8 6 17\n9 5 26\n10 7 17\n3 10 29\n3 1 27\n3 3 7\n8 10 28\n1 3 23\n3 4 6", "output": "5\n1 2 3 5 8"}, {"input": "10\n5 6 1\n9 2 6\n4 1 5\n4 10 5\n1 8 23\n9 4 21\n3 9 6\n7 8 34\n7 4 24\n8 9 21", "output": "5\n1 2 5 6 8"}, {"input": "100\n39 85 23\n36 94 93\n48 70 62\n59 23 98\n21 98 141\n48 9 222\n66 58 259\n15 29 304\n85 94 338\n58 40 424\n58 12 472\n63 64 483\n71 8 515\n45 56 554\n20 72 596\n6 75 649\n63 65 742\n48 69 809\n48 39 836\n66 86 902\n84 91 981\n38 69 1090\n5 11 1129\n17 14 1169\n100 88 1170\n80 62 1213\n29 55 1302\n16 18 1346\n33 59 1385\n14 75 1411\n70 12 1487\n47 50 1532\n44 21 1554\n4 56 1599\n57 48 1603\n38 99 1677\n25 37 1762\n77 66 1818\n33 10 1894\n60 80 1903\n43 31 1984\n83 20 2013\n52 78 2022\n90 73 2047\n60 36 2...", "output": "2\n1 2"}, {"input": "100\n72 38 95\n9 49 106\n78 74 92\n88 76 164\n79 92 71\n45 93 142\n26 49 466\n49 28 265\n4 83 359\n21 67 181\n86 54 314\n10 73 270\n5 79 439\n42 45 345\n53 86 562\n95 36 399\n68 87 395\n2 15 286\n48 9 317\n70 71 450\n100 67 604\n81 80 325\n53 17 402\n17 38 771\n10 51 393\n64 100 361\n27 35 428\n58 40 526\n5 94 621\n29 7 551\n78 40 568\n31 24 594\n79 91 688\n87 4 547\n91 42 547\n58 59 570\n97 24 617\n96 36 628\n64 17 676\n24 22 636\n9 6 612\n78 5 634\n39 63 636\n65 26 698\n22 6 723\n18 23 728\n83 79 663\n18...", "output": "5\n1 2 3 4 7"}, {"input": "100\n5 95 71\n74 4 8\n74 88 152\n27 14 82\n26 93 251\n91 8 214\n97 13 142\n49 89 173\n75 9 200\n94 44 398\n8 96 470\n89 48 437\n16 87 272\n75 40 143\n35 93 148\n43 5 557\n79 14 270\n19 81 289\n56 35 371\n20 9 160\n38 49 239\n5 19 245\n81 29 473\n57 29 957\n33 19 292\n74 36 298\n47 12 493\n79 51 853\n68 88 305\n7 8 403\n69 19 428\n30 55 407\n55 23 470\n79 84 486\n98 1 606\n71 79 376\n96 22 569\n74 30 564\n77 32 574\n8 91 428\n70 82 710\n18 80 631\n28 84 863\n17 59 696\n80 32 600\n71 39 482\n91 82 558\n9 51 ...", "output": "8\n1 2 3 5 6 10 11 24"}, {"input": "100\n69 43 94\n46 52 117\n43 16 143\n73 30 155\n19 25 201\n49 69 326\n22 47 281\n61 57 328\n22 11 91\n71 82 241\n64 65 99\n70 60 142\n2 18 178\n81 12 273\n47 89 276\n68 54 285\n35 76 232\n65 70 840\n94 23 907\n62 32 665\n89 32 279\n59 29 1133\n39 91 422\n13 84 331\n50 76 351\n67 19 481\n36 15 443\n50 64 517\n4 54 493\n42 91 568\n71 8 442\n35 37 852\n54 45 482\n17 76 491\n49 38 585\n86 51 554\n32 6 494\n19 21 619\n95 96 699\n24 20 485\n4 33 538\n27 29 549\n40 13 595\n23 76 576\n90 31 509\n5 39 697\n43 47 53...", "output": "8\n1 2 3 4 6 18 19 22"}, {"input": "100\n40 53 47\n84 63 95\n67 26 169\n77 66 226\n92 56 198\n26 66 346\n79 69 357\n30 20 469\n2 31 271\n95 55 263\n96 15 572\n19 2 691\n43 6 619\n87 78 656\n83 51 268\n33 51 143\n55 82 900\n98 55 182\n15 75 241\n42 86 522\n2 94 286\n27 15 370\n41 53 394\n100 44 1051\n98 55 450\n31 71 433\n16 53 1384\n38 35 509\n93 1 496\n30 69 1385\n99 18 551\n77 18 537\n33 13 1137\n22 21 490\n58 58 1010\n93 11 588\n16 15 492\n17 100 494\n100 38 172\n24 89 647\n91 30 5\n14 61 892\n58 30 33\n90 75 231\n56 56 1370\n70 92 1035\n...", "output": "13\n1 2 3 4 6 7 8 11 12 13 14 17 27"}, {"input": "1000\n170 370 768\n225 906 507\n633 310 223\n620 352 807\n301 270 776\n725 515 613\n641 149 2779\n530 278 2760\n224 828 421\n795 801 4406\n807 141 4580\n877 671 3645\n16 636 4199\n211 378 6754\n113 593 934\n137 202 1582\n534 541 2068\n4 380 2244\n973 741 2529\n10 240 9525\n393 993 3878\n15 148 3541\n480 277 6316\n208 437 2730\n231 454 2747\n892 69 3577\n399 807 6008\n758 387 11395\n809 396 2606\n808 790 9034\n40 639 3024\n457 449 2898\n126 482 6390\n341 21 5261\n778 238 4062\n714 345 4360\n653 316 4598\n68...", "output": "8\n1 2 4 7 8 10 14 20"}, {"input": "1000\n688 217 54\n74 103 1492\n465 296 1382\n630 340 2096\n665 77 2785\n247 422 3002\n333 495 687\n783 334 3653\n101 234 4119\n604 529 4691\n890 359 5654\n431 941 3678\n79 532 2911\n131 50 7388\n889 953 3606\n765 698 5658\n26 579 3114\n939 82 752\n421 540 7169\n749 972 3865\n876 762 8305\n377 258 1506\n315 690 4865\n594 599 1255\n729 350 1658\n310 782 6434\n724 648 12711\n949 509 7283\n398 167 9398\n46 494 16688\n552 750 9585\n628 416 7985\n128 76 13615\n671 632 2098\n752 193 14173\n790 982 13680\n597 156 ...", "output": "12\n1 2 3 4 5 6 8 9 10 11 14 30"}, {"input": "4000\n958 848 513\n757 949 1759\n978 13 1679\n67 651 1714\n319 740 2191\n562 216 2974\n361 475 3117\n186 932 3643\n282 760 4268\n884 384 5127\n345 615 5574\n211 189 6338\n888 367 6632\n541 28 6948\n289 281 7049\n885 694 7197\n939 407 7612\n748 533 8093\n736 234 8694\n202 40 8998\n330 547 9227\n217 738 9689\n496 50 10131\n601 355 10547\n444 465 10918\n92 52 11175\n560 288 11410\n274 910 11618\n675 225 12439\n613 474 12751\n960 781 13094\n661 82 14014\n958 645 14144\n332 813 14314\n223 881 15629\n731 774 159...", "output": "2\n1 2"}, {"input": "4\n2 10 1\n1 2 2\n2 1 1\n5 5 1", "output": "3\n1 2 4"}, {"input": "3964\n999970 999994 10\n999902 999926 2\n999915 999940 6\n999991 999978 6\n999902 999901 9\n999950 999982 4\n999924 999940 1\n999973 999916 1\n999927 999977 2\n999955 999945 5\n999972 999946 10\n999933 999905 10\n999940 999931 2\n999989 999989 9\n999919 999974 2\n999923 999996 10\n999929 999947 3\n999910 999978 8\n999967 999901 1\n999952 999970 3\n999909 999938 4\n999969 999954 10\n999961 999983 10\n999921 999928 7\n999916 999931 8\n999928 999939 10\n999911 999937 3\n999929 999912 10\n999988 999912 7\n9999...", "output": "1\n1"}, {"input": "3959\n999932 999940 3\n999928 999924 7\n999960 999981 6\n999939 999963 2\n999924 999921 1\n999987 999978 6\n999974 999942 3\n999931 999997 5\n999980 999965 5\n999920 999971 9\n999986 999958 9\n999953 1000000 3\n999951 999931 9\n999952 999911 9\n999902 999939 4\n999990 999958 5\n999967 999921 10\n999972 999971 3\n999914 999908 6\n999984 999981 6\n999955 999983 2\n999999 999903 3\n999938 999937 10\n999999 999940 6\n999937 999915 8\n999924 999988 2\n999955 999942 2\n999922 999989 6\n999903 999908 10\n999975 9...", "output": "1\n1"}, {"input": "4000\n999918 999947 3\n999979 999972 6\n999930 999997 3\n999905 999933 1\n999971 999963 2\n999957 999969 1\n999926 999928 3\n999957 999906 10\n999991 999974 5\n999970 999953 2\n999970 999932 4\n999931 999920 1\n999984 999930 4\n999952 999915 10\n999933 999904 1\n999992 999996 8\n999988 999964 5\n999991 1000000 3\n999984 999914 8\n999919 999980 2\n999904 999933 4\n999925 999907 4\n999929 999971 7\n999915 999930 9\n999979 999972 1\n999981 999977 3\n999935 999995 2\n999924 999928 6\n999970 999929 8\n999938 99...", "output": "1\n1"}, {"input": "3999\n999971 999963 4\n999927 999956 6\n999952 999929 8\n999997 999917 2\n999989 999978 7\n999972 999970 7\n999970 999970 9\n999941 999915 10\n999953 999930 2\n999934 999936 2\n999992 999977 5\n999961 999937 10\n999992 999978 9\n999917 999957 4\n999941 999998 8\n999974 999962 1\n999943 999967 6\n999938 999993 10\n999935 999993 6\n1000000 999974 8\n999954 999920 3\n999923 999949 1\n999958 999914 1\n999945 999977 8\n999974 999946 3\n999929 999921 10\n999953 999972 2\n999967 999922 9\n999977 999919 7\n999980 ...", "output": "1\n1"}, {"input": "3998\n999926 999923 10\n999946 999902 8\n999992 999941 5\n999958 999978 9\n999970 999949 7\n999913 999955 10\n999917 999929 7\n999958 999909 3\n999932 999922 5\n999964 999928 7\n999993 999911 7\n999953 999933 10\n999951 999903 10\n999999 999965 10\n999952 999944 7\n999934 999951 7\n999929 999909 8\n999918 999908 8\n999948 999947 4\n999987 999915 7\n999915 999903 8\n999957 999914 9\n999959 999994 8\n999959 999925 2\n999995 999934 4\n999946 999969 10\n999998 999960 9\n999947 999979 6\n999914 999955 2\n999957...", "output": "1\n1"}, {"input": "1\n1 1 1", "output": "1\n1"}, {"input": "2\n5 1 1\n1 1 5", "output": "2\n1 2"}, {"input": "2\n5 1 1\n1 1 4", "output": "1\n1"}, {"input": "2\n5 1 1\n1 1 6", "output": "2\n1 2"}, {"input": "3\n5 1 1\n1 1 4\n1 1 4", "output": "1\n1"}, {"input": "3\n5 1 1\n1 1 4\n1 1 5", "output": "2\n1 3"}, {"input": "3\n5 1 1\n1 1 5\n1 1 3", "output": "2\n1 2"}, {"input": "3\n5 1 1\n10 1 5\n1000 1000 14", "output": "3\n1 2 3"}, {"input": "10\n9 8 8\n2 9 33\n10 7 42\n7 2 18\n3 5 82\n9 9 25\n3 2 86\n3 5 49\n5 3 72\n4 4 71", "output": "10\n1 2 3 4 5 6 7 8 9 10"}, {"input": "10\n9 8 8\n2 9 8\n10 7 16\n7 2 9\n3 5 23\n9 9 25\n3 2 35\n3 5 36\n5 3 40\n4 4 42", "output": "1\n1"}, {"input": "100\n91 40 872\n17 55 90\n88 59 144\n51 34 202\n92 66 235\n47 19 300\n85 55 20\n3 54 152\n82 87 22\n61 7 511\n2 45 517\n48 67 561\n55 30 627\n56 70 136\n71 33 669\n1 42 757\n12 34 680\n78 13 412\n80 74 843\n31 26 6\n42 10 107\n33 23 231\n85 16 18\n99 34 82\n25 97 695\n25 32 445\n37 64 990\n18 51 612\n29 94 984\n53 94 654\n84 92 685\n88 51 966\n4 45 348\n55 55 414\n24 40 481\n3 89 871\n53 13 895\n53 28 324\n1 54 919\n95 62 393\n36 93 192\n84 10 87\n65 43 152\n5 57 226\n40 95 314\n52 64 964\n49 56 225\n77 4 ...", "output": "1\n1"}, {"input": "1000\n609 433 2109\n422 207 357\n209 883 814\n618 792 408\n129 428 862\n700 564 537\n893 680 3477\n647 883 4156\n231 107 4604\n314 713 4423\n844 458 2377\n347 427 5038\n789 74 520\n711 944 6812\n968 799 2762\n416 440 7469\n864 478 8992\n190 289 3107\n564 13 9632\n874 816 9427\n357 762 4889\n87 917 3932\n530 986 7815\n754 387 1450\n935 91 5830\n772 344 8595\n475 44 9856\n206 520 1168\n898 796 1985\n717 686 392\n252 785 3486\n686 822 1476\n604 283 1186\n188 445 8127\n451 545 3609\n977 75 9837\n366 570 9186\n...", "output": "1\n1"}, {"input": "4000\n627 510 2796\n718 1339 626\n1309 862 1964\n358 928 2825\n283 1827 3752\n234 1601 1022\n1072 81 419\n1164 342 4025\n157 384 7599\n1461 1243 3759\n1095 294 4925\n236 1659 9517\n1175 865 11175\n390 976 1984\n449 346 4\n912 906 11613\n24 1351 9226\n380 1598 2463\n1840 657 17113\n1289 1346 17867\n1141 1686 4850\n1607 1783 9342\n347 399 9668\n441 374 16446\n901 837 2280\n540 431 15120\n1466 832 18542\n1287 1214 15159\n293 464 7256\n1092 1295 6865\n573 881 11109\n1535 308 5059\n502 809 11345\n1117 1621 6876...", "output": "1\n1"}, {"input": "4000\n11243 11888 105732\n19023 18947 11242\n881 4243 6906\n4422 15359 30605\n14562 17921 49788\n18025 3279 47454\n5742 8684 70986\n10 6377 71365\n14503 9930 60300\n7197 6662 53215\n13489 11203 102635\n19663 981 109601\n11932 4844 15554\n9814 13523 119660\n2228 14355 133182\n1162 14520 147536\n10359 7772 162055\n13491 18772 93494\n12488 2285 39285\n2435 250 48775\n12002 10534 108225\n10373 3164 125052\n10576 5780 3971\n6551 4409 172632\n14619 165 62320\n10709 18770 183841\n16291 14207 72974\n1782 15267 123...", "output": "1\n1"}, {"input": "4000\n82808 45342 175002\n38181 23560 82807\n44935 57878 106366\n21218 27616 164243\n54479 44660 191858\n12132 56738 236517\n42416 64122 293254\n6652 8901 357375\n83459 81383 366275\n2757 63305 416691\n40809 82911 510961\n95161 42312 552242\n48199 31019 636182\n2848 69073 412721\n59217 38116 191352\n56810 67158 196198\n5445 67082 279813\n15677 741 347235\n10138 6522 416964\n84177 50741 531876\n48248 86240 583397\n28603 87394 572711\n89226 1769 276314\n83815 61723 684930\n4530 86557 489549\n41514 3801 27166...", "output": "1\n1"}], "language": "cpp"}, "prompt": "A. Gennady the Dentist\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nGennady is one of the best child dentists in Berland. Today n children got an appointment with him, they lined up in front of his office.\nAll children love to cry loudly at the reception at the dentist. We enumerate the children with integers from 1 to n in the order they go in the line. Every child is associated with the value of his cofidence pi. The children take turns one after another to come into the office; each time the child that is the first in the line goes to the doctor.\nWhile Gennady treats the teeth of the i-th child, the child is crying with the volume of vi. At that the confidence of the first child in the line is reduced by the amount of vi, the second one - by value vi - 1, and so on. The children in the queue after the vi-th child almost do not hear the crying, so their confidence remains unchanged.\nIf at any point in time the confidence of the j-th child is less than zero, he begins to cry with the volume of dj and leaves the line, running towards the exit, without going to the doctor's office. At this the confidence of all the children after the j-th one in the line is reduced by the amount of dj.\nAll these events occur immediately one after the other in some order. Some cries may lead to other cries, causing a chain reaction. Once in the hallway it is quiet, the child, who is first in the line, goes into the doctor's office.\nHelp Gennady the Dentist to determine the numbers of kids, whose teeth he will cure. Print their numbers in the chronological order.\nInput\nThe first line of the input contains a positive integer n (1 <= n <= 4000) - the number of kids in the line.\nNext n lines contain three integers each vi, di, pi (1 <= vi, di, pi <= 106) - the volume of the cry in the doctor's office, the volume of the cry in the hall and the confidence of the i-th child.\nOutput\nIn the first line print number k - the number of children whose teeth Gennady will cure.\nIn the second line print k integers - the numbers of the children who will make it to the end of the line in the increasing order.\n", "generation": "int main() {\n  int n;\n  cin >> n;\n\n  vector<int> v(n);\n  vector<int> d(n);\n  vector<int> p(n);\n\n  for (int i = 0; i < n; i++) {\n    cin >> v[i];\n    cin >> d[i];\n    cin >> p[i];\n  }\n\n  vector<int> ans;\n  int k = 0;\n  for (int i = 0; i < n; i++) {\n    p[i] -= v[i];\n    if (p[i] < 0) {\n      k++;\n      for (int j = i; j < n; j++) {\n        p[j] -= d[i];\n      }\n    }\n  }\n\n  cout << k << endl;\n  for (int i = 0; i < k; i++) {\n    cout << p[i] << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> n;\n      |   ^~~\ntest.cpp:5:3: error: \u2018vector\u2019 was not declared in this scope\n    5 |   vector<int> v(n);\n      |   ^~~~~~\ntest.cpp:5:10: error: expected primary-expression before \u2018int\u2019\n    5 |   vector<int> v(n);\n      |          ^~~\ntest.cpp:6:10: error: expected primary-expression before \u2018int\u2019\n    6 |   vector<int> d(n);\n      |          ^~~\ntest.cpp:7:10: error: expected primary-expression before \u2018int\u2019\n    7 |   vector<int> p(n);\n      |          ^~~\ntest.cpp:10:12: error: \u2018v\u2019 was not declared in this scope\n   10 |     cin >> v[i];\n      |            ^\ntest.cpp:11:12: error: \u2018d\u2019 was not declared in this scope\n   11 |     cin >> d[i];\n      |            ^\ntest.cpp:12:12: error: \u2018p\u2019 was not declared in this scope\n   12 |     cin >> p[i];\n      |            ^\ntest.cpp:15:10: error: expected primary-expression before \u2018int\u2019\n   15 |   vector<int> ans;\n      |          ^~~\ntest.cpp:18:5: error: \u2018p\u2019 was not declared in this scope\n   18 |     p[i] -= v[i];\n      |     ^\ntest.cpp:18:13: error: \u2018v\u2019 was not declared in this scope\n   18 |     p[i] -= v[i];\n      |             ^\ntest.cpp:22:17: error: \u2018d\u2019 was not declared in this scope\n   22 |         p[j] -= d[i];\n      |                 ^\ntest.cpp:27:3: error: \u2018cout\u2019 was not declared in this scope\n   27 |   cout << k << endl;\n      |   ^~~~\ntest.cpp:27:16: error: \u2018endl\u2019 was not declared in this scope\n   27 |   cout << k << endl;\n      |                ^~~~\ntest.cpp:29:13: error: \u2018p\u2019 was not declared in this scope\n   29 |     cout << p[i] << endl;\n      |             ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/24", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring solve(int x, int y) {\n  int a = x;\n  int b = y;\n  string ans = \"\";\n\n  while (a > 0 || b > 0) {\n    int min = min(a, b);\n    a -= min;\n    b -= min;\n    ans += to_string(min) + string(min, 'A') + string(min, 'B');\n  }\n\n  if (ans.length() == 0) {\n    return \"Impossible\";\n  }\n\n  return ans;\n}\n\nint main() {\n  int x, y;\n  cin >> x;\n  cin >> y;\n\n  string answer = solve(x, y);\n\n  cout << answer;\n\n  return 0;\n}\n", "testcases": [{"input": "1 4", "output": "3B"}, {"input": "2 2", "output": "Impossible"}, {"input": "3 2", "output": "1A1B"}, {"input": "2 1", "output": "1A"}, {"input": "5 3", "output": "1A1B1A"}, {"input": "5 2", "output": "2A1B"}, {"input": "8 5", "output": "1A1B1A1B"}, {"input": "97 101", "output": "1B24A3B"}, {"input": "1 3", "output": "2B"}, {"input": "1000000000000000000 999999999999999999", "output": "1A999999999999999998B"}, {"input": "55 89", "output": "1B1A1B1A1B1A1B1A1B"}, {"input": "610 987", "output": "1B1A1B1A1B1A1B1A1B1A1B1A1B1A"}, {"input": "4181 6765", "output": "1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A"}, {"input": "46368 75025", "output": "1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B"}, {"input": "832040 514229", "output": "1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B"}, {"input": "5702887 9227465", "output": "1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B"}, {"input": "701408733 433494437", "output": "1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B"}, {"input": "956722026041 591286729879", "output": "1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A"}, {"input": "498454011879264 806515533049393", "output": "1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B"}, {"input": "420196140727489673 679891637638612258", "output": "1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B"}, {"input": "1000000000000000000 1000000000000000000", "output": "Impossible"}, {"input": "1000000000000000000 1", "output": "999999999999999999A"}, {"input": "2 1000000000000000000", "output": "Impossible"}, {"input": "999999999999999999 999999999999999998", "output": "1A999999999999999997B"}, {"input": "616274828435574301 10268395600356301", "output": "60A60B60A60B60A60B60A60B60A60B"}, {"input": "10808314049304201 270039182096201", "output": "40A40B40A40B40A40B40A40B40A40B"}, {"input": "1000100020001 100010001", "output": "10000A10000B10000A"}, {"input": "152139002499 367296043199", "output": "2B2A2B2A2B2A2B2A2B2A2B2A2B2A2B2A2B2A2B2A2B2A2B2A2B2A2B2A2B2A"}, {"input": "25220791 839761", "output": "30A30B30A30B30A"}, {"input": "27961 931", "output": "30A30B30A"}, {"input": "127601 6382601", "output": "50B50A50B50A"}, {"input": "1 1000000000000000000", "output": "999999999999999999B"}, {"input": "242 100", "output": "Impossible"}, {"input": "507769900974602687 547261784951014891", "output": "Impossible"}, {"input": "585026192452577797 570146946822492493", "output": "1A38B3A7B23A2B1A1B1A8B2A1B5A117B2A1B1A2B12A3B10A5B3A2B3A11B2A1B7A"}, {"input": "568679881256193737 513570106829158157", "output": "1A9B3A7B2A3B1A1B1A2B3A2B1A3B2A82B1A7B2A14B2A1B1A4B5A3B2A1B9A1B2A1B4A1B3A1B3A2B"}, {"input": "567036128564717939 510505130335113937", "output": "1A9B32A1B2A1B368A1B1A1B2A4B1A1B23A14B21A5B1A1B2A4B1A1B3A1B1A1B3A1B5A1B1A9B"}, {"input": "519421744863260201 572972909476222789", "output": "1B9A1B2A3B21A1B1A21B2A1B2A12B1A4B1A1B5A160B4A1B1A138B1A1B9A4B3A2B6A"}, {"input": "529495319593227313 631186172547690847", "output": "1B5A4B1A4B1A76B3A2B11A3B7A5B1A1B2A2B7A2B2A8B5A3B143A1B3A8B1A5B1A"}, {"input": "540431588408227541 540431588408227541", "output": "Impossible"}, {"input": "410218934960967047 378596216455001869", "output": "Impossible"}, {"input": "395130552422107969 382562323268297483", "output": "Impossible"}, {"input": "416445288135075809 416445288135075809", "output": "Impossible"}, {"input": "402725448165665593 481342602240996343", "output": "1B5A8B6A2B2A1B20A3B9A5B2A1B4A5B2A4B1A268B9A4B1A1B4A3B2A2B1A2B1A1B3A"}, {"input": "412177780967225699 432177937877609093", "output": "1B20A1B1A1B1A3B1A58B1A4B1A13B206A2B2A5B5A22B3A45B1A7B5A1B1A6B1A1B"}, {"input": "423506197818989927 442863139846534733", "output": "1B21A1B7A4B76A1B3A2B82A1B18A4B1A13B1A3B6A1B1A2B1A22B1A3B2A1B1A2B27A"}, {"input": "453151988636162147 474019690903735841", "output": "1B21A1B2A1B1A16B1A1B1A4B300A1B4A1B11A47B1A6B8A1B1A1B1A2B2A5B3A2B1A7B1A5B1A"}, {"input": "408962762283480959 444443583457646111", "output": "1B11A1B1A9B253A1B5A22B6A1B11A4B3A2B1A1B4A1B13A2B4A1B50A1B6A1B5A3B"}, {"input": "976540997167958951 969335176443917693", "output": "1A134B1A1B11A3B26A2B3A1B1A2B22A1B3A3B1A1B66A63B36A2B1A13B5A3B"}, {"input": "957591654759084713 981022104435698593", "output": "1B40A1B6A1B1A1B68A1B18A2B3A1B2A2B2A1B1A4B1A3B2A1B12A3B604A5B1A1B39A1B1A"}, {"input": "962890278562476113 969978235623119279", "output": "1B135A1B5A1B1A1B1A2B1A1B3A4B2A1B2A2B1A5B3A1B2A2B2A1B2A1B3A2B67A1B1A6B3A1B14A1B3A19B"}, {"input": "963716517445592213 976351630941239591", "output": "1B76A3B1A1B1A52B1A6B2A7B35A1B1A2B17A5B5A4B5A9B3A2B13A1B2A3B1A7B"}, {"input": "964542760623675601 965233603018687501", "output": "1B1396A5B2A4B2A2B1A18B4A1B1A1B2A3B3A1B10A2B3A1B3A1B5A1B1A1B2A10B3A9B1A1B3A2B"}, {"input": "977367244641009653 977367244641009653", "output": "Impossible"}], "language": "cpp"}, "prompt": "C. Alice, Bob, Oranges and Apples\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nAlice and Bob decided to eat some fruit. In the kitchen they found a large bag of oranges and apples. Alice immediately took an orange for herself, Bob took an apple. To make the process of sharing the remaining fruit more fun, the friends decided to play a game. They put multiple cards and on each one they wrote a letter, either 'A', or the letter 'B'. Then they began to remove the cards one by one from left to right, every time they removed a card with the letter 'A', Alice gave Bob all the fruits she had at that moment and took out of the bag as many apples and as many oranges as she had before. Thus the number of oranges and apples Alice had, did not change. If the card had written letter 'B', then Bob did the same, that is, he gave Alice all the fruit that he had, and took from the bag the same set of fruit. After the last card way removed, all the fruit in the bag were over.\nYou know how many oranges and apples was in the bag at first. Your task is to find any sequence of cards that Alice and Bob could have played with.\nInput\nThe first line of the input contains two integers, x, y (1 <= x, y <= 1018, xy > 1) - the number of oranges and apples that were initially in the bag.\nOutput\nPrint any sequence of cards that would meet the problem conditions as a compressed string of characters 'A' and 'B. That means that you need to replace the segments of identical consecutive characters by the number of repetitions of the characters and the actual character. For example, string AAABAABBB should be replaced by string 3A1B2A3B, but cannot be replaced by 2A1A1B2A3B or by 3AB2A3B. See the samples for clarifications of the output format. The string that you print should consist of at most 106 characters. It is guaranteed that if the answer exists, its compressed representation exists, consisting of at most 106 characters. If there are several possible answers, you are allowed to print any of them.\nIf the sequence of cards that meet the problem statement does not not exist, print a single word Impossible.\n", "generation": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring solve(int x, int y) {\n  int a = x;\n  int b = y;\n  string ans = \"\";\n\n  while (a > 0 || b > 0) {\n    int min = min(a, b);\n    a -= min;\n    b -= min;\n    ans += to_string(min) + string(min, 'A') + string(min, 'B');\n  }\n\n  if (ans.length() == 0) {\n    return \"Impossible\";\n  }\n\n  return ans;\n}\n\nint main() {\n  int x, y;\n  cin >> x;\n  cin >> y;\n\n  string answer = solve(x, y);\n\n  cout << answer;\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018std::string solve(int, int)\u2019:\ntest.cpp:12:23: error: \u2018min\u2019 cannot be used as a function\n   12 |     int min = min(a, b);\n      |                       ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/27", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool is_half_occurrence(string& s, int l, int r) {\n  string substring = s.substr(l, r - l + 1);\n  return substring.find(s.substr(l, r - l + 1)) != string::npos;\n}\n\nint main() {\n  string s;\n  cin >> s;\n  int x, y, d;\n  cin >> x;\n  cin >> y;\n  cin >> d;\n\n  int ans = 0;\n  for (int i = x; i <= y; i++) {\n    string num = to_string(i);\n    for (int j = 0; j < num.length(); j++) {\n      if (is_half_occurrence(s, num[j] - '0', num.length() - 1)) {\n        ans++;\n      }\n    }\n  }\n\n  cout << ans % (109 + 7) << endl;\n  return 0;\n}\n", "testcases": [{"input": "02\n10\n19", "output": "2"}, {"input": "023456789\n10\n19", "output": "9"}, {"input": "31415926535\n10\n29", "output": "20"}, {"input": "8951675223927155592759982402444004111663484015769374476127117887584934467757214664482684650548798755\n114243\n233232", "output": "35799"}, {"input": "0888314938095531682582206632310963350215110397849980366459786032304626895618206930056241738048142254\n11682313\n95074557", "output": "3605619"}, {"input": "6344994746343577152296975162866134138490949302315888951450793923944393426916258505443553304055577515\n1449914668\n5563101770", "output": "22703688"}, {"input": "1940213264412817399209508794491502043157074171324977313692806856137966792778593038822210097125610362\n24698355727413838051\n64189292611345506857", "output": "822135518"}, {"input": "7\n52611005234050693925546100318224995538364232339412\n90202890616987250792614275373005794609442566922641", "output": "0"}, {"input": "5131776510092142409594036\n25889468653943036836990674490205242366577948965428\n79088432017432061592704585532190466237695181532220", "output": "213387474"}, {"input": "40267284412059296079353608409171866493015309095228\n20951278774886841388725744243376638993067182772914\n75171442909604599291549993852273710273158530918138", "output": "125329904"}, {"input": "123456789123\n1234567891230000000000\n1234567891231000000006", "output": "0"}, {"input": "0\n10\n10", "output": "1"}, {"input": "2\n10\n10", "output": "0"}, {"input": "1\n1000\n9999", "output": "0"}, {"input": "1\n10\n19", "output": "10"}, {"input": "0\n90\n99", "output": "1"}, {"input": "7\n10000000000000000000000000000000000000000000000000\n99999999999999999999999999999999999999999999999999", "output": "0"}, {"input": "08315\n10000000000000000000\n99999999999999999999", "output": "0"}, {"input": "74075327782231295517063714536226859824342073836085\n100000000000000000000000000000\n999999999999999999999999999999", "output": "691795407"}, {"input": "00000000000000000000000000000000000000000000000000\n1000000000000000000000000000000\n9999999999999999999999999999999", "output": "86500007"}, {"input": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n1000000000000000000000000000000000000000000000000\n9999999999999999999999999999999999999999999999999", "output": "966599937"}, {"input": "36563456633466445533544464563654564435444334463636445666464563654444354533563563363465534643544646645566453434334534565363656446634444556345556664535666465643555346565454564655553566554546463353543363543546636333455653654465654564543434564443433363344365364345645553463535363345546445554644553365656433354566665334566535553\n100000000000000000000000000000000\n999999999999999999999999999999999", "output": "147301645"}], "language": "cpp"}, "prompt": "F. Digits of Number Pi\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nVasily has recently learned about the amazing properties of number pi. In one of the articles it has been hypothesized that, whatever the sequence of numbers we have, in some position, this sequence is found among the digits of number pi. Thus, if you take, for example, the epic novel \"War and Peace\" of famous Russian author Leo Tolstoy, and encode it with numbers, then we will find the novel among the characters of number pi.\nVasily was absolutely delighted with this, because it means that all the books, songs and programs have already been written and encoded in the digits of pi. Vasily is, of course, a bit wary that this is only a hypothesis and it hasn't been proved, so he decided to check it out.\nTo do this, Vasily downloaded from the Internet the archive with the sequence of digits of number pi, starting with a certain position, and began to check the different strings of digits on the presence in the downloaded archive. Vasily quickly found short strings of digits, but each time he took a longer string, it turned out that it is not in the archive. Vasily came up with a definition that a string of length d is a half-occurrence if it contains a substring of length of at least , which occurs in the archive.\nTo complete the investigation, Vasily took 2 large numbers x, y (x <= y) with the same number of digits and now he wants to find the number of numbers in the interval from x to y, which are half-occurrences in the archive. Help Vasily calculate this value modulo 109 + 7.\nInput\nThe first line contains string s consisting of decimal digits (1 <= |s| <= 1000) that Vasily will use to search substrings in. According to hypothesis, this sequence of digis indeed occurs in the decimal representation of pi, although we can't guarantee that.\nThe second and third lines contain two positive integers x, y of the same length d (x <= y, 2 <= d <= 50). Numbers x, y do not contain leading zeroes.\nOutput\nPrint how many numbers in the segment from x to y that are half-occurrences in s modulo 109 + 7.\n", "generation": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool is_half_occurrence(string& s, int l, int r) {\n  string substring = s.substr(l, r - l + 1);\n  return substring.find(s.substr(l, r - l + 1)) != string::npos;\n}\n\nint main() {\n  string s;\n  cin >> s;\n  int x, y, d;\n  cin >> x;\n  cin >> y;\n  cin >> d;\n\n  int ans = 0;\n  for (int i = x; i <= y; i++) {\n    string num = to_string(i);\n    for (int j = 0; j < num.length(); j++) {\n      if (is_half_occurrence(s, num[j] - '0', num.length() - 1)) {\n        ans++;\n      }\n    }\n  }\n\n  cout << ans % (109 + 7) << endl;\n  return 0;\n}\n", "result": "failed: runtime error: None", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/28", "completion_id": 0, "test_suite": {"code": "int solve() {\n  int n;\n  cin >> n;\n  vector<int> a(n);\n  cin >> a[0];\n  for (int i = 1; i < n; i++) {\n    cin >> a[i];\n  }\n\n  int ans = 0;\n  int prev = -1;\n  for (int i = 0; i < n; i++) {\n    if (a[i] == 0 && prev == 0) {\n      prev = i;\n    } else if (a[i] == 0 && prev != -1) {\n      ans++;\n      prev = -1;\n    }\n  }\n\n  return ans;\n}\n", "testcases": [{"input": "5\n0 1 0 1 1", "output": "4"}, {"input": "7\n1 0 1 0 0 1 0", "output": "4"}, {"input": "1\n0", "output": "0"}, {"input": "1\n1", "output": "1"}, {"input": "2\n0 0", "output": "0"}, {"input": "2\n0 1", "output": "1"}, {"input": "2\n1 0", "output": "1"}, {"input": "2\n1 1", "output": "2"}, {"input": "10\n0 0 0 0 0 0 0 0 0 0", "output": "0"}, {"input": "9\n1 1 1 1 1 1 1 1 1", "output": "9"}, {"input": "11\n0 0 0 0 0 0 0 0 0 0 1", "output": "1"}, {"input": "12\n1 0 0 0 0 0 0 0 0 0 0 0", "output": "1"}, {"input": "20\n1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 0 0 1 0 0", "output": "16"}, {"input": "41\n1 1 0 1 0 1 0 0 1 0 1 1 1 0 0 0 1 1 1 0 1 0 1 1 0 1 0 1 0 0 0 0 0 0 1 0 0 1 0 1 1", "output": "28"}, {"input": "63\n1 1 0 1 1 0 0 0 1 1 0 0 1 1 1 1 0 1 1 0 1 0 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 0 0 1 0 1 1 0 0 1 1 0 0 1 1 1 1 0 0 1 1 0 0 1 0 1 0", "output": "39"}, {"input": "80\n0 1 1 1 0 1 1 1 1 1 0 0 1 0 1 1 0 1 1 1 0 1 1 1 1 0 1 0 1 0 0 0 1 1 0 1 1 0 0 0 0 1 1 1 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 0 1 1 1 1 1 0 0 0 1 1 0 0 1 1", "output": "52"}, {"input": "99\n1 1 0 0 0 1 0 0 1 1 1 1 0 0 0 1 0 1 1 0 1 1 1 1 0 0 0 0 1 1 1 1 0 1 0 1 0 1 1 1 0 0 1 1 1 0 0 0 1 1 1 0 1 1 1 0 1 0 0 1 1 0 1 0 0 1 1 1 1 0 0 1 1 0 0 1 0 1 1 1 0 1 1 0 1 0 0 1 0 1 0 1 0 1 1 0 1 0 1", "output": "72"}, {"input": "100\n0 1 1 0 1 1 0 0 1 1 0 1 1 1 1 1 0 0 1 1 1 0 0 0 0 1 1 0 0 1 0 0 1 0 0 0 0 1 1 1 1 1 1 0 0 1 1 0 0 0 0 1 0 1 1 1 0 1 1 0 1 0 0 0 0 0 1 0 1 1 0 0 1 1 0 1 1 0 0 1 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 0 1 1 1 0", "output": "65"}, {"input": "11\n0 1 1 0 0 0 0 0 0 0 0", "output": "2"}, {"input": "11\n0 1 0 1 0 0 1 1 0 1 1", "output": "8"}, {"input": "11\n1 0 1 0 1 1 0 1 1 1 0", "output": "10"}, {"input": "11\n1 0 0 0 0 0 1 0 1 1 1", "output": "6"}, {"input": "22\n0 1 1 0 0 0 0 0 1 0 0 0 0 1 1 0 0 1 0 0 1 0", "output": "7"}, {"input": "22\n0 1 0 1 0 1 1 1 1 0 0 1 1 1 0 1 1 1 0 0 0 1", "output": "16"}, {"input": "22\n1 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 1 1 0 1 1 0", "output": "11"}, {"input": "22\n1 0 1 0 0 0 1 0 0 1 1 0 1 0 1 1 0 0 0 1 0 1", "output": "14"}, {"input": "33\n0 1 1 0 1 1 0 1 0 1 1 0 1 1 1 1 0 1 1 1 0 0 1 1 0 0 1 1 0 1 1 0 0", "output": "26"}, {"input": "33\n0 1 0 1 0 1 1 0 0 0 1 1 1 0 1 0 1 1 0 1 0 1 0 0 1 1 1 0 1 1 1 0 1", "output": "27"}, {"input": "33\n1 0 1 0 1 0 0 0 1 0 1 1 1 0 0 0 0 1 1 0 1 0 1 1 0 1 0 1 1 1 1 1 0", "output": "25"}, {"input": "33\n1 0 1 0 1 1 1 1 1 0 1 0 1 1 0 0 1 0 1 0 0 0 1 0 1 0 1 0 0 0 0 1 1", "output": "24"}, {"input": "44\n0 1 1 0 1 0 0 0 0 1 1 0 0 0 0 0 1 1 1 0 0 0 0 0 1 0 0 1 1 0 0 0 0 1 1 1 0 0 1 0 1 1 0 0", "output": "19"}, {"input": "44\n0 1 1 1 1 0 1 0 0 1 0 1 0 0 1 1 0 1 1 0 0 1 0 1 0 1 1 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 1", "output": "32"}, {"input": "44\n1 0 1 0 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 1 0 0 1 0 0 1 0", "output": "23"}, {"input": "44\n1 0 1 0 1 1 1 0 0 0 0 0 0 1 0 0 0 1 1 1 0 0 0 1 0 1 0 1 1 0 1 1 0 1 0 1 1 0 1 0 1 1 1 1", "output": "32"}, {"input": "55\n0 1 1 0 1 0 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 0 1 1 1 0 0 1 1 0 0 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 0 1 1 0 0 1 0", "output": "23"}, {"input": "55\n0 1 1 0 1 0 1 1 1 1 0 1 1 0 0 1 1 1 0 0 0 1 1 0 0 1 0 1 0 1 0 0 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 1 1 0 0 0 1", "output": "39"}, {"input": "55\n1 0 1 0 0 1 0 0 1 1 0 1 0 1 0 0 1 1 0 0 0 0 1 1 1 0 0 0 1 1 1 1 0 1 0 1 0 0 0 1 0 1 1 0 0 0 1 0 1 0 0 1 1 0 0", "output": "32"}, {"input": "55\n1 0 1 0 1 0 1 0 1 1 0 0 1 1 1 1 0 1 0 0 0 1 1 0 0 1 0 1 0 1 1 1 0 0 0 0 0 0 1 0 0 0 1 1 1 0 0 0 1 0 1 0 1 1 1", "output": "36"}, {"input": "66\n0 1 1 0 0 1 0 1 0 1 0 1 1 0 1 1 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 1 0 0 1 1 1 0 1 0 1 1 0 1 0 0 1 1 0 1 1 1 0 0 0 0 0 1 0", "output": "41"}, {"input": "66\n0 1 1 0 1 1 1 0 0 0 1 1 0 1 1 0 0 1 1 1 1 1 0 1 1 1 0 1 1 1 0 0 1 0 0 1 1 1 0 0 1 0 1 1 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 1 0 0 1 1 0 1", "output": "42"}, {"input": "66\n1 0 1 0 0 0 1 0 1 0 1 0 1 1 0 1 0 1 1 0 0 0 1 1 1 0 1 0 0 1 0 1 0 0 0 0 1 1 0 1 1 0 1 0 0 0 1 1 0 1 0 1 1 0 0 0 1 1 0 1 1 0 1 1 0 0", "output": "46"}, {"input": "66\n1 0 1 0 0 0 1 1 1 1 1 0 1 0 0 0 1 1 1 0 1 1 0 1 0 1 0 0 1 0 0 1 0 1 0 1 0 0 1 0 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 0 0 0 1 0 1 1 0 0 0 1", "output": "46"}, {"input": "77\n0 0 1 0 0 1 0 0 1 1 1 1 0 1 0 0 1 0 0 0 0 1 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 1 1 0 1 0 1 1 0 0 0 1 0 0 1 1 1 0 1 0 1 1 0 1 0 0 0 1 0 1 1 0 1 1 1 0 1 1 0 1 0", "output": "47"}, {"input": "77\n0 0 1 0 0 0 1 0 1 1 1 1 0 1 1 1 0 1 1 0 1 1 1 0 1 1 0 1 0 0 0 0 1 1 0 0 0 1 1 0 0 1 1 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 0 1 0 0 1 0 1 1 0 1 0 0 0 0 1 1", "output": "44"}, {"input": "77\n1 0 0 0 1 0 1 1 0 0 1 0 0 0 1 1 1 1 0 1 0 0 0 0 0 0 1 1 0 0 0 1 0 1 0 1 1 1 0 1 1 1 0 0 0 1 1 0 1 1 1 0 1 1 0 0 1 0 0 1 1 1 1 0 1 0 0 0 1 0 1 1 0 0 0 0 0", "output": "45"}, {"input": "77\n1 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 0 0 1 1 1 0 1 1 0 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 1 0 1 1 1 1 1 1 1 0 0 1 1 0 0 1 0 1 1 1 1 1 1 1 1 0 0 1 0 1 1", "output": "51"}, {"input": "88\n0 0 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 1 1 1 0 0 1 1 0 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 0 0 0 0 1 0 0 0 1 0 1 1 0 1 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 1 1 1 0", "output": "44"}, {"input": "88\n0 0 1 0 0 0 1 1 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 0 1 1 0 1 1 1 0 1 0 0 1 0 1 1 0 0 0 0 0 1 1 0 0 1 0 1 1 1 0 1 1 0 1 1 0 0 0 1 1 1 1 1 1 1 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1", "output": "59"}, {"input": "88\n1 0 0 0 1 1 1 0 1 1 0 0 0 0 0 0 1 0 1 0 0 0 1 1 0 0 1 1 1 1 1 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 1 1 0 1 1 0 0 1 1 1 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 1 0 1 0 1 1 1 1 0 1 0 1 1 1 0 0 0", "output": "53"}, {"input": "88\n1 1 1 0 0 1 1 0 1 0 0 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 1 0 1 1 1 0 0 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 1 1 1 0 0 0 1 0 0 1 0 0 1 1 0 1 1 1 1 0 1 1 0 1", "output": "63"}, {"input": "99\n0 0 0 0 1 0 0 1 0 0 0 1 1 1 1 1 1 0 1 1 0 1 0 0 1 0 1 1 1 1 1 0 1 0 1 1 1 0 0 0 1 0 0 1 0 1 0 1 0 0 0 0 1 0 1 1 0 0 1 1 1 0 0 1 1 0 0 0 0 0 0 1 0 0 0 1 1 0 0 0 1 1 1 0 1 1 0 1 0 1 0 0 0 1 1 0 0 0 0", "output": "56"}, {"input": "99\n0 0 1 0 0 1 1 0 0 0 1 1 0 0 1 0 0 0 1 1 1 1 0 0 0 1 1 0 0 0 1 0 1 1 0 0 1 1 1 0 1 1 0 0 0 0 0 1 0 0 1 0 1 1 0 1 0 1 0 0 1 0 1 1 1 1 1 1 0 1 0 0 1 1 0 0 1 0 1 0 1 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 1 1 1", "output": "58"}, {"input": "99\n1 1 0 0 1 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 0 0 0 0 1 0 1 1 0 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 1 1 1 0 1 1 1 0 0 1 0 0 1 1 0 0 0 0 1 0 0 1 0 1 1 0 1 1 0 0 1 0 0 1 0 1 0 1 1 0 1 0 1 1 1 1 0 0 1 0", "output": "65"}, {"input": "99\n1 1 1 0 1 0 1 1 0 1 1 0 0 1 0 0 1 1 1 0 1 1 0 0 0 1 1 1 1 0 1 1 1 0 1 1 0 1 1 0 1 0 1 0 0 1 1 1 1 1 0 1 1 0 1 1 0 0 0 1 0 1 0 1 0 1 0 0 0 1 1 1 1 0 0 1 1 0 1 0 0 0 1 0 1 1 1 0 0 1 1 1 1 1 0 1 1 1 1", "output": "77"}, {"input": "90\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "output": "0"}, {"input": "90\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "output": "90"}, {"input": "95\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "output": "0"}, {"input": "95\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "output": "95"}, {"input": "100\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "output": "0"}, {"input": "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "output": "100"}], "language": "cpp"}, "prompt": "A. Alena's Schedule\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nAlena has successfully passed the entrance exams to the university and is now looking forward to start studying.\nOne two-hour lesson at the Russian university is traditionally called a pair, it lasts for two academic hours (an academic hour is equal to 45 minutes).\nThe University works in such a way that every day it holds exactly n lessons. Depending on the schedule of a particular group of students, on a given day, some pairs may actually contain classes, but some may be empty (such pairs are called breaks).\nThe official website of the university has already published the schedule for tomorrow for Alena's group. Thus, for each of the n pairs she knows if there will be a class at that time or not.\nAlena's House is far from the university, so if there are breaks, she doesn't always go home. Alena has time to go home only if the break consists of at least two free pairs in a row, otherwise she waits for the next pair at the university.\nOf course, Alena does not want to be sleepy during pairs, so she will sleep as long as possible, and will only come to the first pair that is presented in her schedule. Similarly, if there are no more pairs, then Alena immediately goes home.\nAlena appreciates the time spent at home, so she always goes home when it is possible, and returns to the university only at the beginning of the next pair. Help Alena determine for how many pairs she will stay at the university. Note that during some pairs Alena may be at the university waiting for the upcoming pair.\nInput\nThe first line of the input contains a positive integer n (1 <= n <= 100) - the number of lessons at the university.\nThe second line contains n numbers ai (0 <= ai <= 1). Number ai equals 0, if Alena doesn't have the i-th pairs, otherwise it is equal to 1. Numbers a1, a2, ..., an are separated by spaces.\nOutput\nPrint a single number - the number of pairs during which Alena stays at the university.\n", "generation": "int solve() {\n  int n;\n  cin >> n;\n  vector<int> a(n);\n  cin >> a[0];\n  for (int i = 1; i < n; i++) {\n    cin >> a[i];\n  }\n\n  int ans = 0;\n  int prev = -1;\n  for (int i = 0; i < n; i++) {\n    if (a[i] == 0 && prev == 0) {\n      prev = i;\n    } else if (a[i] == 0 && prev != -1) {\n      ans++;\n      prev = -1;\n    }\n  }\n\n  return ans;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int solve()\u2019:\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> n;\n      |   ^~~\ntest.cpp:4:3: error: \u2018vector\u2019 was not declared in this scope\n    4 |   vector<int> a(n);\n      |   ^~~~~~\ntest.cpp:4:10: error: expected primary-expression before \u2018int\u2019\n    4 |   vector<int> a(n);\n      |          ^~~\ntest.cpp:5:10: error: \u2018a\u2019 was not declared in this scope\n    5 |   cin >> a[0];\n      |          ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/30", "completion_id": 0, "test_suite": {"code": "int main() {\n  int n;\n  cin >> n;\n\n  vector<int> v(n);\n  vector<int> d(n);\n  vector<int> p(n);\n\n  for (int i = 0; i < n; i++) {\n    cin >> v[i];\n    cin >> d[i];\n    cin >> p[i];\n  }\n\n  vector<int> ans;\n  int k = 0;\n  for (int i = 0; i < n; i++) {\n    p[i] -= v[i];\n    if (p[i] < 0) {\n      k++;\n      for (int j = i; j < n; j++) {\n        p[j] -= d[i];\n      }\n    }\n  }\n\n  cout << k << endl;\n  for (int i = 0; i < k; i++) {\n    cout << p[i] << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "5\n4 2 2\n4 1 2\n5 2 4\n3 3 5\n5 1 2", "output": "2\n1 3"}, {"input": "5\n4 5 1\n5 3 9\n4 1 2\n2 1 8\n4 1 9", "output": "4\n1 2 4 5"}, {"input": "10\n10 7 10\n3 6 11\n8 4 10\n10 1 11\n7 3 13\n7 2 13\n7 6 14\n3 4 17\n9 4 20\n5 2 24", "output": "3\n1 2 5"}, {"input": "10\n5 6 3\n7 4 10\n9 1 17\n2 8 23\n9 10 24\n6 8 18\n3 2 35\n7 6 6\n1 3 12\n9 9 5", "output": "6\n1 2 3 4 5 7"}, {"input": "10\n4 9 1\n8 2 14\n7 10 20\n6 9 18\n5 3 19\n2 9 7\n6 8 30\n8 7 38\n6 5 5\n6 9 37", "output": "8\n1 2 3 4 5 7 8 10"}, {"input": "10\n10 3 3\n8 6 17\n9 5 26\n10 7 17\n3 10 29\n3 1 27\n3 3 7\n8 10 28\n1 3 23\n3 4 6", "output": "5\n1 2 3 5 8"}, {"input": "10\n5 6 1\n9 2 6\n4 1 5\n4 10 5\n1 8 23\n9 4 21\n3 9 6\n7 8 34\n7 4 24\n8 9 21", "output": "5\n1 2 5 6 8"}, {"input": "100\n39 85 23\n36 94 93\n48 70 62\n59 23 98\n21 98 141\n48 9 222\n66 58 259\n15 29 304\n85 94 338\n58 40 424\n58 12 472\n63 64 483\n71 8 515\n45 56 554\n20 72 596\n6 75 649\n63 65 742\n48 69 809\n48 39 836\n66 86 902\n84 91 981\n38 69 1090\n5 11 1129\n17 14 1169\n100 88 1170\n80 62 1213\n29 55 1302\n16 18 1346\n33 59 1385\n14 75 1411\n70 12 1487\n47 50 1532\n44 21 1554\n4 56 1599\n57 48 1603\n38 99 1677\n25 37 1762\n77 66 1818\n33 10 1894\n60 80 1903\n43 31 1984\n83 20 2013\n52 78 2022\n90 73 2047\n60 36 2...", "output": "2\n1 2"}, {"input": "100\n72 38 95\n9 49 106\n78 74 92\n88 76 164\n79 92 71\n45 93 142\n26 49 466\n49 28 265\n4 83 359\n21 67 181\n86 54 314\n10 73 270\n5 79 439\n42 45 345\n53 86 562\n95 36 399\n68 87 395\n2 15 286\n48 9 317\n70 71 450\n100 67 604\n81 80 325\n53 17 402\n17 38 771\n10 51 393\n64 100 361\n27 35 428\n58 40 526\n5 94 621\n29 7 551\n78 40 568\n31 24 594\n79 91 688\n87 4 547\n91 42 547\n58 59 570\n97 24 617\n96 36 628\n64 17 676\n24 22 636\n9 6 612\n78 5 634\n39 63 636\n65 26 698\n22 6 723\n18 23 728\n83 79 663\n18...", "output": "5\n1 2 3 4 7"}, {"input": "100\n5 95 71\n74 4 8\n74 88 152\n27 14 82\n26 93 251\n91 8 214\n97 13 142\n49 89 173\n75 9 200\n94 44 398\n8 96 470\n89 48 437\n16 87 272\n75 40 143\n35 93 148\n43 5 557\n79 14 270\n19 81 289\n56 35 371\n20 9 160\n38 49 239\n5 19 245\n81 29 473\n57 29 957\n33 19 292\n74 36 298\n47 12 493\n79 51 853\n68 88 305\n7 8 403\n69 19 428\n30 55 407\n55 23 470\n79 84 486\n98 1 606\n71 79 376\n96 22 569\n74 30 564\n77 32 574\n8 91 428\n70 82 710\n18 80 631\n28 84 863\n17 59 696\n80 32 600\n71 39 482\n91 82 558\n9 51 ...", "output": "8\n1 2 3 5 6 10 11 24"}, {"input": "100\n69 43 94\n46 52 117\n43 16 143\n73 30 155\n19 25 201\n49 69 326\n22 47 281\n61 57 328\n22 11 91\n71 82 241\n64 65 99\n70 60 142\n2 18 178\n81 12 273\n47 89 276\n68 54 285\n35 76 232\n65 70 840\n94 23 907\n62 32 665\n89 32 279\n59 29 1133\n39 91 422\n13 84 331\n50 76 351\n67 19 481\n36 15 443\n50 64 517\n4 54 493\n42 91 568\n71 8 442\n35 37 852\n54 45 482\n17 76 491\n49 38 585\n86 51 554\n32 6 494\n19 21 619\n95 96 699\n24 20 485\n4 33 538\n27 29 549\n40 13 595\n23 76 576\n90 31 509\n5 39 697\n43 47 53...", "output": "8\n1 2 3 4 6 18 19 22"}, {"input": "100\n40 53 47\n84 63 95\n67 26 169\n77 66 226\n92 56 198\n26 66 346\n79 69 357\n30 20 469\n2 31 271\n95 55 263\n96 15 572\n19 2 691\n43 6 619\n87 78 656\n83 51 268\n33 51 143\n55 82 900\n98 55 182\n15 75 241\n42 86 522\n2 94 286\n27 15 370\n41 53 394\n100 44 1051\n98 55 450\n31 71 433\n16 53 1384\n38 35 509\n93 1 496\n30 69 1385\n99 18 551\n77 18 537\n33 13 1137\n22 21 490\n58 58 1010\n93 11 588\n16 15 492\n17 100 494\n100 38 172\n24 89 647\n91 30 5\n14 61 892\n58 30 33\n90 75 231\n56 56 1370\n70 92 1035\n...", "output": "13\n1 2 3 4 6 7 8 11 12 13 14 17 27"}, {"input": "1000\n170 370 768\n225 906 507\n633 310 223\n620 352 807\n301 270 776\n725 515 613\n641 149 2779\n530 278 2760\n224 828 421\n795 801 4406\n807 141 4580\n877 671 3645\n16 636 4199\n211 378 6754\n113 593 934\n137 202 1582\n534 541 2068\n4 380 2244\n973 741 2529\n10 240 9525\n393 993 3878\n15 148 3541\n480 277 6316\n208 437 2730\n231 454 2747\n892 69 3577\n399 807 6008\n758 387 11395\n809 396 2606\n808 790 9034\n40 639 3024\n457 449 2898\n126 482 6390\n341 21 5261\n778 238 4062\n714 345 4360\n653 316 4598\n68...", "output": "8\n1 2 4 7 8 10 14 20"}, {"input": "1000\n688 217 54\n74 103 1492\n465 296 1382\n630 340 2096\n665 77 2785\n247 422 3002\n333 495 687\n783 334 3653\n101 234 4119\n604 529 4691\n890 359 5654\n431 941 3678\n79 532 2911\n131 50 7388\n889 953 3606\n765 698 5658\n26 579 3114\n939 82 752\n421 540 7169\n749 972 3865\n876 762 8305\n377 258 1506\n315 690 4865\n594 599 1255\n729 350 1658\n310 782 6434\n724 648 12711\n949 509 7283\n398 167 9398\n46 494 16688\n552 750 9585\n628 416 7985\n128 76 13615\n671 632 2098\n752 193 14173\n790 982 13680\n597 156 ...", "output": "12\n1 2 3 4 5 6 8 9 10 11 14 30"}, {"input": "4000\n958 848 513\n757 949 1759\n978 13 1679\n67 651 1714\n319 740 2191\n562 216 2974\n361 475 3117\n186 932 3643\n282 760 4268\n884 384 5127\n345 615 5574\n211 189 6338\n888 367 6632\n541 28 6948\n289 281 7049\n885 694 7197\n939 407 7612\n748 533 8093\n736 234 8694\n202 40 8998\n330 547 9227\n217 738 9689\n496 50 10131\n601 355 10547\n444 465 10918\n92 52 11175\n560 288 11410\n274 910 11618\n675 225 12439\n613 474 12751\n960 781 13094\n661 82 14014\n958 645 14144\n332 813 14314\n223 881 15629\n731 774 159...", "output": "2\n1 2"}, {"input": "4\n2 10 1\n1 2 2\n2 1 1\n5 5 1", "output": "3\n1 2 4"}, {"input": "3964\n999970 999994 10\n999902 999926 2\n999915 999940 6\n999991 999978 6\n999902 999901 9\n999950 999982 4\n999924 999940 1\n999973 999916 1\n999927 999977 2\n999955 999945 5\n999972 999946 10\n999933 999905 10\n999940 999931 2\n999989 999989 9\n999919 999974 2\n999923 999996 10\n999929 999947 3\n999910 999978 8\n999967 999901 1\n999952 999970 3\n999909 999938 4\n999969 999954 10\n999961 999983 10\n999921 999928 7\n999916 999931 8\n999928 999939 10\n999911 999937 3\n999929 999912 10\n999988 999912 7\n9999...", "output": "1\n1"}, {"input": "3959\n999932 999940 3\n999928 999924 7\n999960 999981 6\n999939 999963 2\n999924 999921 1\n999987 999978 6\n999974 999942 3\n999931 999997 5\n999980 999965 5\n999920 999971 9\n999986 999958 9\n999953 1000000 3\n999951 999931 9\n999952 999911 9\n999902 999939 4\n999990 999958 5\n999967 999921 10\n999972 999971 3\n999914 999908 6\n999984 999981 6\n999955 999983 2\n999999 999903 3\n999938 999937 10\n999999 999940 6\n999937 999915 8\n999924 999988 2\n999955 999942 2\n999922 999989 6\n999903 999908 10\n999975 9...", "output": "1\n1"}, {"input": "4000\n999918 999947 3\n999979 999972 6\n999930 999997 3\n999905 999933 1\n999971 999963 2\n999957 999969 1\n999926 999928 3\n999957 999906 10\n999991 999974 5\n999970 999953 2\n999970 999932 4\n999931 999920 1\n999984 999930 4\n999952 999915 10\n999933 999904 1\n999992 999996 8\n999988 999964 5\n999991 1000000 3\n999984 999914 8\n999919 999980 2\n999904 999933 4\n999925 999907 4\n999929 999971 7\n999915 999930 9\n999979 999972 1\n999981 999977 3\n999935 999995 2\n999924 999928 6\n999970 999929 8\n999938 99...", "output": "1\n1"}, {"input": "3999\n999971 999963 4\n999927 999956 6\n999952 999929 8\n999997 999917 2\n999989 999978 7\n999972 999970 7\n999970 999970 9\n999941 999915 10\n999953 999930 2\n999934 999936 2\n999992 999977 5\n999961 999937 10\n999992 999978 9\n999917 999957 4\n999941 999998 8\n999974 999962 1\n999943 999967 6\n999938 999993 10\n999935 999993 6\n1000000 999974 8\n999954 999920 3\n999923 999949 1\n999958 999914 1\n999945 999977 8\n999974 999946 3\n999929 999921 10\n999953 999972 2\n999967 999922 9\n999977 999919 7\n999980 ...", "output": "1\n1"}, {"input": "3998\n999926 999923 10\n999946 999902 8\n999992 999941 5\n999958 999978 9\n999970 999949 7\n999913 999955 10\n999917 999929 7\n999958 999909 3\n999932 999922 5\n999964 999928 7\n999993 999911 7\n999953 999933 10\n999951 999903 10\n999999 999965 10\n999952 999944 7\n999934 999951 7\n999929 999909 8\n999918 999908 8\n999948 999947 4\n999987 999915 7\n999915 999903 8\n999957 999914 9\n999959 999994 8\n999959 999925 2\n999995 999934 4\n999946 999969 10\n999998 999960 9\n999947 999979 6\n999914 999955 2\n999957...", "output": "1\n1"}, {"input": "1\n1 1 1", "output": "1\n1"}, {"input": "2\n5 1 1\n1 1 5", "output": "2\n1 2"}, {"input": "2\n5 1 1\n1 1 4", "output": "1\n1"}, {"input": "2\n5 1 1\n1 1 6", "output": "2\n1 2"}, {"input": "3\n5 1 1\n1 1 4\n1 1 4", "output": "1\n1"}, {"input": "3\n5 1 1\n1 1 4\n1 1 5", "output": "2\n1 3"}, {"input": "3\n5 1 1\n1 1 5\n1 1 3", "output": "2\n1 2"}, {"input": "3\n5 1 1\n10 1 5\n1000 1000 14", "output": "3\n1 2 3"}, {"input": "10\n9 8 8\n2 9 33\n10 7 42\n7 2 18\n3 5 82\n9 9 25\n3 2 86\n3 5 49\n5 3 72\n4 4 71", "output": "10\n1 2 3 4 5 6 7 8 9 10"}, {"input": "10\n9 8 8\n2 9 8\n10 7 16\n7 2 9\n3 5 23\n9 9 25\n3 2 35\n3 5 36\n5 3 40\n4 4 42", "output": "1\n1"}, {"input": "100\n91 40 872\n17 55 90\n88 59 144\n51 34 202\n92 66 235\n47 19 300\n85 55 20\n3 54 152\n82 87 22\n61 7 511\n2 45 517\n48 67 561\n55 30 627\n56 70 136\n71 33 669\n1 42 757\n12 34 680\n78 13 412\n80 74 843\n31 26 6\n42 10 107\n33 23 231\n85 16 18\n99 34 82\n25 97 695\n25 32 445\n37 64 990\n18 51 612\n29 94 984\n53 94 654\n84 92 685\n88 51 966\n4 45 348\n55 55 414\n24 40 481\n3 89 871\n53 13 895\n53 28 324\n1 54 919\n95 62 393\n36 93 192\n84 10 87\n65 43 152\n5 57 226\n40 95 314\n52 64 964\n49 56 225\n77 4 ...", "output": "1\n1"}, {"input": "1000\n609 433 2109\n422 207 357\n209 883 814\n618 792 408\n129 428 862\n700 564 537\n893 680 3477\n647 883 4156\n231 107 4604\n314 713 4423\n844 458 2377\n347 427 5038\n789 74 520\n711 944 6812\n968 799 2762\n416 440 7469\n864 478 8992\n190 289 3107\n564 13 9632\n874 816 9427\n357 762 4889\n87 917 3932\n530 986 7815\n754 387 1450\n935 91 5830\n772 344 8595\n475 44 9856\n206 520 1168\n898 796 1985\n717 686 392\n252 785 3486\n686 822 1476\n604 283 1186\n188 445 8127\n451 545 3609\n977 75 9837\n366 570 9186\n...", "output": "1\n1"}, {"input": "4000\n627 510 2796\n718 1339 626\n1309 862 1964\n358 928 2825\n283 1827 3752\n234 1601 1022\n1072 81 419\n1164 342 4025\n157 384 7599\n1461 1243 3759\n1095 294 4925\n236 1659 9517\n1175 865 11175\n390 976 1984\n449 346 4\n912 906 11613\n24 1351 9226\n380 1598 2463\n1840 657 17113\n1289 1346 17867\n1141 1686 4850\n1607 1783 9342\n347 399 9668\n441 374 16446\n901 837 2280\n540 431 15120\n1466 832 18542\n1287 1214 15159\n293 464 7256\n1092 1295 6865\n573 881 11109\n1535 308 5059\n502 809 11345\n1117 1621 6876...", "output": "1\n1"}, {"input": "4000\n11243 11888 105732\n19023 18947 11242\n881 4243 6906\n4422 15359 30605\n14562 17921 49788\n18025 3279 47454\n5742 8684 70986\n10 6377 71365\n14503 9930 60300\n7197 6662 53215\n13489 11203 102635\n19663 981 109601\n11932 4844 15554\n9814 13523 119660\n2228 14355 133182\n1162 14520 147536\n10359 7772 162055\n13491 18772 93494\n12488 2285 39285\n2435 250 48775\n12002 10534 108225\n10373 3164 125052\n10576 5780 3971\n6551 4409 172632\n14619 165 62320\n10709 18770 183841\n16291 14207 72974\n1782 15267 123...", "output": "1\n1"}, {"input": "4000\n82808 45342 175002\n38181 23560 82807\n44935 57878 106366\n21218 27616 164243\n54479 44660 191858\n12132 56738 236517\n42416 64122 293254\n6652 8901 357375\n83459 81383 366275\n2757 63305 416691\n40809 82911 510961\n95161 42312 552242\n48199 31019 636182\n2848 69073 412721\n59217 38116 191352\n56810 67158 196198\n5445 67082 279813\n15677 741 347235\n10138 6522 416964\n84177 50741 531876\n48248 86240 583397\n28603 87394 572711\n89226 1769 276314\n83815 61723 684930\n4530 86557 489549\n41514 3801 27166...", "output": "1\n1"}], "language": "cpp"}, "prompt": "C. Gennady the Dentist\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nGennady is one of the best child dentists in Berland. Today n children got an appointment with him, they lined up in front of his office.\nAll children love to cry loudly at the reception at the dentist. We enumerate the children with integers from 1 to n in the order they go in the line. Every child is associated with the value of his cofidence pi. The children take turns one after another to come into the office; each time the child that is the first in the line goes to the doctor.\nWhile Gennady treats the teeth of the i-th child, the child is crying with the volume of vi. At that the confidence of the first child in the line is reduced by the amount of vi, the second one - by value vi - 1, and so on. The children in the queue after the vi-th child almost do not hear the crying, so their confidence remains unchanged.\nIf at any point in time the confidence of the j-th child is less than zero, he begins to cry with the volume of dj and leaves the line, running towards the exit, without going to the doctor's office. At this the confidence of all the children after the j-th one in the line is reduced by the amount of dj.\nAll these events occur immediately one after the other in some order. Some cries may lead to other cries, causing a chain reaction. Once in the hallway it is quiet, the child, who is first in the line, goes into the doctor's office.\nHelp Gennady the Dentist to determine the numbers of kids, whose teeth he will cure. Print their numbers in the chronological order.\nInput\nThe first line of the input contains a positive integer n (1 <= n <= 4000) - the number of kids in the line.\nNext n lines contain three integers each vi, di, pi (1 <= vi, di, pi <= 106) - the volume of the cry in the doctor's office, the volume of the cry in the hall and the confidence of the i-th child.\nOutput\nIn the first line print number k - the number of children whose teeth Gennady will cure.\nIn the second line print k integers - the numbers of the children who will make it to the end of the line in the increasing order.\n", "generation": "int main() {\n  int n;\n  cin >> n;\n\n  vector<int> v(n);\n  vector<int> d(n);\n  vector<int> p(n);\n\n  for (int i = 0; i < n; i++) {\n    cin >> v[i];\n    cin >> d[i];\n    cin >> p[i];\n  }\n\n  vector<int> ans;\n  int k = 0;\n  for (int i = 0; i < n; i++) {\n    p[i] -= v[i];\n    if (p[i] < 0) {\n      k++;\n      for (int j = i; j < n; j++) {\n        p[j] -= d[i];\n      }\n    }\n  }\n\n  cout << k << endl;\n  for (int i = 0; i < k; i++) {\n    cout << p[i] << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> n;\n      |   ^~~\ntest.cpp:5:3: error: \u2018vector\u2019 was not declared in this scope\n    5 |   vector<int> v(n);\n      |   ^~~~~~\ntest.cpp:5:10: error: expected primary-expression before \u2018int\u2019\n    5 |   vector<int> v(n);\n      |          ^~~\ntest.cpp:6:10: error: expected primary-expression before \u2018int\u2019\n    6 |   vector<int> d(n);\n      |          ^~~\ntest.cpp:7:10: error: expected primary-expression before \u2018int\u2019\n    7 |   vector<int> p(n);\n      |          ^~~\ntest.cpp:10:12: error: \u2018v\u2019 was not declared in this scope\n   10 |     cin >> v[i];\n      |            ^\ntest.cpp:11:12: error: \u2018d\u2019 was not declared in this scope\n   11 |     cin >> d[i];\n      |            ^\ntest.cpp:12:12: error: \u2018p\u2019 was not declared in this scope\n   12 |     cin >> p[i];\n      |            ^\ntest.cpp:15:10: error: expected primary-expression before \u2018int\u2019\n   15 |   vector<int> ans;\n      |          ^~~\ntest.cpp:18:5: error: \u2018p\u2019 was not declared in this scope\n   18 |     p[i] -= v[i];\n      |     ^\ntest.cpp:18:13: error: \u2018v\u2019 was not declared in this scope\n   18 |     p[i] -= v[i];\n      |             ^\ntest.cpp:22:17: error: \u2018d\u2019 was not declared in this scope\n   22 |         p[j] -= d[i];\n      |                 ^\ntest.cpp:27:3: error: \u2018cout\u2019 was not declared in this scope\n   27 |   cout << k << endl;\n      |   ^~~~\ntest.cpp:27:16: error: \u2018endl\u2019 was not declared in this scope\n   27 |   cout << k << endl;\n      |                ^~~~\ntest.cpp:29:13: error: \u2018p\u2019 was not declared in this scope\n   29 |     cout << p[i] << endl;\n      |             ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/31", "completion_id": 0, "test_suite": {"code": "int main() {\n  int n;\n  cin >> n;\n\n  vector<int> a(n - 1);\n  cin >> a[0] >> a[1] >> ... >> a[n - 2];\n\n  vector<int> b(n);\n  cin >> b[0] >> b[1] >> ... >> b[n - 1];\n\n  int ans = 0;\n  for (int i = 0; i < n - 1; i++) {\n    ans += a[i];\n  }\n  for (int i = 0; i < n - 1; i++) {\n    ans += b[i];\n  }\n\n  cout << ans;\n  return 0;\n}\n", "testcases": [{"input": "4\n1 2 3\n3 2 1\n3 2 2 3", "output": "12"}, {"input": "3\n1 2\n3 3\n2 1 3", "output": "11"}, {"input": "2\n1\n1\n1 1", "output": "4"}, {"input": "2\n1\n1\n2 1", "output": "5"}, {"input": "3\n1 100\n1 1\n100 100 100", "output": "204"}, {"input": "4\n5 6 7\n8 9 10\n1 8 8 1", "output": "47"}, {"input": "4\n1 2 3\n2 2 3\n2 3 4 3", "output": "18"}, {"input": "48\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "output": "96"}, {"input": "48\n2 1 1 2 1 1 1 1 2 2 2 1 2 2 2 1 1 2 1 2 1 2 2 2 2 1 1 2 2 1 1 2 2 1 1 1 2 2 2 2 1 2 1 1 1 1 1\n1 1 1 1 1 1 2 1 2 1 1 2 2 1 2 2 2 1 2 2 2 2 1 1 1 2 1 1 2 2 1 2 2 1 2 2 1 2 2 1 1 2 2 1 1 2 2\n2 1 1 2 1 2 2 2 2 2 1 2 2 2 1 2 2 2 1 1 1 2 1 1 2 1 1 2 2 2 1 2 2 2 2 1 2 2 2 1 2 2 2 2 2 1 2 1", "output": "143"}, {"input": "48\n7 3 1 5 3 8 5 6 4 6 8 7 7 6 9 6 4 1 10 3 2 7 6 9 4 9 1 10 6 10 9 1 5 7 8 8 1 1 3 2 2 10 3 7 8 4 7\n4 9 9 4 2 6 2 4 3 9 2 9 7 3 10 1 5 2 2 10 2 1 6 2 10 5 4 6 10 2 5 10 3 1 8 1 2 6 5 2 3 5 8 1 1 8 4\n4 6 4 3 10 4 8 9 1 10 4 2 2 10 4 7 4 5 4 1 10 6 10 8 4 9 4 10 8 5 3 2 10 10 1 10 10 10 6 10 1 7 6 10 5 8 6 4", "output": "435"}, {"input": "48\n47 3 47 2 29 33 39 16 27 34 31 9 2 40 16 28 15 8 37 9 25 36 14 5 24 48 49 26 43 47 46 23 31 27 30 44 34 12 41 21 2 9 27 49 42 27 9\n6 46 24 12 19 6 39 50 37 30 39 44 14 9 39 47 13 13 1 28 36 22 15 28 43 22 2 19 36 48 34 45 44 9 24 28 41 20 39 8 19 23 25 36 37 16 21\n1 35 9 12 25 39 4 27 26 20 15 4 28 30 21 46 34 30 39 22 6 2 31 2 27 44 3 16 47 12 8 32 37 37 47 8 40 2 2 4 33 38 20 25 3 43 45 45", "output": "2404"}, {"input": "48\n25 48 43 29 32 6 22 4 33 17 25 2 50 19 39 45 38 8 5 3 23 14 24 31 35 11 20 37 10 13 14 43 18 6 42 44 14 37 29 28 2 20 12 3 30 11 24\n46 14 32 22 21 37 6 42 26 20 10 45 18 20 2 36 41 44 17 17 10 21 45 23 26 41 6 45 16 4 16 48 2 6 26 8 15 1 48 30 20 27 39 24 49 27 36\n10 29 17 21 21 13 27 43 27 3 33 20 22 39 37 21 9 41 7 23 30 17 31 4 45 49 9 43 41 42 38 30 5 49 45 30 43 3 2 43 29 35 11 47 12 12 15 43", "output": "2243"}, {"input": "48\n3 42 46 11 44 25 1 42 38 49 14 42 44 10 4 12 2 20 27 44 14 50 33 10 42 27 41 48 26 42 40 18 9 42 1 2 47 8 20 39 45 42 47 8 19 41 32\n36 32 45 48 26 26 38 38 10 7 31 50 23 23 15 17 18 25 24 44 29 12 29 30 16 14 18 20 50 10 3 1 10 7 32 35 43 36 20 40 16 26 12 8 20 38 5\n19 15 33 18 13 29 50 17 28 48 2 36 13 2 12 43 47 6 17 40 8 28 27 15 14 9 10 37 47 25 10 19 11 11 32 3 45 9 11 33 18 35 43 14 13 27 31 34", "output": "2202"}, {"input": "48\n26 55 85 65 66 16 31 85 42 78 14 83 42 52 22 32 73 68 30 92 82 18 43 40 43 36 87 77 64 61 46 79 88 86 92 16 28 47 89 34 58 47 76 24 100 27 80\n78 15 79 90 84 28 98 65 60 65 5 65 89 9 72 9 52 52 85 77 66 9 78 76 4 76 3 26 77 91 58 76 76 17 50 83 64 83 40 1 6 61 37 20 55 7 82\n61 19 9 30 98 19 6 4 36 32 54 99 18 46 28 24 12 1 21 15 38 23 39 82 66 92 95 88 65 97 98 4 22 62 96 79 1 8 85 82 38 71 50 82 4 81 58 57", "output": "4754"}, {"input": "48\n54 99 43 46 23 80 6 77 2 60 54 26 32 93 45 41 92 23 49 33 31 100 52 19 4 61 4 38 89 27 72 58 79 22 5 20 58 14 30 49 55 69 65 79 97 15 92\n22 41 46 100 36 13 14 61 94 56 26 12 93 12 77 48 34 83 38 66 86 100 16 25 90 91 15 2 12 48 45 25 84 68 98 14 88 22 16 65 53 11 56 54 68 10 39\n74 17 18 74 36 43 75 82 41 15 73 65 17 9 45 95 88 66 93 78 70 88 88 39 35 60 100 70 63 27 75 10 78 78 90 2 57 14 97 29 88 72 45 99 55 46 24 6", "output": "4262"}, {"input": "48\n82 39 88 16 77 57 94 61 57 42 93 70 26 26 60 58 14 85 67 85 83 78 57 3 61 69 25 91 97 97 94 24 66 55 10 24 88 85 68 60 52 80 46 33 85 98 3\n58 59 5 18 92 6 46 57 36 47 51 67 5 24 94 83 7 15 3 42 13 98 50 78 76 6 19 77 42 8 28 78 88 22 54 40 12 56 76 37 95 53 74 92 88 22 100\n83 8 34 25 78 60 48 57 42 10 91 35 8 72 69 71 75 31 65 28 2 45 30 87 91 16 1 55 64 56 55 99 46 93 89 24 6 15 97 72 39 73 24 24 14 15 86 47", "output": "4664"}, {"input": "48\n2 92 42 94 30 34 65 53 13 24 37 14 17 63 83 79 37 31 93 26 28 60 67 74 22 77 42 52 17 67 20 95 54 91 15 36 18 60 6 62 45 94 31 92 78 82 15\n2 73 72 31 32 92 67 49 75 30 72 22 13 31 3 22 89 50 69 27 33 89 84 26 59 33 34 48 72 64 15 35 4 65 10 70 36 91 48 4 46 2 93 26 1 29 69\n92 2 42 76 12 84 29 19 43 93 10 97 3 31 86 42 51 96 29 87 26 10 79 40 64 79 7 49 66 90 27 93 7 5 83 38 50 21 6 11 85 77 14 41 69 83 52 95", "output": "4018"}, {"input": "48\n30 36 96 71 92 99 48 41 72 3 77 61 7 97 98 96 51 93 11 67 76 45 84 57 79 85 63 13 34 38 39 77 53 23 27 32 39 35 43 81 42 13 16 46 75 66 22\n46 91 30 49 88 81 95 45 9 13 93 69 17 42 20 57 79 73 34 16 57 88 18 83 57 44 46 24 2 20 2 80 12 20 66 97 59 34 12 68 92 56 16 64 17 32 34\n97 100 50 24 58 100 99 93 45 88 24 66 93 98 10 17 38 72 98 46 50 83 21 100 32 35 4 34 60 20 7 95 59 12 73 60 2 27 10 55 35 74 9 58 32 48 18 36", "output": "4492"}, {"input": "49\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "output": "98"}, {"input": "49\n1 1 1 1 1 2 1 1 2 1 1 1 1 1 1 1 1 2 2 2 2 1 2 2 1 1 2 1 2 1 1 1 1 1 2 2 2 1 2 1 2 2 2 2 2 2 1 2\n2 2 2 1 1 2 1 1 2 2 1 2 2 1 1 2 2 1 1 1 1 2 2 1 1 1 2 1 2 1 1 1 2 1 1 2 2 2 2 2 2 2 2 2 2 2 1 1\n2 2 1 2 2 1 1 1 2 2 1 2 1 2 1 2 1 2 2 1 1 2 2 1 1 2 2 1 2 2 2 2 1 2 2 1 1 1 2 1 2 2 2 1 2 2 1 1 1", "output": "136"}, {"input": "49\n5 1 1 2 6 1 10 9 5 5 1 3 6 7 2 3 4 5 7 10 6 7 1 1 5 10 7 5 5 8 6 3 6 5 8 10 4 8 2 1 6 7 3 3 2 6 1 9\n9 7 2 1 10 9 9 4 10 5 9 8 1 7 7 4 6 5 6 4 3 3 3 10 7 8 9 3 6 6 1 8 8 6 7 7 2 5 4 9 5 10 8 5 8 8 4 2\n9 10 9 9 7 3 10 5 7 8 2 6 3 1 7 3 1 3 6 4 4 5 10 2 7 9 7 10 1 2 6 2 2 8 9 9 10 10 8 10 9 7 8 9 3 8 8 3 7", "output": "476"}, {"input": "49\n9 3 7 10 7 8 5 1 10 7 10 2 2 8 7 2 7 9 6 9 7 1 10 2 2 7 8 6 1 8 2 6 3 8 3 6 3 9 4 2 9 1 4 10 1 3 5 9\n7 6 9 7 3 8 5 8 7 6 8 2 2 10 6 2 3 10 1 2 4 7 8 7 2 9 8 7 8 3 6 6 9 8 8 1 5 2 3 2 4 9 6 7 9 3 1 3\n8 1 1 3 10 7 1 2 4 10 10 9 8 1 6 8 3 4 8 7 4 2 10 2 2 4 1 10 3 6 8 3 4 10 1 4 3 4 8 7 1 4 9 3 3 6 2 4 2", "output": "523"}, {"input": "49\n37 26 4 44 25 50 32 7 34 46 49 12 7 41 26 30 17 1 27 50 35 48 42 29 30 21 17 26 16 36 13 22 49 17 38 21 11 9 5 36 44 47 17 36 13 28 29 15\n29 42 5 42 1 43 22 15 34 35 42 13 41 40 2 35 35 35 30 4 35 6 13 19 10 25 4 8 50 14 36 33 45 43 7 1 42 44 10 30 12 48 30 4 28 33 31 43\n27 36 12 11 35 41 36 14 5 39 30 39 46 3 46 10 46 47 2 21 12 43 1 2 26 14 24 19 8 29 16 45 7 19 2 50 49 46 20 45 39 2 35 43 46 4 41 20 20", "output": "2472"}, {"input": "49\n11 20 15 26 29 19 7 45 43 28 39 9 47 24 49 1 32 13 45 49 38 26 5 12 41 37 38 33 32 3 39 4 36 3 35 29 45 30 42 43 49 11 10 49 1 16 45 1\n47 9 19 36 32 18 14 49 25 10 47 26 45 49 41 13 9 50 15 31 34 32 7 9 25 37 29 46 2 1 39 48 50 49 33 25 23 12 24 30 11 16 10 20 35 48 40 42\n43 37 4 35 12 8 37 9 19 5 28 2 21 25 26 24 6 6 34 36 12 50 19 8 32 41 18 49 34 26 22 11 5 37 4 2 15 43 13 42 22 23 40 8 16 49 48 31 29", "output": "2542"}, {"input": "49\n35 14 11 50 36 42 45 37 49 10 28 49 45 4 14 10 4 13 17 44 28 12 15 41 48 49 5 44 49 23 7 21 36 35 48 30 21 5 26 50 42 30 37 3 2 49 2 45\n19 18 36 37 30 42 10 34 16 27 2 34 6 16 27 45 44 15 50 5 25 20 6 41 48 2 50 30 8 38 46 2 50 5 17 48 16 30 45 23 11 35 44 29 39 13 49 28\n1 39 4 2 36 32 38 42 42 25 19 11 37 50 9 35 28 10 7 47 3 6 42 26 29 27 16 29 11 24 37 26 42 9 11 11 16 36 9 39 17 44 49 26 32 47 1 29 37", "output": "2612"}, {"input": "49\n75 32 47 38 45 100 90 67 82 21 4 16 61 69 49 86 95 13 79 70 92 98 92 48 64 1 95 47 90 31 41 12 89 98 22 95 62 54 94 57 43 1 72 8 12 71 98 41\n40 31 71 13 20 32 48 81 17 13 68 6 48 50 44 17 37 8 76 100 57 65 91 15 51 33 83 64 44 66 22 20 44 69 18 32 50 91 43 25 95 42 28 20 16 68 69 70\n52 51 67 93 7 99 59 90 53 66 35 25 8 89 80 64 49 80 87 76 3 38 71 86 88 18 41 91 55 27 12 84 44 81 14 51 35 82 33 93 1 50 62 30 65 60 41 12 85", "output": "4518"}, {"input": "49\n99 77 96 11 98 68 62 59 38 4 44 64 51 6 60 3 10 71 97 18 44 75 9 28 25 9 16 4 7 9 63 90 84 31 35 91 96 29 31 60 32 16 57 66 8 55 6 77\n54 98 89 57 9 52 40 15 99 34 23 10 52 59 79 99 72 66 56 24 56 99 48 2 66 45 58 95 1 53 75 36 94 22 45 60 85 63 14 71 41 72 65 37 20 33 82 65\n60 98 13 18 76 61 60 85 63 28 34 84 32 64 60 29 21 39 15 37 53 94 40 41 94 3 39 21 35 17 77 92 42 7 58 53 39 30 79 93 96 68 25 94 31 9 48 26 35", "output": "4427"}, {"input": "49\n27 21 50 89 60 45 49 47 1 82 88 11 49 43 87 20 32 26 19 63 93 61 14 11 82 22 33 61 23 76 81 61 79 67 36 99 30 4 69 70 37 38 34 21 1 38 21 21\n72 57 11 8 2 81 44 49 90 55 70 18 63 72 18 73 3 27 41 47 47 33 93 88 85 49 29 29 61 44 32 44 53 78 75 84 24 23 86 18 91 91 3 53 31 2 91 59\n68 49 48 34 49 40 57 76 82 90 32 43 49 31 48 89 89 93 43 9 94 55 97 1 99 89 45 54 7 7 33 15 37 22 10 59 48 73 25 90 87 85 76 63 1 57 55 25 94", "output": "4541"}, {"input": "49\n51 65 96 71 14 18 24 31 56 68 27 51 40 81 98 29 55 84 41 4 41 43 28 90 39 38 55 22 35 46 8 31 66 95 48 3 55 79 6 85 30 49 19 75 90 22 29 65\n90 23 25 64 88 1 40 96 77 76 25 22 66 81 53 54 27 92 26 67 46 71 41 74 100 60 5 55 21 31 77 60 95 38 5 8 59 99 50 65 40 10 29 66 38 63 9 53\n84 100 94 58 22 14 58 63 4 60 19 2 73 7 23 58 61 52 67 74 48 3 65 65 1 82 38 84 95 13 1 27 27 44 58 64 48 8 80 86 77 10 35 28 59 98 62 36 53", "output": "4447"}, {"input": "49\n75 14 49 48 71 87 8 23 20 50 75 95 30 14 25 50 77 38 59 57 82 21 45 69 100 46 80 83 56 16 34 9 57 32 57 7 89 50 44 96 31 71 12 34 86 10 40 1\n4 82 38 4 73 33 32 30 68 1 80 35 77 98 89 28 62 54 7 95 37 5 94 61 24 76 80 89 65 18 30 64 50 90 40 27 94 59 22 11 94 28 67 82 49 28 14 47\n92 48 28 74 4 88 59 58 23 21 18 73 90 78 7 23 26 14 3 31 90 56 22 20 98 68 36 18 71 3 57 35 21 66 2 70 56 51 18 99 60 27 98 97 29 51 69 38 12", "output": "4688"}, {"input": "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "output": "100"}, {"input": "50\n19 43 43 6 20 8 25 17 19 22 27 30 50 1 16 18 6 48 28 26 15 12 38 6 11 13 4 9 24 47 38 11 27 15 3 7 17 40 32 25 38 21 7 20 23 19 44 13 25\n40 21 42 10 13 34 13 8 39 13 29 43 7 4 22 47 50 45 10 1 43 5 44 11 46 40 24 44 27 9 26 18 24 34 25 49 19 39 24 36 32 6 2 25 33 35 44 6 41\n37 48 32 4 4 41 5 5 30 15 48 11 6 29 5 45 40 13 16 34 19 10 44 24 42 27 3 11 29 8 13 12 25 43 14 36 2 1 48 4 24 42 5 4 22 19 25 21 8 41", "output": "2189"}, {"input": "50\n47 38 39 30 32 23 9 5 28 4 17 20 36 31 35 39 29 6 46 20 14 40 47 35 18 21 13 23 40 18 14 32 18 1 16 12 43 11 19 40 31 32 38 16 12 48 9 7 39\n3 35 43 7 33 30 43 49 14 19 37 46 13 39 4 32 16 30 30 42 27 4 39 34 7 7 9 4 10 12 34 15 34 14 49 38 45 3 21 36 47 44 15 29 48 44 35 15 42\n29 14 5 20 5 28 19 21 17 24 14 29 40 40 15 4 26 28 15 37 38 15 38 10 36 11 29 1 43 23 11 27 23 49 23 29 49 47 39 22 33 11 17 45 33 34 34 41 36 32", "output": "2553"}, {"input": "50\n30 98 29 67 86 51 9 45 25 85 75 2 91 37 7 29 14 92 46 14 8 4 98 40 62 90 10 41 77 95 16 74 11 4 86 64 66 21 33 99 74 1 29 31 66 20 91 14 15\n28 41 39 21 17 86 46 45 41 52 62 9 93 44 26 18 97 81 57 97 68 65 2 58 30 54 96 68 20 18 78 56 84 43 92 33 66 60 25 97 8 71 55 79 58 33 47 59 63\n90 82 54 3 42 44 43 71 16 93 91 64 43 51 30 3 87 22 60 83 13 24 64 3 9 73 64 24 29 60 63 49 61 63 9 34 85 83 23 80 17 63 53 100 70 20 19 92 66 63", "output": "4675"}, {"input": "50\n55 51 83 45 43 16 84 33 80 71 23 46 82 74 34 46 28 43 68 59 60 90 8 23 19 99 32 98 85 61 42 56 6 40 95 72 100 92 71 18 67 24 6 89 55 8 3 50 41\n90 59 91 11 45 78 81 35 58 7 70 12 98 79 8 53 54 66 80 88 6 17 88 73 45 29 26 24 7 71 82 2 44 74 16 76 38 28 72 43 34 5 72 90 23 43 41 76 14\n24 94 31 77 43 27 62 25 7 52 8 39 26 16 94 58 11 83 9 39 77 92 62 96 3 3 36 22 94 71 53 71 13 69 18 77 32 80 14 1 76 23 19 45 77 23 73 66 44 58", "output": "4620"}, {"input": "50\n83 91 33 26 97 92 67 25 36 49 62 89 72 7 45 56 54 5 86 100 1 68 17 6 80 11 53 55 9 28 60 26 1 72 7 68 22 67 9 24 68 34 99 44 52 91 14 94 55\n53 81 43 92 66 74 19 18 79 58 83 23 15 14 90 85 16 50 4 87 32 66 74 88 57 96 60 84 94 16 98 53 92 4 36 11 10 96 18 96 57 43 84 94 84 52 35 84 62\n66 14 4 51 44 22 80 94 2 15 32 6 6 81 66 21 43 43 55 88 46 47 63 82 8 36 24 20 54 87 48 94 53 75 18 16 70 77 9 22 31 92 85 93 80 30 32 36 23 45", "output": "4859"}, {"input": "50\n3 35 86 4 51 65 51 9 95 31 6 29 66 36 68 77 73 59 4 49 49 50 34 86 37 27 74 16 22 98 91 93 93 9 8 80 52 38 46 35 60 49 84 2 40 79 26 38 74\n16 99 87 89 98 66 53 5 100 9 87 27 24 53 63 8 81 31 28 86 66 15 61 3 69 76 90 32 77 69 6 7 44 30 60 46 70 68 61 46 76 81 5 5 45 61 29 92 9\n4 31 74 17 49 5 95 56 100 82 49 82 89 46 38 79 67 4 4 40 7 11 65 67 2 66 100 14 10 3 46 8 5 81 30 55 24 81 96 39 90 61 47 42 91 36 87 6 6 44", "output": "4472"}, {"input": "50\n31 80 40 85 12 38 30 97 51 18 45 81 56 82 91 94 95 13 26 93 98 35 44 69 98 39 83 77 38 68 13 71 80 41 21 80 81 17 88 46 61 67 65 49 29 55 37 74 88\n71 8 42 74 14 70 100 96 25 56 95 38 41 88 45 43 46 16 55 77 100 68 51 30 73 51 25 88 64 26 22 50 4 57 88 85 45 32 11 96 94 19 9 12 10 66 24 8 60\n46 55 55 95 50 96 13 26 91 41 74 53 65 10 11 30 99 77 46 93 71 67 70 44 100 96 73 8 74 14 32 30 62 87 31 3 71 78 82 60 41 26 17 87 98 39 45 80 84 39", "output": "4804"}, {"input": "50\n55 24 86 55 70 15 9 89 6 96 85 20 47 11 6 11 18 75 44 34 50 13 53 40 59 48 4 30 54 34 31 46 75 73 26 85 15 92 21 56 58 81 54 3 26 42 53 18 6\n37 22 90 56 39 67 34 83 46 11 7 49 58 27 23 74 100 1 83 76 38 17 41 45 84 26 51 48 47 75 26 4 60 87 7 20 13 3 58 45 13 57 22 23 79 75 18 17 7\n80 71 24 69 51 91 35 92 90 100 90 28 52 71 67 89 31 42 92 53 40 26 75 38 98 30 53 6 34 30 31 52 6 92 43 46 17 75 73 74 4 95 79 35 5 46 4 58 63 26", "output": "3834"}], "language": "cpp"}, "prompt": "B. Laurenty and Shop\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nA little boy Laurenty has been playing his favourite game Nota for quite a while and is now very hungry. The boy wants to make sausage and cheese sandwiches, but first, he needs to buy a sausage and some cheese.\nThe town where Laurenty lives in is not large. The houses in it are located in two rows, n houses in each row. Laurenty lives in the very last house of the second row. The only shop in town is placed in the first house of the first row.\nThe first and second rows are separated with the main avenue of the city. The adjacent houses of one row are separated by streets.\nEach crosswalk of a street or an avenue has some traffic lights. In order to cross the street, you need to press a button on the traffic light, wait for a while for the green light and cross the street. Different traffic lights can have different waiting time.\nThe traffic light on the crosswalk from the j-th house of the i-th row to the (j + 1)-th house of the same row has waiting time equal to aij (1 <= i <= 2, 1 <= j <= n - 1). For the traffic light on the crossing from the j-th house of one row to the j-th house of another row the waiting time equals bj (1 <= j <= n). The city doesn't have any other crossings.\nThe boy wants to get to the store, buy the products and go back. The main avenue of the city is wide enough, so the boy wants to cross it exactly once on the way to the store and exactly once on the way back home. The boy would get bored if he had to walk the same way again, so he wants the way home to be different from the way to the store in at least one crossing.\nFigure to the first sample.\nHelp Laurenty determine the minimum total time he needs to wait at the crossroads.\nInput\nThe first line of the input contains integer n (2 <= n <= 50) - the number of houses in each row.\nEach of the next two lines contains n - 1 space-separated integer - values aij (1 <= aij <= 100).\nThe last line contains n space-separated integers bj (1 <= bj <= 100).\nOutput\nPrint a single integer - the least total time Laurenty needs to wait at the crossroads, given that he crosses the avenue only once both on his way to the store and on his way back home.\n", "generation": "int main() {\n  int n;\n  cin >> n;\n\n  vector<int> a(n - 1);\n  cin >> a[0] >> a[1] >> ... >> a[n - 2];\n\n  vector<int> b(n);\n  cin >> b[0] >> b[1] >> ... >> b[n - 1];\n\n  int ans = 0;\n  for (int i = 0; i < n - 1; i++) {\n    ans += a[i];\n  }\n  for (int i = 0; i < n - 1; i++) {\n    ans += b[i];\n  }\n\n  cout << ans;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> n;\n      |   ^~~\ntest.cpp:5:3: error: \u2018vector\u2019 was not declared in this scope\n    5 |   vector<int> a(n - 1);\n      |   ^~~~~~\ntest.cpp:5:10: error: expected primary-expression before \u2018int\u2019\n    5 |   vector<int> a(n - 1);\n      |          ^~~\ntest.cpp:6:10: error: \u2018a\u2019 was not declared in this scope\n    6 |   cin >> a[0] >> a[1] >> ... >> a[n - 2];\n      |          ^\ntest.cpp:8:10: error: expected primary-expression before \u2018int\u2019\n    8 |   vector<int> b(n);\n      |          ^~~\ntest.cpp:9:10: error: \u2018b\u2019 was not declared in this scope\n    9 |   cin >> b[0] >> b[1] >> ... >> b[n - 1];\n      |          ^\ntest.cpp:19:3: error: \u2018cout\u2019 was not declared in this scope\n   19 |   cout << ans;\n      |   ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/32", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring solve(int x, int y) {\n  int a = x;\n  int b = y;\n  string ans = \"\";\n\n  while (a > 0 || b > 0) {\n    int min = min(a, b);\n    a -= min;\n    b -= min;\n    ans += to_string(min) + string(min, 'A') + string(min, 'B');\n  }\n\n  if (ans.length() == 0) {\n    return \"Impossible\";\n  }\n\n  return ans;\n}\n\nint main() {\n  int x, y;\n  cin >> x;\n  cin >> y;\n\n  string answer = solve(x, y);\n\n  cout << answer;\n\n  return 0;\n}\n", "testcases": [{"input": "1 4", "output": "3B"}, {"input": "2 2", "output": "Impossible"}, {"input": "3 2", "output": "1A1B"}, {"input": "2 1", "output": "1A"}, {"input": "5 3", "output": "1A1B1A"}, {"input": "5 2", "output": "2A1B"}, {"input": "8 5", "output": "1A1B1A1B"}, {"input": "97 101", "output": "1B24A3B"}, {"input": "1 3", "output": "2B"}, {"input": "1000000000000000000 999999999999999999", "output": "1A999999999999999998B"}, {"input": "55 89", "output": "1B1A1B1A1B1A1B1A1B"}, {"input": "610 987", "output": "1B1A1B1A1B1A1B1A1B1A1B1A1B1A"}, {"input": "4181 6765", "output": "1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A"}, {"input": "46368 75025", "output": "1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B"}, {"input": "832040 514229", "output": "1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B"}, {"input": "5702887 9227465", "output": "1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B"}, {"input": "701408733 433494437", "output": "1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B"}, {"input": "956722026041 591286729879", "output": "1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A"}, {"input": "498454011879264 806515533049393", "output": "1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B"}, {"input": "420196140727489673 679891637638612258", "output": "1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B1A1B"}, {"input": "1000000000000000000 1000000000000000000", "output": "Impossible"}, {"input": "1000000000000000000 1", "output": "999999999999999999A"}, {"input": "2 1000000000000000000", "output": "Impossible"}, {"input": "999999999999999999 999999999999999998", "output": "1A999999999999999997B"}, {"input": "616274828435574301 10268395600356301", "output": "60A60B60A60B60A60B60A60B60A60B"}, {"input": "10808314049304201 270039182096201", "output": "40A40B40A40B40A40B40A40B40A40B"}, {"input": "1000100020001 100010001", "output": "10000A10000B10000A"}, {"input": "152139002499 367296043199", "output": "2B2A2B2A2B2A2B2A2B2A2B2A2B2A2B2A2B2A2B2A2B2A2B2A2B2A2B2A2B2A"}, {"input": "25220791 839761", "output": "30A30B30A30B30A"}, {"input": "27961 931", "output": "30A30B30A"}, {"input": "127601 6382601", "output": "50B50A50B50A"}, {"input": "1 1000000000000000000", "output": "999999999999999999B"}, {"input": "242 100", "output": "Impossible"}, {"input": "507769900974602687 547261784951014891", "output": "Impossible"}, {"input": "585026192452577797 570146946822492493", "output": "1A38B3A7B23A2B1A1B1A8B2A1B5A117B2A1B1A2B12A3B10A5B3A2B3A11B2A1B7A"}, {"input": "568679881256193737 513570106829158157", "output": "1A9B3A7B2A3B1A1B1A2B3A2B1A3B2A82B1A7B2A14B2A1B1A4B5A3B2A1B9A1B2A1B4A1B3A1B3A2B"}, {"input": "567036128564717939 510505130335113937", "output": "1A9B32A1B2A1B368A1B1A1B2A4B1A1B23A14B21A5B1A1B2A4B1A1B3A1B1A1B3A1B5A1B1A9B"}, {"input": "519421744863260201 572972909476222789", "output": "1B9A1B2A3B21A1B1A21B2A1B2A12B1A4B1A1B5A160B4A1B1A138B1A1B9A4B3A2B6A"}, {"input": "529495319593227313 631186172547690847", "output": "1B5A4B1A4B1A76B3A2B11A3B7A5B1A1B2A2B7A2B2A8B5A3B143A1B3A8B1A5B1A"}, {"input": "540431588408227541 540431588408227541", "output": "Impossible"}, {"input": "410218934960967047 378596216455001869", "output": "Impossible"}, {"input": "395130552422107969 382562323268297483", "output": "Impossible"}, {"input": "416445288135075809 416445288135075809", "output": "Impossible"}, {"input": "402725448165665593 481342602240996343", "output": "1B5A8B6A2B2A1B20A3B9A5B2A1B4A5B2A4B1A268B9A4B1A1B4A3B2A2B1A2B1A1B3A"}, {"input": "412177780967225699 432177937877609093", "output": "1B20A1B1A1B1A3B1A58B1A4B1A13B206A2B2A5B5A22B3A45B1A7B5A1B1A6B1A1B"}, {"input": "423506197818989927 442863139846534733", "output": "1B21A1B7A4B76A1B3A2B82A1B18A4B1A13B1A3B6A1B1A2B1A22B1A3B2A1B1A2B27A"}, {"input": "453151988636162147 474019690903735841", "output": "1B21A1B2A1B1A16B1A1B1A4B300A1B4A1B11A47B1A6B8A1B1A1B1A2B2A5B3A2B1A7B1A5B1A"}, {"input": "408962762283480959 444443583457646111", "output": "1B11A1B1A9B253A1B5A22B6A1B11A4B3A2B1A1B4A1B13A2B4A1B50A1B6A1B5A3B"}, {"input": "976540997167958951 969335176443917693", "output": "1A134B1A1B11A3B26A2B3A1B1A2B22A1B3A3B1A1B66A63B36A2B1A13B5A3B"}, {"input": "957591654759084713 981022104435698593", "output": "1B40A1B6A1B1A1B68A1B18A2B3A1B2A2B2A1B1A4B1A3B2A1B12A3B604A5B1A1B39A1B1A"}, {"input": "962890278562476113 969978235623119279", "output": "1B135A1B5A1B1A1B1A2B1A1B3A4B2A1B2A2B1A5B3A1B2A2B2A1B2A1B3A2B67A1B1A6B3A1B14A1B3A19B"}, {"input": "963716517445592213 976351630941239591", "output": "1B76A3B1A1B1A52B1A6B2A7B35A1B1A2B17A5B5A4B5A9B3A2B13A1B2A3B1A7B"}, {"input": "964542760623675601 965233603018687501", "output": "1B1396A5B2A4B2A2B1A18B4A1B1A1B2A3B3A1B10A2B3A1B3A1B5A1B1A1B2A10B3A9B1A1B3A2B"}, {"input": "977367244641009653 977367244641009653", "output": "Impossible"}], "language": "cpp"}, "prompt": "E. Alice, Bob, Oranges and Apples\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nAlice and Bob decided to eat some fruit. In the kitchen they found a large bag of oranges and apples. Alice immediately took an orange for herself, Bob took an apple. To make the process of sharing the remaining fruit more fun, the friends decided to play a game. They put multiple cards and on each one they wrote a letter, either 'A', or the letter 'B'. Then they began to remove the cards one by one from left to right, every time they removed a card with the letter 'A', Alice gave Bob all the fruits she had at that moment and took out of the bag as many apples and as many oranges as she had before. Thus the number of oranges and apples Alice had, did not change. If the card had written letter 'B', then Bob did the same, that is, he gave Alice all the fruit that he had, and took from the bag the same set of fruit. After the last card way removed, all the fruit in the bag were over.\nYou know how many oranges and apples was in the bag at first. Your task is to find any sequence of cards that Alice and Bob could have played with.\nInput\nThe first line of the input contains two integers, x, y (1 <= x, y <= 1018, xy > 1) - the number of oranges and apples that were initially in the bag.\nOutput\nPrint any sequence of cards that would meet the problem conditions as a compressed string of characters 'A' and 'B. That means that you need to replace the segments of identical consecutive characters by the number of repetitions of the characters and the actual character. For example, string AAABAABBB should be replaced by string 3A1B2A3B, but cannot be replaced by 2A1A1B2A3B or by 3AB2A3B. See the samples for clarifications of the output format. The string that you print should consist of at most 106 characters. It is guaranteed that if the answer exists, its compressed representation exists, consisting of at most 106 characters. If there are several possible answers, you are allowed to print any of them.\nIf the sequence of cards that meet the problem statement does not not exist, print a single word Impossible.\n", "generation": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring solve(int x, int y) {\n  int a = x;\n  int b = y;\n  string ans = \"\";\n\n  while (a > 0 || b > 0) {\n    int min = min(a, b);\n    a -= min;\n    b -= min;\n    ans += to_string(min) + string(min, 'A') + string(min, 'B');\n  }\n\n  if (ans.length() == 0) {\n    return \"Impossible\";\n  }\n\n  return ans;\n}\n\nint main() {\n  int x, y;\n  cin >> x;\n  cin >> y;\n\n  string answer = solve(x, y);\n\n  cout << answer;\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018std::string solve(int, int)\u2019:\ntest.cpp:12:23: error: \u2018min\u2019 cannot be used as a function\n   12 |     int min = min(a, b);\n      |                       ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/36", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring occur(string t, string s) {\n  string ans = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    if (t.find(s[i]) != string::npos) {\n      ans += '1';\n    } else {\n      ans += '0';\n    }\n  }\n  return ans;\n}\n\nint main() {\n  int n, q;\n  cin >> n;\n  cin >> q;\n\n  vector<string> v(n);\n  for (int i = 0; i < n; i++) {\n    cin >> v[i];\n  }\n\n  for (int i = 0; i < q; i++) {\n    int l, r, k;\n    cin >> l;\n    cin >> r;\n    cin >> k;\n\n    string s = occur(v[k - 1], v[l]) + string(r - l + 1, '0');\n    int ans = stoi(s);\n    cout << ans << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "5 5\na\nab\nabab\nababab\nb\n1 5 4\n3 5 4\n1 5 2\n1 5 3\n1 4 1", "output": "12\n6\n3\n7\n1"}, {"input": "5 10\nudo\nwzb\nlt\ny\ns\n3 4 2\n1 2 1\n5 5 1\n3 5 5\n1 2 5\n4 4 1\n2 4 5\n5 5 5\n1 3 5\n4 5 1", "output": "0\n1\n0\n1\n0\n0\n0\n1\n0\n0"}, {"input": "1 1\na\n1 1 1", "output": "1"}, {"input": "1 3\nf\n1 1 1\n1 1 1\n1 1 1", "output": "1\n1\n1"}, {"input": "2 6\nab\nab\n1 2 1\n1 2 2\n1 1 1\n1 1 2\n2 2 1\n2 2 2", "output": "2\n2\n1\n1\n1\n1"}, {"input": "3 1\na\nb\nab\n1 3 2", "output": "1"}], "language": "cpp"}, "prompt": "F. Duff is Mad\ntime limit per test\n4 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nDuff is mad at her friends. That's why she sometimes makes Malek to take candy from one of her friends for no reason!\nShe has n friends. Her i-th friend's name is si (their names are not necessarily unique). q times, she asks Malek to take candy from her friends. She's angry, but also she acts with rules. When she wants to ask Malek to take candy from one of her friends, like k, she chooses two numbers l and r and tells Malek to take exactly  candies from him/her, where occur(t, s) is the number of occurrences of string t in s.\nMalek is not able to calculate how many candies to take in each request from Duff. That's why she asked for your help. Please tell him how many candies to take in each request.\nInput\nThe first line of input contains two integers n and q (1 <= n, q <= 105).\nThe next n lines contain the names. i-th of them contains an string si, consisting of lowercase English letters ().\nThe next q lines contain the requests. Each of them contains three integers, l, r and k (says that Malek should take  candies from Duff's k-th friend).\nOutput\nPrint the answer to each request in one line.\n", "generation": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring occur(string t, string s) {\n  string ans = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    if (t.find(s[i]) != string::npos) {\n      ans += '1';\n    } else {\n      ans += '0';\n    }\n  }\n  return ans;\n}\n\nint main() {\n  int n, q;\n  cin >> n;\n  cin >> q;\n\n  vector<string> v(n);\n  for (int i = 0; i < n; i++) {\n    cin >> v[i];\n  }\n\n  for (int i = 0; i < q; i++) {\n    int l, r, k;\n    cin >> l;\n    cin >> r;\n    cin >> k;\n\n    string s = occur(v[k - 1], v[l]) + string(r - l + 1, '0');\n    int ans = stoi(s);\n    cout << ans << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:24:3: error: \u2018vector\u2019 was not declared in this scope\n   24 |   vector<string> v(n);\n      |   ^~~~~~\ntest.cpp:4:1: note: \u2018std::vector\u2019 is defined in header \u2018<vector>\u2019; did you forget to \u2018#include <vector>\u2019?\n    3 | #include <algorithm>\n  +++ |+#include <vector>\n    4 | \ntest.cpp:24:16: error: expected primary-expression before \u2018>\u2019 token\n   24 |   vector<string> v(n);\n      |                ^\ntest.cpp:24:18: error: \u2018v\u2019 was not declared in this scope\n   24 |   vector<string> v(n);\n      |                  ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/37", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool isMatching(vector<int> &graph, vector<int> &color, vector<int> &time, int k) {\n  vector<int> degree(graph.size(), 0);\n  for (int i = 0; i < graph.size(); i++) {\n    degree[graph[i]]++;\n  }\n  for (int i = 0; i < k; i++) {\n    if (degree[color[i]] > 1) {\n      return false;\n    }\n  }\n  return true;\n}\n\nint main() {\n  int n, m;\n  cin >> n;\n  cin >> m;\n\n  vector<int> graph(m);\n  vector<int> color(m);\n  vector<int> time(m);\n\n  for (int i = 0; i < m; i++) {\n    cin >> graph[i];\n    cin >> color[i];\n    cin >> time[i];\n  }\n\n  vector<int> matching;\n  int t = 0;\n  if (isMatching(graph, color, time, t)) {\n    cout << \"Yes\" << endl;\n    cout << t << \" \" << k << endl;\n    for (int i = 0; i < k; i++) {\n      cout << matching[i] << \" \";\n    }\n  } else {\n    cout << \"No\" << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "5 7\n2 1 3 7\n3 1 1 6\n5 4 1 8\n4 5 1 1\n3 2 2 3\n4 5 2 5\n2 3 2 4", "output": "Yes\n3 2\n4 5"}, {"input": "3 5\n3 2 1 3\n1 3 1 1\n3 2 1 4\n1 3 2 2\n1 3 2 10", "output": "No"}, {"input": "3 5\n2 1 608591421 720962564\n3 2 608591421 641991574\n3 2 718110706 353409763\n2 3 482786015 858341723\n3 2 825397574 357507279", "output": "Yes\n641991574 1\n2"}, {"input": "2 1\n2 1 317425595 636156322", "output": "Yes\n0 0"}, {"input": "43 934\n38 2 459603465 477080654\n13 31 459603465 567406517\n32 34 983708117 375408450\n34 28 983708117 979130594\n41 9 935943980 128603764\n32 28 983708117 965745337\n19 8 116204408 357616103\n26 29 300346353 815947991\n20 41 300346353 456245880\n15 5 983708117 11267022\n33 2 459603465 942848011\n34 23 503240133 484582315\n39 23 503240133 514227051\n15 12 247278803 67224725\n11 32 116204408 898768895\n27 36 429480095 794883562\n34 7 503240133 342199753\n2 34 983708117 105272581\n22 35 741981403 620127797...", "output": "No"}, {"input": "50000 1\n20845 28516 904146168 997637433", "output": "Yes\n0 0"}], "language": "cpp"}, "prompt": "D. Duff in Mafia\ntime limit per test\n6 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nDuff is one if the heads of Mafia in her country, Andarz Gu. Andarz Gu has n cities (numbered from 1 to n) connected by m bidirectional roads (numbered by 1 to m).\nEach road has a destructing time, and a color. i-th road connects cities vi and ui and its color is ci and its destructing time is ti.\nMafia wants to destruct a matching in Andarz Gu. A matching is a subset of roads such that no two roads in this subset has common endpoint. They can destruct these roads in parallel, i. e. the total destruction time is a maximum over destruction times of all selected roads.\nThey want two conditions to be satisfied:\nThe remaining roads form a proper coloring.\nDestructing time of this matching is minimized.\nThe remaining roads after destructing this matching form a proper coloring if and only if no two roads of the same color have same endpoint, or, in the other words, edges of each color should form a matching.\nThere is no programmer in Mafia. That's why Duff asked for your help. Please help her and determine which matching to destruct in order to satisfied those conditions (or state that this is not possible).\nInput\nThe first line of input contains two integers n and m (2 <= n <= 5 * 104 and 1 <= m <= 5 * 104), number of cities and number of roads in the country.\nThe next m lines contain the the roads. i - th of them contains four integers vi, ui, ci and ti (1 <= vi, ui <= n, vi != ui and 1 <= ci, ti <= 109 for each 1 <= i <= m).\nOutput\nIn the first line of input, print \"Yes\" (without quotes) if satisfying the first condition is possible and \"No\" (without quotes) otherwise.\nIf it is possible, then you have to print two integers t and k in the second line, the minimum destructing time and the number of roads in the matching ().\nIn the third line print k distinct integers separated by spaces, indices of the roads in the matching in any order. Roads are numbered starting from one in order of their appearance in the input.\nIf there's more than one solution, print any of them.\n", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool isMatching(vector<int> &graph, vector<int> &color, vector<int> &time, int k) {\n  vector<int> degree(graph.size(), 0);\n  for (int i = 0; i < graph.size(); i++) {\n    degree[graph[i]]++;\n  }\n  for (int i = 0; i < k; i++) {\n    if (degree[color[i]] > 1) {\n      return false;\n    }\n  }\n  return true;\n}\n\nint main() {\n  int n, m;\n  cin >> n;\n  cin >> m;\n\n  vector<int> graph(m);\n  vector<int> color(m);\n  vector<int> time(m);\n\n  for (int i = 0; i < m; i++) {\n    cin >> graph[i];\n    cin >> color[i];\n    cin >> time[i];\n  }\n\n  vector<int> matching;\n  int t = 0;\n  if (isMatching(graph, color, time, t)) {\n    cout << \"Yes\" << endl;\n    cout << t << \" \" << k << endl;\n    for (int i = 0; i < k; i++) {\n      cout << matching[i] << \" \";\n    }\n  } else {\n    cout << \"No\" << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:39:25: error: \u2018k\u2019 was not declared in this scope\n   39 |     cout << t << \" \" << k << endl;\n      |                         ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/38", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> graph[105];\nvector<int> people[105];\nvector<int> ans;\n\nvoid dfs(int current, int parent, vector<int> &v) {\n  v.push_back(current);\n  for(int i = 0; i < graph[current].size(); i++) {\n    if(parent != graph[current][i]) {\n      dfs(graph[current][i], current, v);\n    }\n  }\n}\n\nint main() {\n  int n, m, q;\n  cin >> n;\n  cin >> m;\n  cin >> q;\n\n  for(int i = 0; i < m; i++) {\n    int v, u;\n    cin >> v;\n    cin >> u;\n    graph[v].push_back(u);\n    graph[u].push_back(v);\n  }\n\n  for(int i = 0; i < n; i++) {\n    cin >> people[i];\n  }\n\n  for(int i = 0; i < q; i++) {\n    int v, u, a;\n    cin >> v;\n    cin >> u;\n    cin >> a;\n\n    vector<int> v_path;\n    dfs(v, 0, v_path);\n\n    int k = min(a, (int)v_path.size());\n    for(int i = 0; i < k; i++) {\n      ans.push_back(people[v_path[i]]);\n    }\n\n    cout << k << \" \";\n    for(int i = 0; i < k; i++) {\n      cout << ans[i] << \" \";\n    }\n    cout << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "5 4 5\n1 3\n1 2\n1 4\n4 5\n2 1 4 3\n4 5 6\n1 5 2\n5 5 10\n2 3 3\n5 3 1", "output": "1 3\n2 2 3\n0\n3 1 2 4\n1 2"}, {"input": "1 1 1\n1\n1 1 3", "output": "1 1"}, {"input": "5 1 1\n2 3\n3 5\n4 3\n3 1\n5\n4 2 7", "output": "0"}, {"input": "5 5 5\n2 5\n3 2\n2 1\n4 2\n1 3 5 1 1\n2 4 10\n5 4 3\n4 2 6\n1 4 6\n3 2 8", "output": "0\n1 3\n0\n3 1 4 5\n1 2"}, {"input": "5 5 5\n4 1\n4 2\n3 5\n3 2\n2 1 5 1 5\n5 3 1\n4 5 3\n1 5 8\n3 2 1\n1 5 6", "output": "1 3\n3 1 3 5\n5 1 2 3 4 5\n1 1\n5 1 2 3 4 5"}, {"input": "5 5 5\n1 2\n1 4\n4 3\n4 5\n4 5 4 5 5\n2 3 2\n5 5 6\n5 1 3\n2 2 9\n1 1 5", "output": "2 1 3\n3 2 4 5\n3 1 2 3\n0\n0"}], "language": "cpp"}, "prompt": "C. Duff in the Army\ntime limit per test\n4 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nRecently Duff has been a soldier in the army. Malek is her commander.\nTheir country, Andarz Gu has n cities (numbered from 1 to n) and n - 1 bidirectional roads. Each road connects two different cities. There exist a unique path between any two cities.\nThere are also m people living in Andarz Gu (numbered from 1 to m). Each person has and ID number. ID number of i - th person is i and he/she lives in city number ci. Note that there may be more than one person in a city, also there may be no people living in the city.\nMalek loves to order. That's why he asks Duff to answer to q queries. In each query, he gives her numbers v, u and a.\nTo answer a query:\nAssume there are x people living in the cities lying on the path from city v to city u. Assume these people's IDs are p1, p2, ..., px in increasing order.\nIf k = min(x, a), then Duff should tell Malek numbers k, p1, p2, ..., pk in this order. In the other words, Malek wants to know a minimums on that path (or less, if there are less than a people).\nDuff is very busy at the moment, so she asked you to help her and answer the queries.\nInput\nThe first line of input contains three integers, n, m and q (1 <= n, m, q <= 105).\nThe next n - 1 lines contain the roads. Each line contains two integers v and u, endpoints of a road (1 <= v, u <= n, v != u).\nNext line contains m integers c1, c2, ..., cm separated by spaces (1 <= ci <= n for each 1 <= i <= m).\nNext q lines contain the queries. Each of them contains three integers, v, u and a (1 <= v, u <= n and 1 <= a <= 10).\nOutput\nFor each query, print numbers k, p1, p2, ..., pk separated by spaces in one line.\n", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> graph[105];\nvector<int> people[105];\nvector<int> ans;\n\nvoid dfs(int current, int parent, vector<int> &v) {\n  v.push_back(current);\n  for(int i = 0; i < graph[current].size(); i++) {\n    if(parent != graph[current][i]) {\n      dfs(graph[current][i], current, v);\n    }\n  }\n}\n\nint main() {\n  int n, m, q;\n  cin >> n;\n  cin >> m;\n  cin >> q;\n\n  for(int i = 0; i < m; i++) {\n    int v, u;\n    cin >> v;\n    cin >> u;\n    graph[v].push_back(u);\n    graph[u].push_back(v);\n  }\n\n  for(int i = 0; i < n; i++) {\n    cin >> people[i];\n  }\n\n  for(int i = 0; i < q; i++) {\n    int v, u, a;\n    cin >> v;\n    cin >> u;\n    cin >> a;\n\n    vector<int> v_path;\n    dfs(v, 0, v_path);\n\n    int k = min(a, (int)v_path.size());\n    for(int i = 0; i < k; i++) {\n      ans.push_back(people[v_path[i]]);\n    }\n\n    cout << k << \" \";\n    for(int i = 0; i < k; i++) {\n      cout << ans[i] << \" \";\n    }\n    cout << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:35:9: error: no match for \u2018operator>>\u2019 (operand types are \u2018std::istream\u2019 {aka \u2018std::basic_istream<char>\u2019} and \u2018std::vector<int>\u2019)\n   35 |     cin >> people[i];\n      |     ~~~ ^~ ~~~~~~~~~\n      |     |              |\n      |     |              std::vector<int>\n      |     std::istream {aka std::basic_istream<char>}\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:120:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__istream_type& (*)(std::basic_istream<_CharT, _Traits>::__istream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:120:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__istream_type& (*)(std::basic_istream<char>::__istream_type&)\u2019 {aka \u2018std::basic_istream<char>& (*)(std::basic_istream<char>&)\u2019}\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:124:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__ios_type& (*)(std::basic_istream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>; std::basic_istream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]\u2019\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:124:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__ios_type& (*)(std::basic_istream<char>::__ios_type&)\u2019 {aka \u2018std::basic_ios<char>& (*)(std::basic_ios<char>&)\u2019}\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:131:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:131:30: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::ios_base& (*)(std::ios_base&)\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |                  ~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:168:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(bool&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  168 |       operator>>(bool& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:168:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018bool&\u2019\n  168 |       operator>>(bool& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:172:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(short int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  172 |       operator>>(short& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:172:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short int&\u2019\n  172 |       operator>>(short& __n);\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:175:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(short unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  175 |       operator>>(unsigned short& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:175:34: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short unsigned int&\u2019\n  175 |       operator>>(unsigned short& __n)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:179:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  179 |       operator>>(int& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:179:23: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018int&\u2019\n  179 |       operator>>(int& __n);\n      |                  ~~~~~^~~\n/usr/include/c++/9/istream:182:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  182 |       operator>>(unsigned int& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:182:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018unsigned int&\u2019\n  182 |       operator>>(unsigned int& __n)\n      |                  ~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:186:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  186 |       operator>>(long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:186:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long int&\u2019\n  186 |       operator>>(long& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:190:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  190 |       operator>>(unsigned long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:190:33: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long unsigned int&\u2019\n  190 |       operator>>(unsigned long& __n)\n      |                  ~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:195:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  195 |       operator>>(long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:195:29: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long int&\u2019\n  195 |       operator>>(long long& __n)\n      |                  ~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:199:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:199:38: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long unsigned int&\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |                  ~~~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:214:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(float&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  214 |       operator>>(float& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:214:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018float&\u2019\n  214 |       operator>>(float& __f)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:218:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  218 |       operator>>(double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:218:26: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018double&\u2019\n  218 |       operator>>(double& __f)\n      |                  ~~~~~~~~^~~\n/usr/include/c++/9/istream:222:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  222 |       operator>>(long double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:222:31: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long double&\u2019\n  222 |       operator>>(long double& __f)\n      |                  ~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:235:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(void*&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  235 |       operator>>(void*& __p)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:235:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018void*&\u2019\n  235 |       operator>>(void*& __p)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:259:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]\u2019\n  259 |       operator>>(__streambuf_type* __sb);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:259:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__streambuf_type*\u2019 {aka \u2018std::basic_streambuf<char>*\u2019}\n  259 |       operator>>(__streambuf_type* __sb);\n      |                  ~~~~~~~~~~~~~~~~~~^~~~\nIn file included from /usr/include/c++/9/string:56,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/ostream:38,\n                 from /usr/include/c++/9/iostream:39,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 1466 |     operator>>(basic_istream<_CharT, _Traits>& __in,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note:   template argument deduction/substitution failed:\ntest.cpp:35:20: note:   \u2018std::vector<int>\u2019 is not derived from \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\n   35 |     cin >> people[i];\n      |                    ^\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:931:5: note: candidate: \u2018template<class _CharT, class _Traits> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT&)\u2019\n  931 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:931:5: note:   template argument deduction/substitution failed:\ntest.cpp:35:20: note:   deduced conflicting types for parameter \u2018_CharT\u2019 (\u2018char\u2019 and \u2018std::vector<int>\u2019)\n   35 |     cin >> people[i];\n      |                    ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:756:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char&)\u2019\n  756 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:756:5: note:   template argument deduction/substitution failed:\ntest.cpp:35:20: note:   cannot convert \u2018people[i]\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char&\u2019\n   35 |     cin >> people[i];\n      |            ~~~~~~~~^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:761:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char&)\u2019\n  761 |     operator>>(basic_istream<char, _Traits>& __in, signed char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:761:5: note:   template argument deduction/substitution failed:\ntest.cpp:35:20: note:   cannot convert \u2018people[i]\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char&\u2019\n   35 |     cin >> people[i];\n      |            ~~~~~~~~^\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:963:5: note: candidate: \u2018template<class _CharT2, class _Traits2> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT2*)\u2019\n  963 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:963:5: note:   template argument deduction/substitution failed:\ntest.cpp:35:20: note:   mismatched types \u2018_CharT2*\u2019 and \u2018std::vector<int>\u2019\n   35 |     cin >> people[i];\n      |                    ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:803:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char*)\u2019\n  803 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:803:5: note:   template argument deduction/substitution failed:\ntest.cpp:35:20: note:   cannot convert \u2018people[i]\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char*\u2019\n   35 |     cin >> people[i];\n      |            ~~~~~~~~^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:808:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char*)\u2019\n  808 |     operator>>(basic_istream<char, _Traits>& __in, signed char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:808:5: note:   template argument deduction/substitution failed:\ntest.cpp:35:20: note:   cannot convert \u2018people[i]\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char*\u2019\n   35 |     cin >> people[i];\n      |            ~~~~~~~~^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:980:5: note: candidate: \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&)\u2019\n  980 |     operator>>(_Istream&& __is, _Tp&& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:980:5: note:   template argument deduction/substitution failed:\n/usr/include/c++/9/istream: In substitution of \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&) [with _Istream = std::basic_istream<char>&; _Tp = std::vector<int>&]\u2019:\ntest.cpp:35:20:   required from here\n/usr/include/c++/9/istream:980:5: error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false, std::basic_istream<char>&>\u2019\ntest.cpp:49:38: error: no matching function for call to \u2018std::vector<int>::push_back(std::vector<int>&)\u2019\n   49 |       ans.push_back(people[v_path[i]]);\n      |                                      ^\nIn file included from /usr/include/c++/9/vector:67,\n                 from test.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&) [with _Tp = int; _Alloc = std::allocator<int>; std::vector<_Tp, _Alloc>::value_type = int]\u2019\n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const int&\u2019}\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = int; _Alloc = std::allocator<int>; std::vector<_Tp, _Alloc>::value_type = int]\u2019\n 1200 |       push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::vector<int>::value_type&&\u2019 {aka \u2018int&&\u2019}\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/39", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> findKheshtaks(vector<int> &a, int l, int r) {\n  vector<int> kheshtaks;\n  for (int i = l - 1; i <= r - 1; i++) {\n    bool isKheshtak = false;\n    for (int j = i; j <= r - 1; j++) {\n      if (a[j] ^ a[i] == 0) {\n        isKheshtak = true;\n      }\n    }\n    if (isKheshtak) {\n      kheshtaks.push_back(1);\n    } else {\n      kheshtaks.push_back(0);\n    }\n  }\n  return kheshtaks;\n}\n\nint main() {\n  int n, q;\n  cin >> n;\n  cin >> q;\n\n  vector<int> a(n);\n  cin >> a[0];\n  for (int i = 1; i < n; i++) {\n    cin >> a[i];\n  }\n\n  vector<vector<int>> queries(q);\n  for (int i = 0; i < q; i++) {\n    int t;\n    cin >> t;\n    if (t == 1) {\n      int l, r, k;\n      cin >> l;\n      cin >> r;\n      cin >> k;\n      queries[i].push_back(l);\n      queries[i].push_back(r);\n      queries[i].push_back(k);\n    } else {\n      int l, r;\n      cin >> l;\n      cin >> r;\n      queries[i].push_back(l);\n      queries[i].push_back(r);\n    }\n  }\n\n  for (int i = 0; i < q; i++) {\n    vector<int> kheshtaks = findKheshtaks(a, queries[i][0], queries[i][1]);\n    cout << kheshtaks.size() << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "5 5\n1 2 3 4 2\n2 1 5\n1 2 2 8\n2 1 5\n1 1 3 10\n2 2 2", "output": "8\n16\n1"}, {"input": "1 1\n1667\n2 1 1", "output": "2"}, {"input": "10 10\n44 736 292 2551 231 0 88 3405 153 82\n2 5 9\n1 1 10 286128493\n2 6 8\n1 6 7 87\n2 9 10\n1 1 4 622\n2 9 10\n2 8 9\n2 6 8\n2 2 2", "output": "16\n8\n4\n4\n4\n8\n2"}, {"input": "10 30\n511 3072 28 1 0 0 2 29 4603 7\n2 6 10\n1 10 10 2625\n1 2 8 5672\n2 7 8\n2 2 10\n1 8 8 2457\n2 1 9\n2 8 9\n2 2 5\n2 7 10\n2 9 9\n2 10 10\n1 8 9 411416949\n2 7 9\n1 4 10 1221\n1 2 8 355\n1 7 7 7323\n2 6 9\n2 2 8\n2 1 6\n1 1 5 3170\n1 6 7 4\n1 4 8 9\n1 9 9 3363\n2 3 7\n1 1 9 15\n1 2 9 78\n1 4 6 4986\n1 10 10 0\n2 7 8", "output": "16\n4\n128\n256\n4\n16\n16\n2\n2\n8\n16\n64\n32\n32\n4"}, {"input": "1 3\n0\n2 1 1\n1 1 1 1000000000\n2 1 1", "output": "1\n2"}, {"input": "2 5\n0 0\n2 1 2\n1 1 1 4\n2 1 2\n1 1 2 2\n2 1 2", "output": "1\n2\n4"}], "language": "cpp"}, "prompt": "E. Duff as a Queen\ntime limit per test\n7 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nDuff is the queen of her country, Andarz Gu. She's a competitive programming fan. That's why, when he saw her minister, Malek, free, she gave her a sequence consisting of n non-negative integers, a1, a2, ..., an and asked him to perform q queries for her on this sequence.\nThere are two types of queries:\ngiven numbers l, r and k, Malek should perform  for each l <= i <= r (, bitwise exclusive OR of numbers a and b).\ngiven numbers l and r Malek should tell her the score of sequence al, al + 1, ... , ar.\nScore of a sequence b1, ..., bk is the number of its different Kheshtaks. A non-negative integer w is a Kheshtak of this sequence if and only if there exists a subsequence of b, let's denote it as bi1, bi2, ... , bix (possibly empty) such that  (1 <= i1 < i2 < ... < ix <= k). If this subsequence is empty, then w = 0.\nUnlike Duff, Malek is not a programmer. That's why he asked for your help. Please help him perform these queries.\nInput\nThe first line of input contains two integers, n and q (1 <= n <= 2 * 105 and 1 <= q <= 4 * 104).\nThe second line of input contains n integers, a1, a2, ..., an separated by spaces (0 <= ai <= 109 for each 1 <= i <= n).\nThe next q lines contain the queries. Each line starts with an integer t (1 <= t <= 2), type of the corresponding query. If t = 1, then there are three more integers in that line, l, r and k. Otherwise there are two more integers, l and r. (1 <= l <= r <= n and 0 <= k <= 109)\nOutput\nPrint the answer of each query of the second type in one line.\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> findKheshtaks(vector<int> &a, int l, int r) {\n  vector<int> kheshtaks;\n  for (int i = l - 1; i <= r - 1; i++) {\n    bool isKheshtak = false;\n    for (int j = i; j <= r - 1; j++) {\n      if (a[j] ^ a[i] == 0) {\n        isKheshtak = true;\n      }\n    }\n    if (isKheshtak) {\n      kheshtaks.push_back(1);\n    } else {\n      kheshtaks.push_back(0);\n    }\n  }\n  return kheshtaks;\n}\n\nint main() {\n  int n, q;\n  cin >> n;\n  cin >> q;\n\n  vector<int> a(n);\n  cin >> a[0];\n  for (int i = 1; i < n; i++) {\n    cin >> a[i];\n  }\n\n  vector<vector<int>> queries(q);\n  for (int i = 0; i < q; i++) {\n    int t;\n    cin >> t;\n    if (t == 1) {\n      int l, r, k;\n      cin >> l;\n      cin >> r;\n      cin >> k;\n      queries[i].push_back(l);\n      queries[i].push_back(r);\n      queries[i].push_back(k);\n    } else {\n      int l, r;\n      cin >> l;\n      cin >> r;\n      queries[i].push_back(l);\n      queries[i].push_back(r);\n    }\n  }\n\n  for (int i = 0; i < q; i++) {\n    vector<int> kheshtaks = findKheshtaks(a, queries[i][0], queries[i][1]);\n    cout << kheshtaks.size() << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: wrong answer @ testcase 1", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/40", "completion_id": 0, "test_suite": {"code": "int solve() {\n  int n;\n  cin >> n;\n  int mx = LLONG_MIN();\n  for (int i = 1; i * i <= n; i++) {\n    for (int j = i; j * i <= n; j++) {\n      int a = i * j;\n      if (a2 <= n && a > mx) {\n        mx = a;\n      }\n    }\n  }\n  cout << mx;\n  return 0;\n}\n", "testcases": [{"input": "10", "output": "10"}, {"input": "12", "output": "6"}, {"input": "1", "output": "1"}, {"input": "2", "output": "2"}, {"input": "4", "output": "2"}, {"input": "8", "output": "2"}, {"input": "3", "output": "3"}, {"input": "31", "output": "31"}, {"input": "97", "output": "97"}, {"input": "1000000000000", "output": "10"}, {"input": "15", "output": "15"}, {"input": "894", "output": "894"}, {"input": "271", "output": "271"}, {"input": "2457", "output": "273"}, {"input": "2829", "output": "2829"}, {"input": "5000", "output": "10"}, {"input": "20", "output": "10"}, {"input": "68", "output": "34"}, {"input": "3096", "output": "258"}, {"input": "1024", "output": "2"}, {"input": "1048576", "output": "2"}, {"input": "413933789280", "output": "25870861830"}, {"input": "817634153013", "output": "817634153013"}, {"input": "56517269141", "output": "56517269141"}, {"input": "30707328551", "output": "30707328551"}, {"input": "279564127218", "output": "10354226934"}, {"input": "491159577042", "output": "18191095446"}, {"input": "734337660466", "output": "734337660466"}, {"input": "808453785117", "output": "808453785117"}, {"input": "55926835837", "output": "55926835837"}, {"input": "294809951965", "output": "294809951965"}, {"input": "537988035389", "output": "76855433627"}, {"input": "822722434952", "output": "205680608738"}, {"input": "699511759613", "output": "699511759613"}, {"input": "942689843037", "output": "104743315893"}, {"input": "663634158717", "output": "663634158717"}, {"input": "213612977250", "output": "11730"}, {"input": "999999999989", "output": "999999999989"}, {"input": "999999999988", "output": "499999999994"}, {"input": "87178291200", "output": "30030"}, {"input": "927668721948", "output": "463834360974"}, {"input": "562436815639", "output": "37927"}, {"input": "302981118597", "output": "35853"}, {"input": "5", "output": "5"}, {"input": "9", "output": "3"}, {"input": "36", "output": "6"}, {"input": "2231", "output": "2231"}, {"input": "27648", "output": "6"}, {"input": "40320", "output": "210"}, {"input": "648000", "output": "30"}, {"input": "999966000289", "output": "999983"}, {"input": "999985999949", "output": "999985999949"}, {"input": "991921850317", "output": "9973"}], "language": "cpp"}, "prompt": "B. Duff in Love\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nDuff is in love with lovely numbers! A positive integer x is called lovely if and only if there is no such positive integer a > 1 such that a2 is a divisor of x.\nMalek has a number store! In his store, he has only divisors of positive integer n (and he has all of them). As a birthday present, Malek wants to give her a lovely number from his store. He wants this number to be as big as possible.\nMalek always had issues in math, so he asked for your help. Please tell him what is the biggest lovely number in his store.\nInput\nThe first and only line of input contains one integer, n (1 <= n <= 1012).\nOutput\nPrint the answer in one line.\n", "generation": "int solve() {\n  int n;\n  cin >> n;\n  int mx = LLONG_MIN();\n  for (int i = 1; i * i <= n; i++) {\n    for (int j = i; j * i <= n; j++) {\n      int a = i * j;\n      if (a2 <= n && a > mx) {\n        mx = a;\n      }\n    }\n  }\n  cout << mx;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int solve()\u2019:\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> n;\n      |   ^~~\ntest.cpp:4:12: error: \u2018LLONG_MIN\u2019 was not declared in this scope\n    4 |   int mx = LLONG_MIN();\n      |            ^~~~~~~~~\ntest.cpp:1:1: note: \u2018LLONG_MIN\u2019 is defined in header \u2018<climits>\u2019; did you forget to \u2018#include <climits>\u2019?\n  +++ |+#include <climits>\n    1 | int solve() {\ntest.cpp:8:11: error: \u2018a2\u2019 was not declared in this scope; did you mean \u2018a\u2019?\n    8 |       if (a2 <= n && a > mx) {\n      |           ^~\n      |           a\ntest.cpp:13:3: error: \u2018cout\u2019 was not declared in this scope\n   13 |   cout << mx;\n      |   ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/41", "completion_id": 0, "test_suite": {"code": "int main() {\n  int n;\n  cin >> n;\n\n  vector<int> a(n);\n  vector<int> p(n);\n\n  for (int i = 0; i < n; i++) {\n    cin >> a[i];\n    cin >> p[i];\n  }\n\n  long long total_cost = 0;\n  for (int i = 0; i < n; i++) {\n    total_cost += a[i] * p[i];\n  }\n\n  long long total_meat = 0;\n  for (int i = 0; i < n; i++) {\n    total_meat += a[i];\n  }\n\n  long long min_cost = total_cost - total_meat * p[0];\n\n  cout << min_cost;\n  return 0;\n}\n", "testcases": [{"input": "3\n1 3\n2 2\n3 1", "output": "10"}, {"input": "3\n1 3\n2 1\n3 2", "output": "8"}, {"input": "1\n39 52", "output": "2028"}, {"input": "2\n25 56\n94 17", "output": "2998"}, {"input": "5\n39 21\n95 89\n73 90\n9 55\n85 32", "output": "6321"}, {"input": "12\n70 11\n74 27\n32 11\n26 83\n57 18\n97 28\n75 43\n75 21\n84 29\n16 2\n89 63\n21 88", "output": "6742"}, {"input": "2\n100 68\n38 80", "output": "9384"}], "language": "cpp"}, "prompt": "A. Duff and Meat\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nDuff is addicted to meat! Malek wants to keep her happy for n days. In order to be happy in i-th day, she needs to eat exactly ai kilograms of meat.\nThere is a big shop uptown and Malek wants to buy meat for her from there. In i-th day, they sell meat for pi dollars per kilogram. Malek knows all numbers a1, ..., an and p1, ..., pn. In each day, he can buy arbitrary amount of meat, also he can keep some meat he has for the future.\nMalek is a little tired from cooking meat, so he asked for your help. Help him to minimize the total money he spends to keep Duff happy for n days.\nInput\nThe first line of input contains integer n (1 <= n <= 105), the number of days.\nIn the next n lines, i-th line contains two integers ai and pi (1 <= ai, pi <= 100), the amount of meat Duff needs and the cost of meat in that day.\nOutput\nPrint the minimum money needed to keep Duff happy for n days, in one line.\n", "generation": "int main() {\n  int n;\n  cin >> n;\n\n  vector<int> a(n);\n  vector<int> p(n);\n\n  for (int i = 0; i < n; i++) {\n    cin >> a[i];\n    cin >> p[i];\n  }\n\n  long long total_cost = 0;\n  for (int i = 0; i < n; i++) {\n    total_cost += a[i] * p[i];\n  }\n\n  long long total_meat = 0;\n  for (int i = 0; i < n; i++) {\n    total_meat += a[i];\n  }\n\n  long long min_cost = total_cost - total_meat * p[0];\n\n  cout << min_cost;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> n;\n      |   ^~~\ntest.cpp:5:3: error: \u2018vector\u2019 was not declared in this scope\n    5 |   vector<int> a(n);\n      |   ^~~~~~\ntest.cpp:5:10: error: expected primary-expression before \u2018int\u2019\n    5 |   vector<int> a(n);\n      |          ^~~\ntest.cpp:6:10: error: expected primary-expression before \u2018int\u2019\n    6 |   vector<int> p(n);\n      |          ^~~\ntest.cpp:9:12: error: \u2018a\u2019 was not declared in this scope\n    9 |     cin >> a[i];\n      |            ^\ntest.cpp:10:12: error: \u2018p\u2019 was not declared in this scope\n   10 |     cin >> p[i];\n      |            ^\ntest.cpp:15:19: error: \u2018a\u2019 was not declared in this scope\n   15 |     total_cost += a[i] * p[i];\n      |                   ^\ntest.cpp:15:26: error: \u2018p\u2019 was not declared in this scope\n   15 |     total_cost += a[i] * p[i];\n      |                          ^\ntest.cpp:20:19: error: \u2018a\u2019 was not declared in this scope\n   20 |     total_meat += a[i];\n      |                   ^\ntest.cpp:23:50: error: \u2018p\u2019 was not declared in this scope\n   23 |   long long min_cost = total_cost - total_meat * p[0];\n      |                                                  ^\ntest.cpp:25:3: error: \u2018cout\u2019 was not declared in this scope\n   25 |   cout << min_cost;\n      |   ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/42", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> graph[105];\nvector<int> people[105];\nvector<int> ans;\n\nvoid dfs(int current, int parent, vector<int> &v) {\n  v.push_back(current);\n  for(int i = 0; i < graph[current].size(); i++) {\n    if(parent != graph[current][i]) {\n      dfs(graph[current][i], current, v);\n    }\n  }\n}\n\nint main() {\n  int n, m, q;\n  cin >> n;\n  cin >> m;\n  cin >> q;\n\n  for(int i = 0; i < m; i++) {\n    int v, u;\n    cin >> v;\n    cin >> u;\n    graph[v].push_back(u);\n    graph[u].push_back(v);\n  }\n\n  for(int i = 0; i < n; i++) {\n    cin >> people[i];\n  }\n\n  for(int i = 0; i < q; i++) {\n    int v, u, a;\n    cin >> v;\n    cin >> u;\n    cin >> a;\n\n    vector<int> v_path;\n    dfs(v, 0, v_path);\n\n    int k = min(a, (int)v_path.size());\n    for(int i = 0; i < k; i++) {\n      ans.push_back(people[v_path[i]]);\n    }\n\n    cout << k << \" \";\n    for(int i = 0; i < k; i++) {\n      cout << ans[i] << \" \";\n    }\n    cout << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "5 4 5\n1 3\n1 2\n1 4\n4 5\n2 1 4 3\n4 5 6\n1 5 2\n5 5 10\n2 3 3\n5 3 1", "output": "1 3\n2 2 3\n0\n3 1 2 4\n1 2"}, {"input": "1 1 1\n1\n1 1 3", "output": "1 1"}, {"input": "5 1 1\n2 3\n3 5\n4 3\n3 1\n5\n4 2 7", "output": "0"}, {"input": "5 5 5\n2 5\n3 2\n2 1\n4 2\n1 3 5 1 1\n2 4 10\n5 4 3\n4 2 6\n1 4 6\n3 2 8", "output": "0\n1 3\n0\n3 1 4 5\n1 2"}, {"input": "5 5 5\n4 1\n4 2\n3 5\n3 2\n2 1 5 1 5\n5 3 1\n4 5 3\n1 5 8\n3 2 1\n1 5 6", "output": "1 3\n3 1 3 5\n5 1 2 3 4 5\n1 1\n5 1 2 3 4 5"}, {"input": "5 5 5\n1 2\n1 4\n4 3\n4 5\n4 5 4 5 5\n2 3 2\n5 5 6\n5 1 3\n2 2 9\n1 1 5", "output": "2 1 3\n3 2 4 5\n3 1 2 3\n0\n0"}], "language": "cpp"}, "prompt": "E. Duff in the Army\ntime limit per test\n4 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nRecently Duff has been a soldier in the army. Malek is her commander.\nTheir country, Andarz Gu has n cities (numbered from 1 to n) and n - 1 bidirectional roads. Each road connects two different cities. There exist a unique path between any two cities.\nThere are also m people living in Andarz Gu (numbered from 1 to m). Each person has and ID number. ID number of i - th person is i and he/she lives in city number ci. Note that there may be more than one person in a city, also there may be no people living in the city.\nMalek loves to order. That's why he asks Duff to answer to q queries. In each query, he gives her numbers v, u and a.\nTo answer a query:\nAssume there are x people living in the cities lying on the path from city v to city u. Assume these people's IDs are p1, p2, ..., px in increasing order.\nIf k = min(x, a), then Duff should tell Malek numbers k, p1, p2, ..., pk in this order. In the other words, Malek wants to know a minimums on that path (or less, if there are less than a people).\nDuff is very busy at the moment, so she asked you to help her and answer the queries.\nInput\nThe first line of input contains three integers, n, m and q (1 <= n, m, q <= 105).\nThe next n - 1 lines contain the roads. Each line contains two integers v and u, endpoints of a road (1 <= v, u <= n, v != u).\nNext line contains m integers c1, c2, ..., cm separated by spaces (1 <= ci <= n for each 1 <= i <= m).\nNext q lines contain the queries. Each of them contains three integers, v, u and a (1 <= v, u <= n and 1 <= a <= 10).\nOutput\nFor each query, print numbers k, p1, p2, ..., pk separated by spaces in one line.\n", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> graph[105];\nvector<int> people[105];\nvector<int> ans;\n\nvoid dfs(int current, int parent, vector<int> &v) {\n  v.push_back(current);\n  for(int i = 0; i < graph[current].size(); i++) {\n    if(parent != graph[current][i]) {\n      dfs(graph[current][i], current, v);\n    }\n  }\n}\n\nint main() {\n  int n, m, q;\n  cin >> n;\n  cin >> m;\n  cin >> q;\n\n  for(int i = 0; i < m; i++) {\n    int v, u;\n    cin >> v;\n    cin >> u;\n    graph[v].push_back(u);\n    graph[u].push_back(v);\n  }\n\n  for(int i = 0; i < n; i++) {\n    cin >> people[i];\n  }\n\n  for(int i = 0; i < q; i++) {\n    int v, u, a;\n    cin >> v;\n    cin >> u;\n    cin >> a;\n\n    vector<int> v_path;\n    dfs(v, 0, v_path);\n\n    int k = min(a, (int)v_path.size());\n    for(int i = 0; i < k; i++) {\n      ans.push_back(people[v_path[i]]);\n    }\n\n    cout << k << \" \";\n    for(int i = 0; i < k; i++) {\n      cout << ans[i] << \" \";\n    }\n    cout << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:35:9: error: no match for \u2018operator>>\u2019 (operand types are \u2018std::istream\u2019 {aka \u2018std::basic_istream<char>\u2019} and \u2018std::vector<int>\u2019)\n   35 |     cin >> people[i];\n      |     ~~~ ^~ ~~~~~~~~~\n      |     |              |\n      |     |              std::vector<int>\n      |     std::istream {aka std::basic_istream<char>}\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:120:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__istream_type& (*)(std::basic_istream<_CharT, _Traits>::__istream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:120:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__istream_type& (*)(std::basic_istream<char>::__istream_type&)\u2019 {aka \u2018std::basic_istream<char>& (*)(std::basic_istream<char>&)\u2019}\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:124:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__ios_type& (*)(std::basic_istream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>; std::basic_istream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]\u2019\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:124:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__ios_type& (*)(std::basic_istream<char>::__ios_type&)\u2019 {aka \u2018std::basic_ios<char>& (*)(std::basic_ios<char>&)\u2019}\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:131:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:131:30: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::ios_base& (*)(std::ios_base&)\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |                  ~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:168:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(bool&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  168 |       operator>>(bool& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:168:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018bool&\u2019\n  168 |       operator>>(bool& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:172:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(short int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  172 |       operator>>(short& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:172:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short int&\u2019\n  172 |       operator>>(short& __n);\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:175:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(short unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  175 |       operator>>(unsigned short& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:175:34: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short unsigned int&\u2019\n  175 |       operator>>(unsigned short& __n)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:179:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  179 |       operator>>(int& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:179:23: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018int&\u2019\n  179 |       operator>>(int& __n);\n      |                  ~~~~~^~~\n/usr/include/c++/9/istream:182:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  182 |       operator>>(unsigned int& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:182:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018unsigned int&\u2019\n  182 |       operator>>(unsigned int& __n)\n      |                  ~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:186:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  186 |       operator>>(long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:186:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long int&\u2019\n  186 |       operator>>(long& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:190:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  190 |       operator>>(unsigned long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:190:33: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long unsigned int&\u2019\n  190 |       operator>>(unsigned long& __n)\n      |                  ~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:195:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  195 |       operator>>(long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:195:29: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long int&\u2019\n  195 |       operator>>(long long& __n)\n      |                  ~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:199:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:199:38: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long unsigned int&\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |                  ~~~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:214:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(float&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  214 |       operator>>(float& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:214:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018float&\u2019\n  214 |       operator>>(float& __f)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:218:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  218 |       operator>>(double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:218:26: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018double&\u2019\n  218 |       operator>>(double& __f)\n      |                  ~~~~~~~~^~~\n/usr/include/c++/9/istream:222:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  222 |       operator>>(long double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:222:31: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long double&\u2019\n  222 |       operator>>(long double& __f)\n      |                  ~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:235:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(void*&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  235 |       operator>>(void*& __p)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:235:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018void*&\u2019\n  235 |       operator>>(void*& __p)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:259:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]\u2019\n  259 |       operator>>(__streambuf_type* __sb);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:259:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__streambuf_type*\u2019 {aka \u2018std::basic_streambuf<char>*\u2019}\n  259 |       operator>>(__streambuf_type* __sb);\n      |                  ~~~~~~~~~~~~~~~~~~^~~~\nIn file included from /usr/include/c++/9/string:56,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/ostream:38,\n                 from /usr/include/c++/9/iostream:39,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 1466 |     operator>>(basic_istream<_CharT, _Traits>& __in,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note:   template argument deduction/substitution failed:\ntest.cpp:35:20: note:   \u2018std::vector<int>\u2019 is not derived from \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\n   35 |     cin >> people[i];\n      |                    ^\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:931:5: note: candidate: \u2018template<class _CharT, class _Traits> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT&)\u2019\n  931 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:931:5: note:   template argument deduction/substitution failed:\ntest.cpp:35:20: note:   deduced conflicting types for parameter \u2018_CharT\u2019 (\u2018char\u2019 and \u2018std::vector<int>\u2019)\n   35 |     cin >> people[i];\n      |                    ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:756:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char&)\u2019\n  756 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:756:5: note:   template argument deduction/substitution failed:\ntest.cpp:35:20: note:   cannot convert \u2018people[i]\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char&\u2019\n   35 |     cin >> people[i];\n      |            ~~~~~~~~^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:761:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char&)\u2019\n  761 |     operator>>(basic_istream<char, _Traits>& __in, signed char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:761:5: note:   template argument deduction/substitution failed:\ntest.cpp:35:20: note:   cannot convert \u2018people[i]\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char&\u2019\n   35 |     cin >> people[i];\n      |            ~~~~~~~~^\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:963:5: note: candidate: \u2018template<class _CharT2, class _Traits2> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT2*)\u2019\n  963 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:963:5: note:   template argument deduction/substitution failed:\ntest.cpp:35:20: note:   mismatched types \u2018_CharT2*\u2019 and \u2018std::vector<int>\u2019\n   35 |     cin >> people[i];\n      |                    ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:803:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char*)\u2019\n  803 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:803:5: note:   template argument deduction/substitution failed:\ntest.cpp:35:20: note:   cannot convert \u2018people[i]\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char*\u2019\n   35 |     cin >> people[i];\n      |            ~~~~~~~~^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:808:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char*)\u2019\n  808 |     operator>>(basic_istream<char, _Traits>& __in, signed char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:808:5: note:   template argument deduction/substitution failed:\ntest.cpp:35:20: note:   cannot convert \u2018people[i]\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char*\u2019\n   35 |     cin >> people[i];\n      |            ~~~~~~~~^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:980:5: note: candidate: \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&)\u2019\n  980 |     operator>>(_Istream&& __is, _Tp&& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:980:5: note:   template argument deduction/substitution failed:\n/usr/include/c++/9/istream: In substitution of \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&) [with _Istream = std::basic_istream<char>&; _Tp = std::vector<int>&]\u2019:\ntest.cpp:35:20:   required from here\n/usr/include/c++/9/istream:980:5: error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false, std::basic_istream<char>&>\u2019\ntest.cpp:49:38: error: no matching function for call to \u2018std::vector<int>::push_back(std::vector<int>&)\u2019\n   49 |       ans.push_back(people[v_path[i]]);\n      |                                      ^\nIn file included from /usr/include/c++/9/vector:67,\n                 from test.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&) [with _Tp = int; _Alloc = std::allocator<int>; std::vector<_Tp, _Alloc>::value_type = int]\u2019\n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const int&\u2019}\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = int; _Alloc = std::allocator<int>; std::vector<_Tp, _Alloc>::value_type = int]\u2019\n 1200 |       push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::vector<int>::value_type&&\u2019 {aka \u2018int&&\u2019}\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/43", "completion_id": 0, "test_suite": {"code": "int main() {\n  int n;\n  cin >> n;\n  vector<int> w(n);\n  cin >> w;\n\n  long long ans = LLONG_MAX;\n  for (int i = 0; i < n; i++) {\n    long long sum = 0;\n    for (int j = 0; j < n; j++) {\n      if (w[j] <= w[i]) {\n        sum += w[j];\n      }\n    }\n    if (sum % 2 == 0) {\n      long long x = sum / 2;\n      ans = min(ans, x);\n    }\n  }\n\n  cout << ans;\n  return 0;\n}\n", "testcases": [{"input": "5\n1 1 2 3 3", "output": "2"}, {"input": "4\n0 1 2 3", "output": "4"}, {"input": "1\n120287", "output": "1"}, {"input": "2\n28288 0", "output": "2"}, {"input": "2\n95745 95745", "output": "1"}, {"input": "13\n92 194 580495 0 10855 41704 13 96429 33 213 0 92 140599", "output": "11"}, {"input": "13\n688743 688743 1975 688743 688743 688743 688743 688743 688743 0 0 688743 688743", "output": "4"}, {"input": "35\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "output": "3"}, {"input": "35\n130212 3176 77075 8071 18 1369 7539 1683 80757 1847 0 1374 122 8524 4 2 21333 270264 4 9254 151921 0 1 33596 73002 54382 0 1 29233 75952 15 38892 1877 6167 4", "output": "31"}, {"input": "35\n0 0 298 0 0 0 0 0 689063 65442 0 984598 2054 43668 0 369 0 2054 0 996220 0 16327 369 0 996220 0 0 0 4693 2054 348 0 118 0 0", "output": "16"}, {"input": "100\n196 1681 196 0 61 93 196 196 196 196 196 0 0 96 18 1576 0 93 666463 18 93 1 1278 8939 93 196 196 1278 3 0 67416 869956 10 56489 196 745 39 783 196 8939 196 81 69634 4552 39 3 14 20 25 8 10 4 7302 0 19579 20 1140 15990 7302 0 19579 4142 11 1354 75252 93 311 1278 0 79475 10 75252 93 7302 0 81 408441 19579 10 39 19 37748 4364 31135 47700 105818 47700 10 4142 543356 3 30647 45917 60714 8939 18 22925 7302 93 75252", "output": "59"}, {"input": "1000000\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...", "output": "7"}, {"input": "1000000\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...", "output": "7"}, {"input": "524288\noutput": "1"}, {"input": "524287\noutput": "19"}, {"input": "524288\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...", "output": "1"}], "language": "cpp"}, "prompt": "C. Duff and Weight Lifting\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nRecently, Duff has been practicing weight lifting. As a hard practice, Malek gave her a task. He gave her a sequence of weights. Weight of i-th of them is 2wi pounds. In each step, Duff can lift some of the remaining weights and throw them away. She does this until there's no more weight left. Malek asked her to minimize the number of steps.\nDuff is a competitive programming fan. That's why in each step, she can only lift and throw away a sequence of weights 2a1, ..., 2ak if and only if there exists a non-negative integer x such that 2a1 + 2a2 + ... + 2ak = 2x, i. e. the sum of those numbers is a power of two.\nDuff is a competitive programming fan, but not a programmer. That's why she asked for your help. Help her minimize the number of steps.\nInput\nThe first line of input contains integer n (1 <= n <= 106), the number of weights.\nThe second line contains n integers w1, ..., wn separated by spaces (0 <= wi <= 106 for each 1 <= i <= n), the powers of two forming the weights values.\nOutput\nPrint the minimum number of steps in a single line.\n", "generation": "int main() {\n  int n;\n  cin >> n;\n  vector<int> w(n);\n  cin >> w;\n\n  long long ans = LLONG_MAX;\n  for (int i = 0; i < n; i++) {\n    long long sum = 0;\n    for (int j = 0; j < n; j++) {\n      if (w[j] <= w[i]) {\n        sum += w[j];\n      }\n    }\n    if (sum % 2 == 0) {\n      long long x = sum / 2;\n      ans = min(ans, x);\n    }\n  }\n\n  cout << ans;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> n;\n      |   ^~~\ntest.cpp:4:3: error: \u2018vector\u2019 was not declared in this scope\n    4 |   vector<int> w(n);\n      |   ^~~~~~\ntest.cpp:4:10: error: expected primary-expression before \u2018int\u2019\n    4 |   vector<int> w(n);\n      |          ^~~\ntest.cpp:5:10: error: \u2018w\u2019 was not declared in this scope\n    5 |   cin >> w;\n      |          ^\ntest.cpp:7:19: error: \u2018LLONG_MAX\u2019 was not declared in this scope\n    7 |   long long ans = LLONG_MAX;\n      |                   ^~~~~~~~~\ntest.cpp:1:1: note: \u2018LLONG_MAX\u2019 is defined in header \u2018<climits>\u2019; did you forget to \u2018#include <climits>\u2019?\n  +++ |+#include <climits>\n    1 | int main() {\ntest.cpp:17:13: error: \u2018min\u2019 was not declared in this scope; did you mean \u2018main\u2019?\n   17 |       ans = min(ans, x);\n      |             ^~~\n      |             main\ntest.cpp:21:3: error: \u2018cout\u2019 was not declared in this scope\n   21 |   cout << ans;\n      |   ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/44", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nlong long mod = 1e9 + 7;\n\nlong long func(long long n, long long l, vector<long long> &a) {\n  long long ans = 0;\n  for (long long i = 0; i < l; i++) {\n    long long ai = a[i];\n    long long bi = ai % n;\n    long long cnt = 0;\n    for (long long j = 0; j < i; j++) {\n      if (bi <= a[j] && a[j] <= bi + 1) {\n        cnt++;\n      }\n    }\n    ans += cnt;\n  }\n  return ans;\n}\n\nint main() {\n  long long n, l, k;\n  cin >> n;\n  cin >> l;\n  cin >> k;\n\n  vector<long long> a(n);\n  for (long long i = 0; i < n; i++) {\n    cin >> a[i];\n  }\n\n  long long ans = func(n, l, a);\n\n  cout << ans << endl;\n\n  return 0;\n}\n", "testcases": [{"input": "3 5 3\n5 9 1", "output": "10"}, {"input": "5 10 3\n1 2 3 4 5", "output": "25"}, {"input": "1 1000000000000000000 1\n508953607", "output": "49"}, {"input": "13 1984343432234 32\n347580985 506695806 506695806 42598441 347580985 720568974 208035957 385072757 42598441 506695806 42598441 42598441 506695806", "output": "746224565"}, {"input": "1000000 7623874 1\n742902081 418127913 381287391 516721559 293556626 348162370 761118422 245907332 72113718 312434500 976375117 77245250 303375408 143374176 360536997 787443203 105214055 917698809 792891956 987806221 43064693 467020040 25547739 932880163 737305380 704238148 616273861 609274351 163530439 181446766 718992496 936484498 264906438 938739887 541816002 753494939 781625430 878815995 936729177 547266992 553315638 906432702 544012596 223591936 54666520 61559999 553772323 118295696 984531492 53524660...", "output": "7623874"}, {"input": "1 75937459749 1000000\n521563672", "output": "217941287"}, {"input": "300 8 3000\n896003122 120714853 602900362 932594484 319222293 524441588 617956672 433666354 527803819 456248158 688108602 586301715 467107315 199708190 489436085 935815909 180868420 278786478 92369495 829779348 433666354 660386260 407659083 272297327 896003122 277152989 527803819 583012814 617605995 674791584 978235232 633240038 955367162 490259918 331613336 546677819 974805627 319222293 232625867 771306860 527803819 17302859 776294291 309840243 923087144 364112692 748223264 748223264 849925563 733092951 8...", "output": "8"}, {"input": "1000 1000 1000\n91296404 163231558 533512873 279352947 613010772 621479569 405904903 43104062 464217149 281294355 169164729 768324922 785594921 983960894 941187578 121105168 333251929 293228626 339284655 168825999 381823392 191189756 454640114 547083503 675934967 915296571 835545818 371510737 939148914 624953335 13109943 668445605 538804919 781460770 824487436 231044710 356470808 36012033 166761615 444619098 865892874 990390505 88488613 887157432 497289177 23083289 375359862 876517688 808287853 20613374 89...", "output": "1000"}, {"input": "1000 1 1000\n766040241 824237226 712500756 648358920 720536724 486885123 937302921 842347960 899193759 617704707 261471565 461980506 816882007 801508411 261471565 722349845 856556228 5907686 514706788 743901264 535616166 530644794 551716621 220791575 740767159 136681210 411577068 147342471 189290852 231018532 277452501 195638549 771599886 787414866 518252930 661895787 981170582 14832194 335387826 816882007 754195011 415485388 197843006 847471467 324276279 35333646 388491893 284441817 911981558 486885123 15...", "output": "1"}, {"input": "1000000 1 1\n701457814 29748388 516146020 806128775 891009086 36387922 978657648 457302002 921353304 632417259 454481157 395487475 524336932 86128223 449726462 713584809 146365281 918936899 377971659 866801411 783727309 295057568 336340824 201494663 427229669 74323883 651085773 407568495 533407898 997536503 153921578 317851818 970907103 343949716 711018154 349089913 526877010 777626516 513215459 679199903 56835911 942209743 570803713 781217079 923320114 952706430 648985151 689290033 430082290 799382567 559...", "output": "1"}, {"input": "1 1 1000000\n496389707", "output": "1"}, {"input": "1376 123 200\n916626394 465334076 601045202 135812591 626115560 75051437 327877496 867795132 140195457 498219827 505039393 812534101 859960253 349897433 86575643 864217272 621646705 183105476 29941085 593237476 501788131 913706938 996476098 761072105 480284867 781054261 760298777 377797266 21961899 386259145 522721526 732765447 626952178 727331987 804173958 937199030 191731723 325632154 689749754 38085731 453800033 381941376 600713487 437349464 303989830 918354399 15535954 432233987 653234429 612630510 912...", "output": "123"}, {"input": "1376 1375 423\n446819777 712336767 784777242 487886405 463355006 210787682 512877925 545579933 228598921 425128641 599143401 315181523 410258804 11896627 602843122 612366370 991303036 830798012 273706693 331068892 264481380 212020763 864517804 732409515 616079465 537383065 410139732 838194431 57016107 287328221 406741124 940787933 928335752 630086744 114730999 633771153 41844841 821564960 478270696 74262047 515358233 333119138 620140431 532806237 542596185 192243526 815979212 378476333 239819236 222736370 ...", "output": "1375"}, {"input": "1376 1376 2\n104025502 856761879 130784335 413465713 575306368 973581719 872180567 33793182 327103628 712000315 404305691 3771675 213371771 235668773 476733823 21960737 355955536 478342528 947256805 671526686 58273228 562392447 167918529 434352212 313873583 309388948 386136383 861024518 875936461 609013120 797578552 813662774 514703667 873851642 963797141 787506923 38657954 542666155 514149386 173268684 964145020 893633202 850390735 872878520 108174940 19348544 43228639 105444336 332360234 443712940 235036...", "output": "1376"}, {"input": "10 823749283742342340 100000\n613388720 92441578 429122758 800184178 7831199 296755757 143926380 532259266 666463501 582255174", "output": "173780079"}, {"input": "10 8937248923748923 100000\n697241802 157690363 87519001 44105829 526518823 565974315 157690363 157690363 87519001 432857075", "output": "858348724"}, {"input": "9 893274793247 100000\n80508704 493552693 379373165 493552693 571722315 493552693 936471477 80508704 956107679", "output": "331933333"}, {"input": "9 4070991807 100000\n268727819 812713870 268727819 268727819 258038451 268727819 258038451 258038451 268727819", "output": "349189014"}, {"input": "1000000 1000000000000000000 1\n698483415 816316983 108967238 64022840 195311767 409514896 569200342 233701528 404720089 660641670 576091148 412280120 363093025 900353921 72314505 382166887 288707817 583500675 953315987 593783369 752901373 173365994 325805760 472320700 434373033 363370990 656217436 987935018 271341284 402595293 788621486 895005182 155189441 307232229 468851850 279131441 182384302 763404728 501633539 74889143 945073189 970543453 626611259 706480043 136731912 864828710 142890598 397607375 178...", "output": "49"}, {"input": "1000000 1000000000000000000 1\n256501608 117246761 924462730 27437767 445909158 881733749 708530836 540168234 717821891 595730234 120798860 469867317 311685276 995567954 673477041 440335869 808838281 313736833 37446422 843576064 347682520 848014244 775248936 156150578 864661328 283590198 585012555 993996399 689995774 494167651 193400547 344872323 49425502 259381828 768745933 692002240 567011699 530990159 238790107 975964093 566653711 812288270 402543843 846551835 105599694 234410824 805015461 252638832 704...", "output": "49"}, {"input": "1 1000000000000000000 1000000\n332310729", "output": "49503500"}, {"input": "1 1 1\n95524514", "output": "1"}, {"input": "43873 978233006847631 1\n663933320 474713589 118911283 806238511 140049753 316969043 40159877 422405529 2840725 997406717 588750705 800685275 404448370 498837015 772049204 177089488 848359916 117436982 168571224 24868881 174592083 536473436 907326917 246112919 485583224 255048786 463120702 268793388 479479384 37776347 576532934 940397814 582908186 642917094 791246368 612204073 770722541 73056232 788437883 345400644 922815605 855855487 43092555 77545468 516941574 767876932 497065214 959250305 232619004 1653...", "output": "0"}, {"input": "902388 89374973297277 1\n347014752 281161385 527783339 536451038 257465124 357096487 346407530 712680588 133171651 608963528 829754085 244247068 962243543 356791665 999174020 815878785 539760793 61853349 946166077 811154849 263679559 732938396 893965536 481434186 681121892 401088708 770990423 311935318 431047927 617655431 931791067 213813037 962529337 767778785 936311079 417718812 624374857 114213652 576890773 115895856 493819961 584713660 874939134 76712481 820652206 469876285 99314964 540999264 594958374...", "output": "972671659"}, {"input": "890809 978239006847672 1\n478895135 918544995 834753419 850330802 691015489 514986720 942509092 20318713 729919482 155553794 148498352 361541852 281905777 766095141 380994204 928385609 704440987 344720270 891356424 284342076 160762142 526650837 504891896 782685606 993798900 193227305 797864267 825888753 914998585 66711514 662352812 143466482 579401132 485325402 417396410 283370226 892468031 956198758 455665668 391853242 969224112 218804417 998398290 529756662 739855223 530612938 578220469 394492073 7216728...", "output": "1000000006"}, {"input": "150000 1000000000000000000 1\n112502 117188 149995 149996 96091 98732 149991 149992 112498 117184 149987 149988 80931 82512 149983 149984 112494 117180 149979 149980 96087 98728 149975 149976 112490 117176 149971 149972 112486 117172 149967 149968 96083 77380 149963 149964 112482 117168 149959 149960 85542 98720 149955 149956 112478 117164 149951 149952 96079 88344 149947 149948 112474 117160 149943 149944 80927 98716 149939 149940 96075 82508 149935 149936 112470 117152 149931 149932 85538 98712 149927 14...", "output": "49"}, {"input": "2 5 2\n1 1", "output": "11"}], "language": "cpp"}, "prompt": "D. Duff in Beach\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nWhile Duff was resting in the beach, she accidentally found a strange array b0, b1, ..., bl - 1 consisting of l positive integers. This array was strange because it was extremely long, but there was another (maybe shorter) array, a0, ..., an - 1 that b can be build from a with formula: bi = ai mod n where a mod b denoted the remainder of dividing a by b.\nDuff is so curious, she wants to know the number of subsequences of b like bi1, bi2, ..., bix (0 <= i1 < i2 < ... < ix < l), such that:\n1 <= x <= k\nFor each 1 <= j <= x - 1,\nFor each 1 <= j <= x - 1, bij <= bij + 1. i.e this subsequence is non-decreasing.\nSince this number can be very large, she want to know it modulo 109 + 7.\nDuff is not a programmer, and Malek is unavailable at the moment. So she asked for your help. Please tell her this number.\nInput\nThe first line of input contains three integers, n, l and k (1 <= n, k, n * k <= 106 and 1 <= l <= 1018).\nThe second line contains n space separated integers, a0, a1, ..., an - 1 (1 <= ai <= 109 for each 0 <= i <= n - 1).\nOutput\nPrint the answer modulo 1 000 000 007 in one line.\n", "generation": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nlong long mod = 1e9 + 7;\n\nlong long func(long long n, long long l, vector<long long> &a) {\n  long long ans = 0;\n  for (long long i = 0; i < l; i++) {\n    long long ai = a[i];\n    long long bi = ai % n;\n    long long cnt = 0;\n    for (long long j = 0; j < i; j++) {\n      if (bi <= a[j] && a[j] <= bi + 1) {\n        cnt++;\n      }\n    }\n    ans += cnt;\n  }\n  return ans;\n}\n\nint main() {\n  long long n, l, k;\n  cin >> n;\n  cin >> l;\n  cin >> k;\n\n  vector<long long> a(n);\n  for (long long i = 0; i < n; i++) {\n    cin >> a[i];\n  }\n\n  long long ans = func(n, l, a);\n\n  cout << ans << endl;\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp:8:42: error: \u2018vector\u2019 has not been declared\n    8 | long long func(long long n, long long l, vector<long long> &a) {\n      |                                          ^~~~~~\ntest.cpp:8:48: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018<\u2019 token\n    8 | long long func(long long n, long long l, vector<long long> &a) {\n      |                                                ^\ntest.cpp: In function \u2018long long int func(long long int, long long int, int)\u2019:\ntest.cpp:11:20: error: \u2018a\u2019 was not declared in this scope; did you mean \u2018ai\u2019?\n   11 |     long long ai = a[i];\n      |                    ^\n      |                    ai\ntest.cpp: In function \u2018int main()\u2019:\ntest.cpp:30:3: error: \u2018vector\u2019 was not declared in this scope\n   30 |   vector<long long> a(n);\n      |   ^~~~~~\ntest.cpp:3:1: note: \u2018std::vector\u2019 is defined in header \u2018<vector>\u2019; did you forget to \u2018#include <vector>\u2019?\n    2 | #include <algorithm>\n  +++ |+#include <vector>\n    3 | \ntest.cpp:30:10: error: expected primary-expression before \u2018long\u2019\n   30 |   vector<long long> a(n);\n      |          ^~~~\ntest.cpp:32:12: error: \u2018a\u2019 was not declared in this scope\n   32 |     cin >> a[i];\n      |            ^\ntest.cpp:35:30: error: \u2018a\u2019 was not declared in this scope\n   35 |   long long ans = func(n, l, a);\n      |                              ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/45", "completion_id": 0, "test_suite": {"code": "int solve(int n, int k, vector<int> &c) {\n  vector<int> cnt(k, 0);\n  for (int i = 0; i < n; ++i) {\n    cnt[c[i]]++;\n  }\n  int min_ repaint = INT_MAX;\n  for (int i = 0; i < k; ++i) {\n    int balls_to_paint = abs(cnt[i] - n / k);\n    min_repaint = min(min_repaint, balls_to_paint);\n  }\n  return min_repaint;\n}\n", "testcases": [{"input": "4 2\n2 1 2 2", "output": "1"}, {"input": "8 4\n1 2 1 1 1 4 1 4", "output": "3"}, {"input": "1 1\n1", "output": "0"}, {"input": "5 1\n1 1 1 1 1", "output": "0"}, {"input": "6 2\n2 2 2 2 2 2", "output": "3"}, {"input": "6 2\n1 1 1 1 1 1", "output": "3"}, {"input": "10 2\n1 1 1 1 1 1 1 1 1 1", "output": "5"}, {"input": "10 2\n2 2 2 2 2 2 2 2 2 2", "output": "5"}, {"input": "10 2\n2 2 1 2 2 1 2 2 2 2", "output": "3"}, {"input": "50 25\n15 15 21 8 19 25 24 24 23 25 24 24 24 24 21 23 23 12 21 25 16 20 20 18 21 23 24 24 24 24 14 18 10 23 25 21 10 24 23 17 21 18 16 11 19 11 21 24 19 19", "output": "24"}, {"input": "50 25\n9 2 1 3 8 1 2 2 3 5 9 7 10 5 16 6 2 13 5 1 5 4 17 1 2 9 12 3 2 5 4 10 1 10 4 3 1 2 6 6 2 3 6 16 5 6 1 3 9 11", "output": "26"}, {"input": "50 10\n10 10 8 9 10 9 7 9 7 10 10 9 10 9 10 8 10 10 10 8 8 8 10 10 10 10 9 10 8 10 10 9 10 8 10 8 9 10 9 9 8 10 10 10 9 9 8 9 7 8", "output": "32"}, {"input": "50 10\n9 8 9 10 8 8 10 10 10 10 10 10 8 9 10 10 9 10 10 9 9 8 10 10 9 8 10 10 10 10 8 10 6 10 10 10 10 9 10 8 9 10 9 10 9 9 8 9 10 10", "output": "34"}, {"input": "100 10\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 9 10 10 10 10 10 10 10 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10", "output": "88"}, {"input": "100 10\n1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1", "output": "86"}, {"input": "100 100\n100 91 87 86 96 92 96 80 89 98 98 97 87 89 87 99 93 96 76 87 95 89 84 84 86 100 89 82 98 92 97 99 100 84 94 97 99 83 100 68 99 80 92 76 93 94 96 94 80 97 92 79 99 96 92 98 99 93 72 95 95 87 90 85 99 85 99 96 85 97 71 79 98 86 92 89 84 77 99 91 90 100 98 94 77 88 70 89 98 88 94 87 93 92 87 99 92 95 97 99", "output": "73"}, {"input": "100 100\n84 96 52 65 71 76 66 21 81 77 81 98 69 31 38 86 98 72 41 64 87 91 8 90 62 78 98 62 50 44 81 68 47 93 37 50 77 20 93 91 35 27 53 70 99 99 55 63 68 47 29 44 84 32 62 99 21 93 85 95 87 69 29 61 79 52 22 38 30 30 54 55 92 89 97 83 60 57 15 44 99 69 100 82 44 46 33 95 23 84 68 49 77 55 32 78 58 73 27 33", "output": "38"}, {"input": "100 100\n46 32 19 10 62 40 40 21 35 13 5 74 49 66 83 37 68 28 15 5 22 40 44 24 5 11 21 31 65 35 15 6 21 76 4 46 33 3 27 59 7 37 9 44 1 3 12 90 22 30 13 16 48 39 45 3 23 40 87 55 61 1 13 34 2 56 53 9 6 2 12 27 4 83 99 24 15 73 26 1 29 44 22 46 43 6 11 55 35 41 58 44 27 61 45 29 31 71 42 14", "output": "41"}, {"input": "100 100\n5 22 13 17 3 1 11 18 7 42 16 23 8 9 13 31 19 8 6 14 7 8 48 19 6 28 25 1 27 10 3 13 52 1 13 8 19 9 22 4 3 12 29 11 12 4 12 6 1 3 13 2 2 13 8 16 2 4 17 29 25 8 20 11 3 15 15 14 19 6 7 6 3 2 52 1 25 15 2 24 10 7 10 10 6 4 31 27 11 6 14 1 7 18 21 9 7 19 10 12", "output": "68"}, {"input": "100 25\n21 20 24 25 24 25 18 24 23 25 14 23 23 14 22 20 25 9 21 21 22 14 23 18 24 24 19 15 18 23 24 18 22 21 19 20 9 24 11 20 21 20 15 22 18 21 10 23 23 12 20 23 24 25 25 25 21 24 11 25 19 22 21 21 25 21 13 25 24 25 25 17 23 7 25 20 21 23 25 24 16 21 23 16 24 19 23 24 24 8 23 22 22 10 17 21 25 10 13 22", "output": "47"}, {"input": "100 25\n23 22 25 24 24 22 21 22 24 25 21 20 24 23 20 21 23 25 24 24 21 24 24 23 25 21 16 23 25 25 25 19 21 17 17 25 25 22 25 24 18 24 22 25 19 25 23 24 25 25 19 20 16 13 22 22 18 25 21 22 23 25 19 24 20 24 23 16 20 24 24 24 23 24 25 24 22 24 25 23 23 25 24 25 19 19 25 24 25 22 23 23 22 25 25 20 21 25 20 23", "output": "64"}, {"input": "100 25\n6 5 4 3 2 1 4 14 1 4 2 11 5 13 8 5 1 5 8 4 9 10 4 2 9 2 4 15 2 1 8 2 8 5 9 7 1 5 5 3 5 3 11 8 2 4 3 8 5 4 1 2 7 2 1 5 5 1 7 3 4 3 3 5 2 1 5 7 5 3 2 1 1 8 12 2 4 11 3 10 9 10 6 2 2 3 2 4 2 2 5 6 14 2 1 2 5 4 6 4", "output": "53"}, {"input": "15 3\n2 3 3 3 3 3 3 3 3 3 3 3 3 3 2", "output": "8"}, {"input": "15 3\n3 2 3 3 2 3 3 1 3 3 2 2 3 2 1", "output": "3"}, {"input": "25 5\n2 2 1 1 2 2 3 3 2 2 1 2 1 1 1 1 1 3 1 1 1 3 2 2 1", "output": "11"}, {"input": "24 6\n1 4 3 1 1 1 1 1 2 1 1 1 1 1 1 2 2 2 1 1 1 2 4 2", "output": "13"}, {"input": "26 13\n4 7 5 2 2 9 1 9 1 1 3 3 1 4 1 4 3 5 5 2 9 1 6 1 7 1", "output": "11"}, {"input": "100 100\n99 98 100 99 100 99 100 100 100 100 100 99 100 100 96 97 100 100 100 100 100 100 99 100 100 98 99 100 98 100 100 100 100 100 100 97 100 97 100 98 100 96 100 100 100 99 100 100 100 100 100 97 100 99 100 100 100 98 100 100 100 98 100 99 100 100 95 100 99 100 100 99 100 100 96 100 100 97 100 99 100 100 100 100 100 96 100 100 100 100 97 100 100 98 100 99 100 100 98 97", "output": "94"}, {"input": "100 100\n2 1 1 3 1 3 3 2 1 1 2 1 1 1 2 1 1 3 2 1 2 1 1 5 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 1 2 2 1 1 1 5 4 1 1 1 2 2 9 2 1 1 1 5 3 2 3 2 1 5 2 1 2 2 2 2 2 1 1 2 4 3 5 1 1 1 1 1 1 1 1 1 2 2 3 1 2 1 2 1 2 1", "output": "94"}, {"input": "50 10\n9 6 10 9 4 7 8 6 9 7 9 10 5 8 4 6 8 10 6 8 10 10 6 10 5 10 8 7 7 10 10 6 3 9 5 4 8 7 10 9 9 10 8 10 10 7 6 6 7 10", "output": "18"}, {"input": "50 10\n5 4 3 6 4 4 1 1 2 8 4 1 5 5 4 4 4 2 2 5 1 2 1 7 5 7 1 1 1 3 2 5 2 4 6 2 5 5 2 2 2 3 6 1 1 4 1 7 3 2", "output": "19"}, {"input": "14 7\n7 3 5 4 6 2 1 5 7 3 4 1 2 6", "output": "0"}, {"input": "13 1\n1 1 1 1 1 1 1 1 1 1 1 1 1", "output": "0"}, {"input": "30 6\n1 6 6 2 4 2 2 4 1 1 5 5 3 5 2 3 5 4 3 4 6 6 4 1 5 2 3 6 1 3", "output": "0"}, {"input": "100 100\n70 54 10 72 81 84 56 15 27 19 43 100 49 44 52 33 63 40 95 17 58 2 51 39 22 18 82 1 16 99 32 29 24 94 9 98 5 37 47 14 42 73 41 31 79 64 12 6 53 26 68 67 89 13 90 4 21 93 46 74 75 88 66 57 23 7 25 48 92 62 30 8 50 61 38 87 71 34 97 28 80 11 60 91 3 35 86 96 36 20 59 65 83 45 76 77 78 69 85 55", "output": "0"}, {"input": "100 4\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4", "output": "75"}, {"input": "100 25\n25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25", "output": "96"}, {"input": "1 1\n1", "output": "0"}, {"input": "10 1\n1 1 1 1 1 1 1 1 1 1", "output": "0"}, {"input": "100 100\n100 100 100 100 100 100 89 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 94 100 100 100 97 100 93 100 100 100 100 86 100 100 100 100 100 100 89 100 88 100 79 100 100 99 93 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 90 100 100 100 100 100 96 98 96 100 100 100 100 100 100 100 100 100 100 100 100 97 95 100 100 100 78 100 100 100 100", "output": "86"}, {"input": "100 100\n100 100 98 100 98 100 95 100 97 100 100 100 100 100 98 100 100 100 100 100 92 100 90 100 100 100 100 100 98 100 100 100 100 100 100 100 100 100 99 100 100 92 100 100 100 100 100 100 98 100 100 96 100 100 96 92 100 100 100 100 100 99 100 100 100 100 100 100 100 100 100 100 100 93 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 98 100 100 100 100 99", "output": "91"}, {"input": "100 100\n100 100 100 100 100 99 100 100 100 100 100 99 100 100 100 100 100 100 100 100 95 100 100 100 100 100 100 100 100 100 100 99 100 100 100 100 100 100 100 100 100 100 100 100 100 98 99 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 98 100 100 100 99 100 100 100 100 100 100 100 100 100 100 100", "output": "96"}, {"input": "100 100\n100 100 100 100 100 100 100 100 100 100 1 100 100 100 100 100 100 100 1 100 100 100 100 100 100 100 100 2 100 100 100 1 100 100 100 100 1 1 2 100 3 100 100 1 100 100 1 100 100 100 100 100 2 1 100 100 100 2 100 100 100 100 1 100 100 100 100 1 100 100 100 100 100 1 100 1 100 100 100 100 100 100 100 100 100 100 5 100 100 100 100 100 100 100 100 100 100 1 100 100", "output": "95"}, {"input": "100 100\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 99 100 100 100 100 100 100 100 100 100 100 100", "output": "98"}, {"input": "100 100\n100 100 100 100 100 100 100 2 100 100 100 100 100 100 100 100 1 100 100 100 100 100 100 100 1 1 100 1 100 100 100 1 100 100 1 100 100 100 100 100 100 1 1 100 100 100 100 100 100 100 100 100 100 2 100 1 1 100 100 100 100 100 1 1 100 100 100 100 100 100 100 1 100 1 1 100 100 100 100 100 100 100 100 100 100 100 1 100 100 100 100 100 1 100 1 100 1 1 100 100", "output": "97"}], "language": "cpp"}, "prompt": "I. Lottery\ntime limit per test\n2 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nToday Berland holds a lottery with a prize - a huge sum of money! There are k persons, who attend the lottery. Each of them will receive a unique integer from 1 to k.\nThe organizers bought n balls to organize the lottery, each of them is painted some color, the colors are numbered from 1 to k. A ball of color c corresponds to the participant with the same number. The organizers will randomly choose one ball - and the winner will be the person whose color will be chosen!\nFive hours before the start of the lottery the organizers realized that for the lottery to be fair there must be an equal number of balls of each of k colors. This will ensure that the chances of winning are equal for all the participants.\nYou have to find the minimum number of balls that you need to repaint to make the lottery fair. A ball can be repainted to any of the k colors.\nInput\nThe first line of the input contains two integers n and k (1 <= k <= n <= 100) - the number of balls and the number of participants. It is guaranteed that n is evenly divisible by k.\nThe second line of the input contains space-separated sequence of n positive integers ci (1 <= ci <= k), where ci means the original color of the i-th ball.\nOutput\nIn the single line of the output print a single integer - the minimum number of balls to repaint to make number of balls of each color equal.\n", "generation": "int solve(int n, int k, vector<int> &c) {\n  vector<int> cnt(k, 0);\n  for (int i = 0; i < n; ++i) {\n    cnt[c[i]]++;\n  }\n  int min_ repaint = INT_MAX;\n  for (int i = 0; i < k; ++i) {\n    int balls_to_paint = abs(cnt[i] - n / k);\n    min_repaint = min(min_repaint, balls_to_paint);\n  }\n  return min_repaint;\n}\n", "result": "failed: compilation error: test.cpp:1:25: error: \u2018vector\u2019 has not been declared\n    1 | int solve(int n, int k, vector<int> &c) {\n      |                         ^~~~~~\ntest.cpp:1:31: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018<\u2019 token\n    1 | int solve(int n, int k, vector<int> &c) {\n      |                               ^\ntest.cpp: In function \u2018int solve(int, int, int)\u2019:\ntest.cpp:2:3: error: \u2018vector\u2019 was not declared in this scope\n    2 |   vector<int> cnt(k, 0);\n      |   ^~~~~~\ntest.cpp:2:10: error: expected primary-expression before \u2018int\u2019\n    2 |   vector<int> cnt(k, 0);\n      |          ^~~\ntest.cpp:4:5: error: \u2018cnt\u2019 was not declared in this scope; did you mean \u2018int\u2019?\n    4 |     cnt[c[i]]++;\n      |     ^~~\n      |     int\ntest.cpp:4:9: error: \u2018c\u2019 was not declared in this scope\n    4 |     cnt[c[i]]++;\n      |         ^\ntest.cpp:6:12: error: expected initializer before \u2018repaint\u2019\n    6 |   int min_ repaint = INT_MAX;\n      |            ^~~~~~~\ntest.cpp:8:30: error: \u2018cnt\u2019 was not declared in this scope; did you mean \u2018int\u2019?\n    8 |     int balls_to_paint = abs(cnt[i] - n / k);\n      |                              ^~~\n      |                              int\ntest.cpp:8:26: error: \u2018abs\u2019 was not declared in this scope\n    8 |     int balls_to_paint = abs(cnt[i] - n / k);\n      |                          ^~~\ntest.cpp:9:5: error: \u2018min_repaint\u2019 was not declared in this scope\n    9 |     min_repaint = min(min_repaint, balls_to_paint);\n      |     ^~~~~~~~~~~\ntest.cpp:9:19: error: \u2018min\u2019 was not declared in this scope\n    9 |     min_repaint = min(min_repaint, balls_to_paint);\n      |                   ^~~\ntest.cpp:11:10: error: \u2018min_repaint\u2019 was not declared in this scope\n   11 |   return min_repaint;\n      |          ^~~~~~~~~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/46", "completion_id": 0, "test_suite": {"code": "int main() {\n  int n;\n  cin >> n;\n\n  vector<int> t(n);\n  vector<int> s(n);\n  vector<int> f(n);\n\n  for (int i = 0; i < n; i++) {\n    cin >> t[i];\n    cin >> s[i];\n    cin >> f[i];\n  }\n\n  vector<int> r(n);\n  for (int i = 0; i < n; i++) {\n    int cnt = 0;\n    for (int j = 0; j < n; j++) {\n      if (s[j] <= f[i] && f[i] <= t[j] && i != j) {\n        cnt++;\n      }\n    }\n    r[i] = cnt;\n  }\n\n  cout << r[0] << \" \";\n  for (int i = 1; i < n; i++) {\n    cout << r[i] << \" \";\n  }\n  cout << endl;\n  return 0;\n}\n", "testcases": [{"input": "3\n1 1 10\n5 8 2\n9 9 10", "output": "2 1 1"}, {"input": "3\n3 2 4\n4 3 4\n3 6 4", "output": "2 2 2"}, {"input": "10\n100 400 9000\n100 400 9000\n100 400 9000\n100 400 9000\n100 400 9000\n100 400 9000\n100 400 9000\n100 400 9000\n100 400 9000\n100 400 9000", "output": "9 9 9 9 9 9 9 9 9 9"}, {"input": "10\n400 500 100\n400 500 100\n400 500 100\n400 500 100\n400 500 100\n400 500 100\n400 500 100\n400 500 100\n400 500 100\n400 500 100", "output": "9 9 9 9 9 9 9 9 9 9"}, {"input": "2\n1 999999 1000000\n1 1000000 999999", "output": "1 1"}, {"input": "8\n4 4 100\n3 3 90\n2 2 80\n1 1 70\n4 70 4\n5 80 5\n6 90 6\n7 100 7", "output": "7 7 7 7 4 4 4 4"}, {"input": "2\n1 10 15\n3 18 15", "output": "1 1"}, {"input": "3\n5 4 1\n2 1 10\n8 5 2", "output": "1 1 0"}, {"input": "3\n999995 999994 999992\n999997 999994 999990\n1000000 999991 999999", "output": "0 1 1"}, {"input": "10\n574159 311905 962312\n419776 161298 821630\n659552 209764 24964\n780839 173140 729956\n948170 866093 684140\n491331 794924 114469\n650256 734793 255253\n212264 188561 695744\n751383 98389 133342\n305528 97316 755019", "output": "3 3 1 2 2 5 5 2 1 2"}, {"input": "10\n3 3 2\n3 1 3\n3 2 3\n1 2 3\n1 1 3\n2 3 1\n2 3 2\n2 1 2\n3 2 3\n3 3 1", "output": "5 3 6 2 4 7 6 4 6 5"}, {"input": "10\n9 6 8\n5 5 2\n8 9 2\n2 7 9\n6 4 10\n1 1 8\n2 8 1\n10 6 3\n7 5 2\n9 5 4", "output": "1 3 2 1 4 2 4 0 1 0"}, {"input": "2\n1 1 1000000\n1 1000000 1", "output": "1 1"}, {"input": "4\n1 1 1000000\n1 1 1000000\n1 1000000 1\n1 1000000 1", "output": "3 3 3 3"}, {"input": "2\n1 1 5\n2 1 5", "output": "0 0"}, {"input": "2\n999999 999998 999999\n999996 999995 999996", "output": "0 0"}], "language": "cpp"}, "prompt": "D. Boulevard\ntime limit per test\n2 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nWelcoming autumn evening is the best for walking along the boulevard and n people decided to do so.\nThe boulevard can be represented as the axis Ox. For every person there are three parameters characterizing the behavior: ti, si, fi - the moment of time when the i-th person starts walking, the start point and the end point of the walk respectively. Each person moves in a straight line along the boulevard from si to fi with a constant speed of either 1 or  - 1 depending on the direction.\nWhen the i-th person appears on the boulevard at the point si she immediately starts walking towards the point fi.\nIf two or more persons meet at the boulevard (they are at the same point at the same time, no matter which directions they are going) they all greet each other. Like in the normal life, every pair of people greet each other at most once.\nYou task is to calculate for every person how many people she greets while walking along the boulevard.\nPlease, pay attention to the fact that i-th person may meet and greet any other person at points si and fi. After a person achieves the destination point fi she moves out of the boulevard and cannot greet anyone else. The same rule applies to the start of the walk: a person cannot greet anyone until she appears on the boulevard.\nInput\nIn the first line there is an integer n (2 <= n <= 1000) - the number of people who decided to go for a walk.\nThe following n lines contain parameters for n people. In the i-th line there are three positive integers ti, si, fi (1 <= ti, si, fi <= 106,  si != fi), where ti, si, fi - the moment of time when the i-th person starts walking, the start point and the end point of the walk respectively.\nOutput\nThe single line of the output should contain a sequence of n integers r1, r2, ..., rn separated by a space, where ri denotes the number which the i-th person greets other people while walking along the boulevard.\n", "generation": "int main() {\n  int n;\n  cin >> n;\n\n  vector<int> t(n);\n  vector<int> s(n);\n  vector<int> f(n);\n\n  for (int i = 0; i < n; i++) {\n    cin >> t[i];\n    cin >> s[i];\n    cin >> f[i];\n  }\n\n  vector<int> r(n);\n  for (int i = 0; i < n; i++) {\n    int cnt = 0;\n    for (int j = 0; j < n; j++) {\n      if (s[j] <= f[i] && f[i] <= t[j] && i != j) {\n        cnt++;\n      }\n    }\n    r[i] = cnt;\n  }\n\n  cout << r[0] << \" \";\n  for (int i = 1; i < n; i++) {\n    cout << r[i] << \" \";\n  }\n  cout << endl;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> n;\n      |   ^~~\ntest.cpp:5:3: error: \u2018vector\u2019 was not declared in this scope\n    5 |   vector<int> t(n);\n      |   ^~~~~~\ntest.cpp:5:10: error: expected primary-expression before \u2018int\u2019\n    5 |   vector<int> t(n);\n      |          ^~~\ntest.cpp:6:10: error: expected primary-expression before \u2018int\u2019\n    6 |   vector<int> s(n);\n      |          ^~~\ntest.cpp:7:10: error: expected primary-expression before \u2018int\u2019\n    7 |   vector<int> f(n);\n      |          ^~~\ntest.cpp:10:12: error: \u2018t\u2019 was not declared in this scope\n   10 |     cin >> t[i];\n      |            ^\ntest.cpp:11:12: error: \u2018s\u2019 was not declared in this scope\n   11 |     cin >> s[i];\n      |            ^\ntest.cpp:12:12: error: \u2018f\u2019 was not declared in this scope\n   12 |     cin >> f[i];\n      |            ^\ntest.cpp:15:10: error: expected primary-expression before \u2018int\u2019\n   15 |   vector<int> r(n);\n      |          ^~~\ntest.cpp:19:11: error: \u2018s\u2019 was not declared in this scope\n   19 |       if (s[j] <= f[i] && f[i] <= t[j] && i != j) {\n      |           ^\ntest.cpp:19:19: error: \u2018f\u2019 was not declared in this scope\n   19 |       if (s[j] <= f[i] && f[i] <= t[j] && i != j) {\n      |                   ^\ntest.cpp:19:35: error: \u2018t\u2019 was not declared in this scope\n   19 |       if (s[j] <= f[i] && f[i] <= t[j] && i != j) {\n      |                                   ^\ntest.cpp:23:5: error: \u2018r\u2019 was not declared in this scope\n   23 |     r[i] = cnt;\n      |     ^\ntest.cpp:26:3: error: \u2018cout\u2019 was not declared in this scope\n   26 |   cout << r[0] << \" \";\n      |   ^~~~\ntest.cpp:26:11: error: \u2018r\u2019 was not declared in this scope\n   26 |   cout << r[0] << \" \";\n      |           ^\ntest.cpp:30:11: error: \u2018endl\u2019 was not declared in this scope\n   30 |   cout << endl;\n      |           ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/47", "completion_id": 0, "test_suite": {"code": "int main() {\n  int w, h;\n  cin >> w;\n  cin >> h;\n\n  vector<string> v(h);\n  for (int i = 0; i < h; i++) {\n    cin >> v[i];\n  }\n\n  int x, y, dir;\n  cin >> x;\n  cin >> y;\n  cin >> dir;\n\n  int area = 0;\n  switch (dir) {\n    case 0:\n      while (v[y][x] != '*') {\n        x++;\n        area++;\n      }\n      break;\n    case 1:\n      while (v[y][x] != '*') {\n        y++;\n        area++;\n      }\n      break;\n    case 2:\n      while (v[y][x] != '*') {\n        x--;\n        area++;\n      }\n      break;\n    case 3:\n      while (v[y][x] != '*') {\n        y--;\n        area++;\n      }\n      break;\n  }\n\n  cout << area;\n  return 0;\n}\n", "testcases": [{"input": "2 3\nU..\n.*.", "output": "4"}, {"input": "4 4\nR...\n.**.\n.**.\n....", "output": "12"}, {"input": "3 4\n***D\n..*.\n*...", "output": "6"}, {"input": "3 3\n...\n.R.\n...", "output": "9"}, {"input": "10 10\n.........L\n.*********\n..........\n*********.\n..........\n.*********\n..........\n*********.\n..........\n.*********", "output": "10"}, {"input": "1 1\nL", "output": "1"}, {"input": "1 1\nD", "output": "1"}, {"input": "1 1\nR", "output": "1"}, {"input": "1 1\nU", "output": "1"}, {"input": "1 3\nR.*", "output": "2"}, {"input": "3 1\nD\n.\n*", "output": "2"}, {"input": "1 3\n*.L", "output": "2"}, {"input": "3 1\n*\n.\nU", "output": "2"}, {"input": "10 10\n.*********\n.*.......*\n.*.*****.*\n.*.*...*.*\n.*.*U*.*.*\n.*.***.*.*\n.*.....*.*\n.*******.*\n.*******.*\n.........*", "output": "47"}, {"input": "10 10\n.*********\n.*.......*\n.*.*****.*\nD*.*...*.*\n.*.*.*.*.*\n.*.***.*.*\n.*.....*.*\n.*******.*\n.*******.*\n.........*", "output": "10"}, {"input": "10 10\n**********\n*******D**\n*******.**\n**........\n**.****.*.\n**.****.*.\n**.****.*.\n**......*.\n*********.\n**........", "output": "35"}, {"input": "10 10\n**********\n*******.**\n*******.**\n**........\n**.****.*.\n**.****.*.\n**.****.*.\n**.....L*.\n*********.\n**........", "output": "30"}, {"input": "10 10\n**********\n*******.**\n*******.**\n**........\n**.****.*.\n**.****.*.\n**U****.*.\n**......*.\n*********.\n**........", "output": "24"}, {"input": "10 10\n**........\n...*.**.*.\n****.**D*.\n**........\n**.*.**.*.\n**.*.**.*.\n**.*.**.*.\n**......*.\n****.****.\n**.*......", "output": "46"}, {"input": "1 3\nR.*", "output": "2"}, {"input": "1 10\nD****.**..", "output": "1"}, {"input": "1 6\n.*D***", "output": "1"}, {"input": "2 4\n***R\n****", "output": "1"}, {"input": "2 2\n**\n*D", "output": "1"}, {"input": "2 5\n*L**.\n*****", "output": "1"}, {"input": "2 10\n****..**..\n**....*.U.", "output": "5"}, {"input": "3 4\n*.L.\n*.*.\n..**", "output": "4"}, {"input": "3 7\nU.**...\n.*....*\n***..**", "output": "2"}, {"input": "3 9\n.*...***.\n.*.*.....\n*...**.U*", "output": "7"}, {"input": "3 10\n.....**...\n...D......\n..**...*..", "output": "11"}, {"input": "4 5\n..***\n..*..\nL...*\n*....", "output": "7"}, {"input": "4 7\n*******\n*****.*\n*******\n**L*.**", "output": "1"}, {"input": "4 9\n.***..*..\n...*..*..\n*...*....\n.D..*....", "output": "4"}, {"input": "5 10\n....*....*\n.......R..\n..**...***\n.*...*....\n........*.", "output": "14"}, {"input": "6 8\n.*.*....\n.*.*....\n*....*.*\n..*..**.\n..R...*.\n...**...", "output": "5"}, {"input": "6 10\n.......***\n*..*......\n.*....L...\n..*...*...\n..........\n.*...*...*", "output": "12"}, {"input": "8 10\n....*.....\n.......**.\n..**......\n....*.*...\n..........\n....*....*\n....**....\n........*D", "output": "2"}, {"input": "9 9\n****..**.\n*.*.*****\n*********\n*********\n*******..\n********R\n*******.*\n*******.*\n*.***.***", "output": "2"}, {"input": "9 10\n********.*\n***.******\n*****.****\n**********\n**********\n**********\n**.*******\n*********L\n**********", "output": "1"}, {"input": "10 10\n..**.**.*.\n******...*\n...*.**.*.\n.*.**R....\n..*..*.*.*\n*.*...**..\n*.*.**.*..\n.*........\n*...**....\n**.****..*", "output": "5"}, {"input": "10 10\n..*.*.*...\n..*L....**\n.*....**..\n.......**.\n*.*.*...**\n...**..*..\n.***.**.*.\n..*.....*.\n*......*..\n..........", "output": "5"}, {"input": "3 1\n*\nL\n*", "output": "1"}, {"input": "10 1\n*\nL\n*\n.\n.\n.\n*\n*\n.\n*", "output": "1"}, {"input": "6 1\n.\n.\n.\n*\nR\n.", "output": "2"}, {"input": "4 2\n**\nD.\n**\n**", "output": "2"}, {"input": "2 2\nD*\n**", "output": "1"}, {"input": "5 2\n..\n*R\n..\n*.\n..", "output": "5"}, {"input": "10 2\n.*\n..\n..\n..\n*.\n..\n..\n..\n.*\nR.", "output": "9"}, {"input": "4 3\n**.\n.*U\n*.*\n**.", "output": "2"}, {"input": "7 3\n*L*\n***\n***\n***\n***\n***\n***", "output": "1"}, {"input": "9 3\n*L.\n***\n***\n***\n**.\n.**\n***\n***\n..*", "output": "2"}, {"input": "10 3\n.*.\n.*.\n...\n*..\n.D.\n...\n...\n...\n...\n.*.", "output": "20"}, {"input": "5 4\n**..\n.*.U\n.***\n**..\n**.*", "output": "4"}, {"input": "7 4\n*.**\n.***\n****\n****\n*.**\n.***\n*U*.", "output": "1"}, {"input": "9 4\n**R*\n****\n**.*\n****\n.***\n**.*\n...*\n***.\n****", "output": "1"}, {"input": "10 5\n.....\n.*...\n...*.\n*....\n*....\n.....\n.D...\n.....\n.....\n....*", "output": "18"}, {"input": "8 6\n******\n***.**\n.*****\n****.*\n*****.\n*****D\n******\n******", "output": "2"}, {"input": "10 6\n.*....\n..*...\n.*....\n......\n*.....\n......\n......\nL*.*..\n......\n......", "output": "18"}, {"input": "10 8\n........\n........\n........\n........\n........\n........\n........\n........\n........\n..L.....", "output": "32"}, {"input": "9 9\n****.****\n*********\n*********\n**..*.***\n****.*...\n..*****..\n**.******\n****.****\n..*.***.R", "output": "2"}, {"input": "10 9\n..*U.*...\n*......*.\n.........\n*.**..**.\n.*..**...\n*.......*\n.........\n*..*.....\n*....*...\n....*....", "output": "5"}, {"input": "10 10\n.****.****\n*.**.*..*.\n*.***.*.**\n..*****.**\n****.*****\n.*.***.***\n**.*******\n.******.**\n*.U*..****\n*.*.*.***.", "output": "2"}, {"input": "10 10\n.*.***.*.D\n*******...\n..*******.\n*.***..*.*\n.*.****..*\n****.****.\n***.**.***\n.****.**..\n*****..*..\n***...**.*", "output": "3"}, {"input": "7 7\n.......\n.....R.\n.......\n.......\n.......\n.....*.\n.......", "output": "25"}, {"input": "7 8\n......*.\n........\n....*..*\n........\n.....*..\n..*.....\n....*L..", "output": "6"}, {"input": "7 9\n..**.....\n.......*.\n.........\n...R*....\n.........\n.........\n.........", "output": "19"}, {"input": "7 10\n....U.....\n.*.*..*...\n.*......*.\n.........*\n..........\n.....*....\n.......*..", "output": "8"}, {"input": "8 8\n........\n....*.*.\n.*......\n........\n........\n........\nR.......\n..*.....", "output": "28"}, {"input": "8 9\n.........\n.........\n......L..\n...*.....\n.........\n.........\n.....*...\n.........", "output": "36"}, {"input": "8 10\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n.........D", "output": "32"}, {"input": "9 10\n...**.....\n.......*..\n..*.....**\n.....*....\n.....*....\n...*......\n.....*....\n..*....*.L\n....**....", "output": "27"}, {"input": "10 10\n....*.....\n*.........\n.........*\n........*.\n....*.*...\n......*...\n.........*\n..........\nU*.*......\n.**....*..", "output": "15"}, {"input": "9 9\n.........\n........*\n.........\n.....*...\n..*......\n........R\n..*.*....\n.........\n.......**", "output": "26"}, {"input": "8 7\n.......\n.......\n.....U.\n.......\n.......\n.......\n.......\n.......", "output": "28"}, {"input": "9 7\nD......\n.......\n.......\n.......\n.......\n.......\n.......\n.......\n.......", "output": "28"}, {"input": "10 7\n.......\n*......\n.......\n.*.....\n.......\n..R....\n.......\n.......\n.......\n.....*.", "output": "14"}, {"input": "9 8\n...*....\n......*.\n........\n...*....\n*.......\n..L.....\n.*......\n........\n........", "output": "20"}, {"input": "10 8\n.....*..\n........\n........\n........\n........\n.....***\n........\n.*......\n........\n..L.....", "output": "26"}, {"input": "10 9\n...U.....\n.........\n.........\n*........\n.........\n.........\n.........\n.........\n.........\n.........", "output": "35"}, {"input": "9 10\n.....*....\n...*...*..\n..*....*..\n....*..*..\n....L..*..\n....*..*..\n...*...*..\n.*.....*..\n.....*....", "output": "39"}, {"input": "9 10\n..*..*....\n...*...*..\n..*....*..\n.*..*..*..\n....L..*.*\n....*..*..\n*..*...*..\n.*.....*..\n.....*....", "output": "12"}, {"input": "10 10\n**.......*\n......****\n.*.**.*...\n.*.**.*.*.\n.*.**.*.*.\n.*.**.*.*.\n.*.**.*.*.\n..........\n**.**.*.**\n**....*U**", "output": "57"}, {"input": "10 10\n**....*..*\n......****\n.*.**.*...\n.*.**.*.*.\n.*.**.*.*.\n.*.**D*.*.\n.*.**.*.*.\n..........\n**.**.*.**\n**....*.**", "output": "24"}, {"input": "10 10\n***..D*..*\n......****\n.*.**.*...\n.*.**.*.*.\n.*.**.*.*.\n.*.**.*.*.\n.*.**.*.*.\n..........\n**.**.*.**\n**....*.**", "output": "23"}, {"input": "10 10\n***R..*..*\n......****\n.*.**.*...\n.*.**.*.*.\n.*.**.*.*.\n.*.**.*.*.\n.*.**.*.*.\n..........\n**.**.*.**\n**....*.**", "output": "25"}, {"input": "10 10\nD.*.......\n*.........\n...*.....*\n**........\n....*.....\n***.......\n......*...\n.*.*......\n*.......*.\n.....*.*..", "output": "26"}, {"input": "10 10\n........*D\n..*.......\n......*...\n...*......\n..........\n....*.....\n.....*....\n.*........\n.......*..\n..........", "output": "59"}, {"input": "10 10\n.....*....\n.**.......\n......*.D*\n..**......\n..*.......\n......*...\n......*...\n*.........\n..*......*\n....*.....", "output": "56"}, {"input": "10 10\n*.....D...\n..........\n..........\n.*...*....\n.....*.*..\n.....*..*.\n....*.....\n*.........\n*.....*...\n.*.......*", "output": "64"}, {"input": "10 10\n....*...*.\n*.........\n..........\n.......*..\n..........\n..*.......\n.*....L*..\n..*.......\n.....*.*.*\n......*...", "output": "50"}, {"input": "10 10\n.......*..\n..D....*..\n........*.\n*...*.....\n*.........\n*.........\n.........*\n.....**...\n.*....*.*.\n.*.*......", "output": "55"}, {"input": "10 10\n...*..**..\n..........\n..........\n.*.......*\n..........\n..........\n*..R......\n.....*....\n......*..*\n...*......", "output": "67"}, {"input": "10 10\n....*....*\n**.......*\n..........\n....*...*.\n*D........\n......*...\n.**.......\n**.......*\n.....**..*\n.....*..*.", "output": "57"}, {"input": "4 10\n.........*\n..*.....*.\n.........*\n.*R.....*.", "output": "25"}, {"input": "2 10\n.........*\n*R......*.", "output": "16"}, {"input": "2 10\n..........\n*R.......*", "output": "18"}, {"input": "3 7\n*.*.***\n**L****\n*.*.***", "output": "1"}, {"input": "3 7\n*******\n**L****\n*******", "output": "1"}, {"input": "5 3\n***\n***\n***\n*U*\n***", "output": "1"}, {"input": "5 3\n..*\n..*\n***\n*U*\n***", "output": "1"}], "language": "cpp"}, "prompt": "J. Cleaner Robot\ntime limit per test\n2 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nMasha has recently bought a cleaner robot, it can clean a floor without anybody's assistance.\nSchematically Masha's room is a rectangle, consisting of w * h square cells of size 1 * 1. Each cell of the room is either empty (represented by character '.'), or occupied by furniture (represented by character '*').\nA cleaner robot fully occupies one free cell. Also the robot has a current direction (one of four options), we will say that it looks in this direction.\nThe algorithm for the robot to move and clean the floor in the room is as follows:\nclean the current cell which a cleaner robot is in;\nif the side-adjacent cell in the direction where the robot is looking exists and is empty, move to it and go to step 1;\notherwise turn 90 degrees clockwise (to the right relative to its current direction) and move to step 2.\nThe cleaner robot will follow this algorithm until Masha switches it off.\nYou know the position of furniture in Masha's room, the initial position and the direction of the cleaner robot. Can you calculate the total area of the room that the robot will clean if it works infinitely?\nInput\nThe first line of the input contains two integers, w and h (1 <= w, h <= 10) - the sizes of Masha's room.\nNext w lines contain h characters each - the description of the room. If a cell of a room is empty, then the corresponding character equals '.'. If a cell of a room is occupied by furniture, then the corresponding character equals '*'. If a cell has the robot, then it is empty, and the corresponding character in the input equals 'U', 'R', 'D' or 'L', where the letter represents the direction of the cleaner robot. Letter 'U' shows that the robot is looking up according to the scheme of the room, letter 'R' means it is looking to the right, letter 'D' means it is looking down and letter 'L' means it is looking to the left.\nIt is guaranteed that in the given w lines letter 'U', 'R', 'D' or 'L' occurs exactly once. The cell where the robot initially stands is empty (doesn't have any furniture).\nOutput\nIn the first line of the output print a single integer - the total area of the room that the robot will clean if it works infinitely.\n", "generation": "int main() {\n  int w, h;\n  cin >> w;\n  cin >> h;\n\n  vector<string> v(h);\n  for (int i = 0; i < h; i++) {\n    cin >> v[i];\n  }\n\n  int x, y, dir;\n  cin >> x;\n  cin >> y;\n  cin >> dir;\n\n  int area = 0;\n  switch (dir) {\n    case 0:\n      while (v[y][x] != '*') {\n        x++;\n        area++;\n      }\n      break;\n    case 1:\n      while (v[y][x] != '*') {\n        y++;\n        area++;\n      }\n      break;\n    case 2:\n      while (v[y][x] != '*') {\n        x--;\n        area++;\n      }\n      break;\n    case 3:\n      while (v[y][x] != '*') {\n        y--;\n        area++;\n      }\n      break;\n  }\n\n  cout << area;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> w;\n      |   ^~~\ntest.cpp:6:3: error: \u2018vector\u2019 was not declared in this scope\n    6 |   vector<string> v(h);\n      |   ^~~~~~\ntest.cpp:6:10: error: \u2018string\u2019 was not declared in this scope\n    6 |   vector<string> v(h);\n      |          ^~~~~~\ntest.cpp:6:18: error: \u2018v\u2019 was not declared in this scope\n    6 |   vector<string> v(h);\n      |                  ^\ntest.cpp:44:3: error: \u2018cout\u2019 was not declared in this scope\n   44 |   cout << area;\n      |   ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/48", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nbool cmp(pair<int, int> a, pair<int, int> b) {\n  return make_pair(-a.first, a.second) < make_pair(-b.first, b.second);\n}\n\nint main() {\n  int w, l, n, a, vmax, vp;\n  cin >> w;\n  cin >> l;\n  cin >> n;\n  cin >> a;\n  cin >> vmax;\n  cin >> vp;\n\n  int x1, y1, x2, y2;\n  cin >> x1;\n  cin >> y1;\n  cin >> x2;\n  cin >> y2;\n\n  vector<pair<int, int>> p(n);\n  for (int i = 0; i < n; i++) {\n    cin >> p[i].first;\n    cin >> p[i].second;\n  }\n\n  sort(p.begin(), p.end(), cmp);\n\n  int time = 0;\n  int dx = abs(x2 - x1) + abs(y2 - y1);\n  int dy = abs(y2 - y1);\n  time += dx + dy;\n\n  for (int i = 0; i < n; i++) {\n    if (p[i].first == x1 && p[i].second == y1) {\n      time++;\n    }\n  }\n\n  cout << fixed << setprecision(2) << time * a;\n  return 0;\n}\n", "testcases": [{"input": "5 5 1 0.50 3 1\n2 1 4 1\n3 1", "output": "2.8284271247"}, {"input": "1 1 0 4.02 3 2\n0 0 0 1", "output": "0.7053456159"}, {"input": "1 1 1 1.22 3 3\n0 1 1 0\n0 0", "output": "1.8107149209"}, {"input": "1 1 2 2.50 3 2\n1 1 0 1\n0 0\n1 0", "output": "0.8944271910"}, {"input": "2 1 0 0.42 3 1\n0 0 0 1", "output": "2.1821789024"}, {"input": "2 1 1 1.70 4 1\n1 0 2 0\n2 1", "output": "1.0846522891"}, {"input": "2 1 2 3.91 1 1\n0 1 1 1\n2 1\n1 0", "output": "1.1278772379"}, {"input": "1 2 0 0.17 4 4\n1 2 1 1", "output": "3.4299717029"}, {"input": "1 2 1 2.37 4 2\n0 1 1 2\n1 1", "output": "1.2991396049"}, {"input": "1 2 2 3.65 2 2\n0 2 0 0\n1 2\n0 1", "output": "1.2739726027"}, {"input": "2 2 0 1.57 4 2\n1 1 1 2", "output": "1.1286652960"}, {"input": "2 2 3 1.33 1 1\n2 2 0 0\n1 1\n1 2\n0 1", "output": "4.3759398496"}, {"input": "2 2 5 4.81 5 2\n2 2 0 2\n0 1\n1 0\n2 0\n2 1\n1 2", "output": "1.0207325900"}, {"input": "2 2 6 1.09 4 4\n0 0 2 2\n1 0\n2 1\n0 2\n1 1\n0 1\n1 2", "output": "2.7091418459"}, {"input": "2 2 7 0.34 4 2\n2 0 1 1\n2 1\n0 2\n0 0\n2 2\n0 1\n1 2\n1 0", "output": "3.4299717029"}, {"input": "19 2 27 0.99 38 2\n8 0 15 2\n11 2\n10 2\n11 0\n17 2\n19 2\n12 2\n4 2\n10 0\n8 1\n15 1\n7 1\n2 2\n12 0\n6 1\n1 0\n13 2\n5 0\n9 0\n16 2\n14 2\n12 1\n2 1\n19 0\n19 1\n3 2\n1 1\n0 2", "output": "5.0486120158"}, {"input": "5 5 20 2.58 53 2\n5 4 0 0\n3 1\n4 2\n2 2\n1 0\n3 0\n5 2\n2 0\n1 3\n0 1\n1 1\n1 4\n1 2\n2 1\n4 3\n5 0\n4 5\n3 4\n5 5\n2 3\n4 4", "output": "3.8986402282"}, {"input": "33 3 77 0.36 26 1\n18 1 6 3\n13 0\n3 2\n21 0\n20 0\n28 2\n2 1\n4 0\n0 1\n7 2\n6 1\n20 2\n4 2\n18 2\n0 0\n15 3\n14 2\n17 1\n17 0\n1 1\n11 0\n5 0\n23 1\n11 2\n8 2\n0 2\n33 0\n11 1\n24 1\n28 3\n14 3\n2 2\n25 1\n14 0\n22 2\n33 2\n8 3\n13 3\n7 1\n22 1\n9 0\n5 1\n15 1\n16 0\n5 3\n26 1\n32 1\n29 0\n19 1\n11 3\n22 3\n27 3\n30 0\n0 3\n23 0\n17 2\n5 2\n26 3\n13 1\n1 0\n16 1\n3 0\n1 3\n10 3\n14 1\n30 1\n29 1\n28 0\n21 1\n32 0\n17 3\n20 3\n15 2\n2 3\n23 3\n12 3\n21 3\n27 0", "output": "13.1528311028"}, {"input": "10 10 71 1.22 40 2\n1 9 2 0\n6 0\n0 8\n5 9\n3 9\n9 7\n3 4\n1 1\n3 6\n1 10\n1 8\n7 10\n10 3\n6 7\n7 0\n3 5\n10 10\n10 7\n6 5\n9 9\n6 4\n1 5\n4 8\n4 7\n9 6\n8 3\n4 2\n7 4\n2 7\n4 4\n2 1\n9 10\n3 2\n8 5\n9 5\n9 0\n6 6\n8 8\n8 2\n10 9\n2 5\n0 10\n1 4\n8 9\n2 9\n2 10\n8 10\n2 4\n7 3\n3 10\n10 4\n8 1\n0 1\n6 1\n0 4\n10 8\n4 3\n6 10\n5 2\n0 5\n0 6\n9 1\n10 0\n7 5\n8 7\n2 3\n1 0\n1 3\n0 0\n3 7\n6 2\n7 2", "output": "5.2821098685"}, {"input": "6 7 11 1.00 3 2\n5 2 1 6\n0 4\n1 3\n2 1\n2 3\n2 5\n3 4\n4 2\n4 4\n4 6\n5 5\n6 7", "output": "4.3054692883"}, {"input": "3 3 2 1.00 1 1\n0 0 3 3\n2 1\n1 2", "output": "6.5000000000"}, {"input": "69 50 100 4.25 58 87\n5 41 40 25\n32 10\n48 39\n42 26\n18 44\n40 6\n14 45\n51 50\n57 1\n10 46\n34 41\n46 32\n35 40\n18 47\n68 29\n24 25\n54 47\n33 44\n24 4\n67 19\n57 19\n51 46\n67 44\n53 2\n30 20\n54 45\n63 0\n14 16\n28 47\n57 13\n31 35\n36 41\n31 19\n58 5\n10 18\n13 41\n25 9\n9 12\n7 42\n12 31\n37 3\n66 30\n40 16\n22 25\n20 2\n37 22\n4 31\n13 17\n69 15\n12 21\n56 38\n48 36\n45 49\n22 8\n45 29\n53 23\n30 2\n50 37\n30 15\n65 0\n17 47\n66 11\n48 5\n14 41\n27 1\n57 0\n41 0\n68 41\n68 6\n27 43\n38 45\n48 28\n...", "output": "4.8989794856"}, {"input": "93 99 100 3.75 39 48\n8 98 13 19\n34 78\n41 71\n72 85\n45 27\n10 19\n67 57\n30 13\n19 67\n53 78\n41 32\n35 50\n34 36\n2 77\n55 80\n8 80\n64 57\n72 21\n33 51\n73 21\n89 44\n17 39\n14 21\n9 37\n5 21\n21 14\n9 74\n85 72\n43 88\n35 91\n71 0\n62 2\n79 53\n76 95\n39 19\n63 7\n4 92\n10 38\n66 16\n69 67\n66 75\n40 65\n3 67\n22 12\n1 98\n40 4\n2 8\n23 78\n48 69\n90 6\n1 68\n18 92\n32 66\n90 60\n31 63\n70 67\n33 99\n2 99\n93 69\n91 26\n48 43\n65 74\n50 51\n6 63\n92 76\n50 45\n7 0\n61 53\n56 92\n92 65\n44 1\n61 32\n2...", "output": "6.6932802123"}, {"input": "45 83 100 1.86 90 59\n5 22 22 56\n16 47\n22 62\n15 60\n11 62\n1 47\n25 19\n26 38\n30 63\n13 24\n45 60\n25 15\n7 69\n44 72\n42 71\n26 47\n44 7\n25 3\n11 23\n23 61\n8 71\n42 61\n10 49\n43 16\n17 81\n39 65\n35 66\n9 80\n17 5\n40 60\n23 78\n0 45\n7 7\n21 62\n18 51\n28 39\n33 33\n5 16\n28 46\n27 75\n14 23\n10 0\n12 25\n10 51\n41 72\n22 0\n15 38\n45 53\n38 53\n7 2\n24 2\n4 9\n26 8\n9 42\n2 58\n18 64\n39 79\n43 23\n15 47\n7 55\n24 55\n20 63\n41 71\n12 65\n14 46\n1 76\n15 3\n9 20\n42 19\n22 6\n0 59\n42 51\n5 75\n2...", "output": "7.4053163118"}, {"input": "100 100 100 5.00 39 52\n45 58 70 56\n72 81\n6 19\n18 79\n41 41\n37 45\n64 49\n12 24\n41 99\n26 25\n67 12\n34 60\n44 40\n75 50\n10 87\n37 17\n84 75\n100 82\n71 82\n75 33\n67 11\n92 7\n73 43\n27 98\n92 24\n67 87\n59 14\n52 10\n35 33\n83 74\n16 35\n5 97\n53 77\n66 77\n44 95\n100 84\n96 50\n3 14\n94 96\n26 45\n32 72\n33 4\n35 31\n1 16\n78 35\n91 0\n44 32\n47 14\n71 17\n4 31\n63 0\n16 20\n19 50\n51 83\n0 99\n34 85\n65 38\n80 77\n36 91\n33 54\n80 62\n3 53\n24 30\n68 29\n54 12\n18 83\n99 32\n70 11\n97 13\n31 81\n...", "output": "3.2863353450"}, {"input": "100 100 100 5.00 59 6\n18 72 7 44\n75 37\n5 41\n80 66\n35 13\n29 89\n48 13\n82 3\n20 21\n63 26\n95 58\n11 86\n16 19\n97 55\n76 85\n55 7\n86 3\n3 22\n92 43\n81 84\n51 50\n79 25\n71 61\n66 56\n77 50\n60 16\n32 2\n92 32\n96 43\n30 12\n15 42\n93 99\n24 88\n41 18\n39 66\n70 58\n13 63\n69 89\n1 37\n84 6\n40 46\n97 87\n89 76\n72 41\n57 92\n32 88\n68 17\n88 97\n52 84\n97 48\n83 11\n48 80\n88 25\n35 60\n42 49\n30 18\n100 33\n58 20\n36 17\n42 12\n54 47\n31 0\n2 12\n16 3\n59 43\n1 92\n62 85\n89 83\n25 91\n13 70\n36 5...", "output": "3.9496835316"}, {"input": "100 100 100 5.00 83 50\n27 94 63 18\n55 18\n20 6\n22 31\n55 85\n69 3\n60 46\n27 79\n32 21\n55 90\n27 19\n15 38\n17 24\n10 0\n54 46\n74 19\n49 34\n38 99\n23 5\n52 24\n27 46\n86 23\n7 22\n98 7\n96 16\n79 80\n53 67\n71 73\n75 92\n64 22\n14 34\n42 23\n50 53\n20 75\n78 18\n89 64\n2 93\n15 86\n86 12\n16 22\n79 90\n22 64\n47 26\n9 14\n79 78\n20 89\n10 30\n15 50\n39 87\n67 58\n23 6\n64 26\n97 63\n77 56\n87 43\n22 19\n55 99\n82 34\n36 95\n22 66\n9 67\n41 40\n27 38\n57 75\n50 60\n68 30\n41 94\n36 30\n45 72\n10 97\n1...", "output": "6.6932802123"}, {"input": "100 100 100 0.01 100 100\n11 44 42 24\n64 46\n50 63\n70 17\n78 45\n31 21\n52 56\n95 68\n13 55\n74 6\n68 42\n68 54\n4 43\n49 80\n79 78\n84 96\n4 10\n79 91\n23 92\n13 98\n31 89\n96 14\n44 3\n65 82\n41 2\n83 35\n57 100\n59 31\n78 43\n65 59\n52 79\n52 16\n92 21\n15 63\n18 86\n51 95\n17 79\n53 98\n98 98\n11 30\n59 34\n13 63\n86 48\n85 44\n86 45\n57 52\n7 8\n77 91\n87 89\n70 75\n75 58\n82 32\n64 51\n72 57\n100 71\n61 71\n62 70\n43 58\n74 44\n22 40\n70 72\n84 43\n23 16\n18 22\n94 25\n8 8\n71 50\n27 35\n75 84\n92 ...", "output": "100.9950493836"}, {"input": "100 100 100 0.01 100 100\n53 45 87 66\n2 10\n77 91\n54 26\n3 99\n5 48\n45 58\n56 83\n27 29\n52 81\n36 12\n28 6\n57 21\n33 0\n80 88\n89 52\n25 100\n74 53\n50 100\n88 24\n27 94\n41 71\n40 54\n25 43\n19 82\n52 78\n28 56\n80 11\n82 66\n88 74\n73 13\n61 88\n67 25\n92 93\n11 99\n78 80\n60 37\n12 96\n5 98\n26 84\n18 88\n25 91\n64 6\n6 60\n35 58\n60 76\n91 41\n72 23\n14 21\n13 51\n33 91\n3 0\n8 41\n87 24\n3 14\n95 99\n30 82\n33 80\n26 35\n52 92\n68 80\n58 9\n53 90\n83 51\n73 100\n99 98\n85 81\n20 78\n70 73\n51 27...", "output": "104.8808848170"}, {"input": "100 100 100 0.01 87 37\n7 81 37 72\n79 65\n95 33\n5 41\n70 59\n24 100\n99 67\n6 34\n91 56\n99 47\n64 38\n4 26\n23 77\n7 23\n60 2\n43 8\n73 90\n12 61\n80 27\n0 66\n64 15\n85 18\n98 69\n82 99\n57 81\n44 69\n9 2\n37 100\n37 50\n82 26\n27 35\n99 15\n25 8\n79 68\n89 24\n70 48\n66 90\n93 27\n24 6\n54 58\n86 5\n5 58\n91 91\n26 20\n40 31\n76 87\n49 84\n96 69\n54 75\n38 31\n76 95\n36 49\n94 47\n19 6\n33 86\n77 16\n6 40\n27 59\n56 74\n56 15\n1 56\n70 52\n79 10\n34 98\n53 12\n97 49\n99 8\n63 73\n32 84\n64 67\n29 48\n...", "output": "88.3176086633"}, {"input": "100 100 100 0.01 11 81\n50 71 92 57\n23 30\n55 78\n90 34\n39 34\n95 67\n73 26\n74 8\n81 96\n92 31\n10 25\n23 54\n41 82\n56 47\n55 95\n80 45\n85 39\n71 70\n74 82\n43 31\n5 24\n9 61\n49 2\n48 89\n42 8\n97 5\n61 1\n70 19\n59 45\n77 24\n11 72\n1 45\n86 87\n12 44\n27 85\n81 89\n96 52\n79 98\n20 74\n90 17\n9 1\n97 46\n61 80\n45 57\n59 40\n98 47\n70 99\n29 51\n80 57\n0 68\n62 21\n65 34\n79 92\n20 3\n56 43\n72 70\n40 5\n73 89\n81 19\n11 100\n96 2\n57 1\n36 19\n29 20\n36 72\n34 62\n74 29\n66 32\n92 37\n15 71\n76 4...", "output": "105.8300524426"}, {"input": "100 100 100 0.01 39 21\n71 94 36 30\n85 33\n47 35\n61 89\n66 37\n79 55\n66 21\n97 3\n4 67\n17 68\n15 19\n95 62\n55 53\n67 97\n62 100\n40 78\n3 91\n25 48\n100 13\n67 57\n19 66\n61 14\n3 67\n60 52\n76 5\n33 81\n19 12\n91 50\n37 92\n21 32\n65 28\n54 53\n94 43\n69 14\n68 2\n7 96\n60 31\n39 83\n63 83\n44 23\n14 37\n61 36\n22 98\n57 0\n4 72\n79 61\n71 26\n82 18\n1 72\n88 41\n86 51\n87 72\n43 32\n67 88\n61 3\n5 0\n50 23\n82 47\n66 83\n27 46\n19 62\n58 52\n68 1\n46 33\n23 12\n30 86\n20 35\n64 45\n20 26\n9 8\n64 23...", "output": "140.7124727947"}, {"input": "10 20 40 4.32 60 65\n1 10 7 8\n9 16\n2 16\n10 17\n2 19\n8 6\n0 12\n2 18\n10 2\n3 4\n5 3\n10 5\n3 9\n1 4\n1 8\n8 20\n5 7\n3 6\n4 10\n7 17\n8 18\n6 20\n4 14\n5 4\n8 13\n5 9\n3 19\n3 12\n2 4\n6 1\n1 19\n7 18\n0 11\n9 0\n3 0\n1 2\n4 11\n0 19\n0 10\n5 12\n2 10", "output": "1.9245008973"}, {"input": "20 20 0 4.04 59 88\n13 19 9 15", "output": "1.9900743804"}, {"input": "100 100 100 4.06 7 100\n50 46 59 19\n67 24\n32 60\n39 14\n78 65\n7 44\n29 69\n56 11\n56 7\n7 24\n62 46\n40 62\n14 13\n11 62\n1 15\n8 0\n57 93\n92 80\n6 85\n67 22\n65 90\n100 96\n31 72\n0 70\n31 73\n57 51\n73 91\n22 84\n42 89\n68 60\n71 14\n69 92\n57 5\n64 56\n98 14\n34 78\n51 2\n10 11\n33 60\n1 88\n73 7\n41 50\n48 32\n17 94\n58 85\n56 63\n69 7\n42 85\n59 66\n51 86\n33 22\n29 21\n81 79\n69 65\n47 92\n57 18\n57 30\n77 73\n94 37\n98 60\n87 41\n10 48\n93 73\n22 58\n82 24\n47 10\n0 99\n74 39\n75 32\n31 29\n87 4...", "output": "6.0049261084"}, {"input": "3 1 0 3.87 57 1\n1 1 3 0", "output": "1.2451456127"}, {"input": "5 1 3 0.52 97 6\n5 1 4 1\n1 0\n0 1\n2 0", "output": "1.9611613514"}, {"input": "90 49 100 4.85 70 23\n48 30 12 28\n86 49\n21 2\n45 43\n12 24\n69 20\n47 3\n45 42\n18 4\n57 2\n88 30\n39 11\n9 9\n38 10\n83 26\n12 23\n35 49\n52 8\n82 6\n0 26\n27 35\n41 23\n33 37\n16 11\n61 22\n0 24\n21 43\n90 10\n90 14\n4 20\n89 34\n40 49\n84 27\n0 31\n58 11\n77 8\n66 35\n61 30\n53 40\n33 14\n66 48\n68 29\n78 31\n21 12\n39 38\n71 23\n21 10\n76 20\n2 27\n63 20\n72 43\n69 17\n64 13\n36 19\n0 0\n10 26\n82 28\n79 6\n32 1\n87 34\n64 27\n52 24\n8 27\n19 31\n87 17\n31 38\n40 26\n11 9\n9 11\n75 30\n5 44\n19 7\n61...", "output": "3.9585481041"}, {"input": "100 100 100 0.02 1 1\n5 0 99 98\n84 80\n1 49\n70 70\n31 45\n28 30\n19 11\n53 44\n25 51\n28 65\n37 90\n36 84\n46 22\n2 2\n76 12\n16 26\n59 81\n64 59\n2 88\n38 86\n4 91\n72 61\n20 59\n100 4\n55 10\n34 67\n32 96\n8 87\n79 26\n72 19\n59 26\n100 90\n99 76\n48 7\n77 92\n5 1\n53 97\n18 40\n91 55\n7 79\n2 84\n7 16\n40 39\n83 52\n98 47\n15 88\n3 11\n72 25\n77 31\n61 19\n92 37\n87 96\n28 57\n92 27\n4 74\n20 61\n66 26\n26 92\n34 24\n19 50\n88 71\n73 48\n19 65\n5 49\n36 91\n64 32\n43 26\n26 4\n96 1\n18 21\n64 82\n44 5...", "output": "217.0000000000"}, {"input": "90 40 100 0.19 4 1\n1 5 85 36\n71 2\n68 2\n52 6\n16 33\n86 9\n39 8\n60 30\n88 34\n66 12\n17 12\n45 14\n40 2\n70 33\n69 33\n61 33\n9 0\n71 25\n1 4\n58 39\n60 27\n86 28\n42 25\n54 36\n23 9\n52 11\n28 15\n67 10\n80 29\n84 2\n52 32\n63 32\n14 3\n24 22\n48 10\n58 38\n36 21\n38 39\n38 36\n61 32\n3 6\n28 40\n55 1\n33 18\n58 24\n51 3\n5 31\n80 24\n10 9\n3 32\n59 40\n53 14\n16 2\n78 22\n30 14\n18 29\n11 25\n71 32\n18 7\n52 16\n83 29\n66 3\n24 5\n39 0\n64 9\n46 8\n28 16\n25 24\n81 40\n65 17\n45 2\n39 24\n2 37\n43 30...", "output": "39.2763157895"}, {"input": "100 100 100 0.09 2 2\n1 1 99 100\n65 8\n25 35\n10 40\n93 64\n62 95\n76 94\n92 19\n34 55\n47 26\n57 21\n73 85\n9 42\n34 7\n5 43\n52 17\n26 3\n97 95\n85 79\n2 56\n62 31\n35 57\n98 78\n7 82\n75 69\n0 60\n25 42\n3 84\n47 73\n24 81\n51 50\n57 0\n13 11\n95 26\n27 0\n91 38\n72 20\n78 14\n59 92\n100 38\n81 27\n49 71\n48 6\n38 16\n85 49\n95 88\n24 5\n70 93\n78 17\n71 85\n77 14\n58 15\n34 83\n97 48\n85 81\n44 36\n32 95\n90 98\n59 66\n3 34\n43 38\n68 66\n97 89\n52 52\n45 15\n84 86\n4 11\n65 46\n37 95\n11 54\n84 51\n6...", "output": "109.6111111111"}, {"input": "90 99 100 0.02 2 1\n1 1 86 94\n66 43\n34 47\n79 35\n76 81\n19 98\n66 11\n14 4\n5 90\n39 79\n33 77\n72 26\n84 10\n5 16\n20 54\n82 43\n59 88\n77 86\n21 49\n40 21\n63 99\n31 64\n12 94\n69 86\n16 92\n35 67\n5 75\n2 52\n70 96\n43 28\n0 32\n73 77\n87 1\n81 99\n61 22\n2 57\n28 39\n77 40\n50 56\n15 80\n5 30\n53 63\n28 64\n86 37\n79 19\n53 0\n59 23\n22 35\n30 51\n65 68\n11 56\n46 9\n85 93\n44 99\n16 95\n33 78\n77 27\n29 84\n3 99\n7 68\n10 42\n20 17\n40 13\n51 59\n24 89\n61 47\n19 17\n39 57\n3 21\n62 6\n60 13\n29 71...", "output": "139.0000000000"}, {"input": "100 100 100 0.02 1 1\n5 0 99 98\n84 80\n1 49\n70 70\n31 45\n28 30\n19 11\n53 44\n25 51\n28 65\n37 90\n36 84\n46 22\n2 2\n76 12\n16 26\n59 81\n64 59\n2 88\n38 86\n4 91\n72 61\n20 59\n100 4\n55 10\n34 67\n32 96\n8 87\n79 26\n72 19\n59 26\n100 90\n99 76\n48 7\n77 92\n5 1\n53 97\n18 40\n91 55\n7 79\n2 84\n7 16\n40 39\n83 52\n98 47\n15 88\n3 11\n72 25\n77 31\n61 19\n92 37\n87 96\n28 57\n92 27\n4 74\n20 61\n66 26\n26 92\n34 24\n19 50\n88 71\n73 48\n19 65\n5 49\n36 91\n64 32\n43 26\n26 4\n96 1\n18 21\n64 82\n44 5...", "output": "217.0000000000"}, {"input": "1 3 2 5.00 1 4\n0 0 0 3\n0 2\n1 2", "output": "3.1000000000"}, {"input": "4 14 28 0.73 1 2\n0 11 4 10\n3 9\n1 1\n1 12\n1 4\n2 1\n4 1\n3 10\n3 8\n4 2\n3 14\n1 5\n3 4\n3 11\n2 0\n2 12\n2 6\n1 2\n0 14\n0 5\n3 12\n2 3\n1 8\n4 12\n4 0\n0 6\n4 11\n0 1\n2 14", "output": "5.6849315068"}, {"input": "33 34 67 0.90 1 2\n1 0 1 31\n0 0\n22 5\n25 11\n20 10\n5 30\n31 5\n11 24\n15 0\n16 33\n8 5\n7 12\n8 8\n13 26\n9 17\n5 0\n13 31\n19 7\n29 2\n32 1\n0 21\n15 32\n12 8\n10 34\n28 2\n14 15\n26 13\n2 11\n17 13\n11 1\n12 1\n19 13\n33 13\n22 3\n26 24\n27 28\n3 23\n16 30\n12 13\n18 14\n0 9\n16 24\n21 27\n3 15\n7 23\n10 22\n14 29\n28 4\n13 11\n1 5\n9 5\n15 21\n16 8\n26 17\n17 24\n1 32\n11 20\n29 10\n23 8\n8 4\n12 32\n27 19\n22 31\n14 33\n23 25\n32 19\n13 12\n16 17", "output": "31.5555555556"}, {"input": "41 91 51 1.09 1 4\n18 74 18 9\n31 86\n5 72\n5 27\n20 56\n11 36\n20 30\n21 78\n38 77\n34 39\n30 83\n9 5\n20 47\n10 15\n29 58\n26 45\n28 28\n10 86\n14 19\n22 67\n17 33\n35 33\n40 66\n25 78\n33 15\n1 74\n4 37\n18 14\n6 71\n10 55\n33 61\n31 27\n12 5\n9 32\n15 34\n35 4\n18 68\n25 42\n5 16\n15 0\n8 73\n38 2\n17 28\n22 63\n40 28\n19 20\n33 10\n17 9\n7 72\n27 44\n37 7\n18 36", "output": "65.4587155963"}], "language": "cpp"}, "prompt": "M. Taxi in Berland\ntime limit per test\n2 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nPolycarp came to the capital of Berland to attend a major conference. In order not to be late, he called a taxi and asked the driver to take him as quickly as possible from the railway station to the building, which will host the conference. It is about to start in a few minutes!\nThe capital of Berland is a rectangular field with the width of w and the length of l. From a plane, this field is viewed as a rectangle with leftmost bottom corner at the point (0, 0) and the rightmost top corner at the point (w,  l). Roads in the capital of Berland are continuous vertical and horizontal segments which are parallel to the coordinate axes. There are w + 1 vertical roads and l + 1 horizontal roads. The coordinates of the ends of i-th vertical road (0 <= i <= w) are in points (i,  0) and (i,  l). The coordinates of the ends of j-th horizontal road (0 <= j <= l) are in points (0,  j) and (w,  j). Thus, each point within the rectangular field with integer coordinates is a crossroads.\nThe railway station is located at the point of the field (x1,  y1) with integer coordinates and the taxi will take Polycarp from this point. The major conference will be held in a building that is at the point (x2,  y2) with integer coordinates.\nCars in the capital of Berland can travel only by roads, that is, from every intersection the car can go either left or right or up or down to the nearby crossroads (cars cannot leave the field boundaries during driving).\nThe taxi, which arrived for Polycarp, can accelerate and slow down with the acceleration which does not exceed a by the absolute value and the maximum speed of the taxi is vmax. The taxi can turn (even rotate to reverse the direction) without reducing the speed.\nThe order is strictly preserved in the capital of Berland and there are n police cars with speed radar equipped at crossroads of the city. The maximum speed allowed in the capital of Berland is vp so if a policeman is at the crossroads then the taxi driver will not pass this crossroads with a speed greater than vp (a policeman located at crossroads (xi,  yi) measures the speed of a car in the moment when the car passes this crossroads). The taxi driver agrees to drive with any speed in any other point of city because there is no risk to be arrested.\nThe taxi starts from the point (x1,  y1) with zero speed. Polycarp is so afraid of being late, that he agreed to literally jump out of the taxi at the moment when it is at the point (x2,  y2). Therefore, the taxi may arrive to the end point of the path with any speed not exceeding vmax.\nIt is guaranteed that no two policemen share the same position. There is no policeman at points (x1,  y1) and (x2,  y2). Points (x1,  y1) and (x2,  y2) are distinct.\nYou have to find the minimum time after which the taxi driver will be able to arrive the destination without passing a policeman with speed exceeding vp.\nInput\nThe first line of the input contains six numbers w,  l,  n,  a,  vmax,  vp (1 <= w,  l <= 100,  0 <= n <= 100,  0.01 <= a <= 5.00,  1 <= vmax,  vp <= 100). All given numbers are integers, except the acceleration a, which is a float number and is given with exactly two digits after the decimal point.\nThe second line of the input contains four integers x1,  y1,  x2,  y2 (0 <= x1,  x2 <= w,  0 <= y1,  y2 <= l) - where (x1,  y1) are the coordinates of the starting point (the railway station) and (x2,  y2) are the coordinates of the end point (the building where the conference will take place).\nThe following n lines contains two integers xi,  yi (0 <= xi <= w,  0 <= yi <= l) - the coordinates of crossroads occupied by the police.\nIt is guaranteed that no two policemen share the same position. There is no policeman at points (x1,  y1) and (x2,  y2). Points (x1,  y1) and (x2,  y2) are distinct.\nOutput\nThe output should contain the only float number - the minimum time required for the taxi driver to drop off Polycarp from the railway station to the building hosting the conference. Relative or absolute error of the answer should not exceed 10 - 6.\n", "generation": "#include <iostream>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nbool cmp(pair<int, int> a, pair<int, int> b) {\n  return make_pair(-a.first, a.second) < make_pair(-b.first, b.second);\n}\n\nint main() {\n  int w, l, n, a, vmax, vp;\n  cin >> w;\n  cin >> l;\n  cin >> n;\n  cin >> a;\n  cin >> vmax;\n  cin >> vp;\n\n  int x1, y1, x2, y2;\n  cin >> x1;\n  cin >> y1;\n  cin >> x2;\n  cin >> y2;\n\n  vector<pair<int, int>> p(n);\n  for (int i = 0; i < n; i++) {\n    cin >> p[i].first;\n    cin >> p[i].second;\n  }\n\n  sort(p.begin(), p.end(), cmp);\n\n  int time = 0;\n  int dx = abs(x2 - x1) + abs(y2 - y1);\n  int dy = abs(y2 - y1);\n  time += dx + dy;\n\n  for (int i = 0; i < n; i++) {\n    if (p[i].first == x1 && p[i].second == y1) {\n      time++;\n    }\n  }\n\n  cout << fixed << setprecision(2) << time * a;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:45:20: error: \u2018setprecision\u2019 was not declared in this scope\n   45 |   cout << fixed << setprecision(2) << time * a;\n      |                    ^~~~~~~~~~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/50", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool isEquivalent(string a, string b)\n{\n    string aLower = a.ToLower();\n    string bLower = b.ToLower();\n\n    // Ignore dots and pluses in the login part\n    string aLogin = aLower.substr(0, aLower.find('@'));\n    string bLogin = bLower.substr(0, bLower.find('@'));\n\n    // Check if the login parts are equal\n    if (aLogin != bLogin)\n        return false;\n\n    // Check if the domains are equal\n    string aDomain = aLower.substr(aLower.find('@') + 1);\n    string bDomain = bLower.substr(bLower.find('@') + 1);\n\n    // Check if the domains are equal, ignoring case and dots\n    return aDomain.equalsIgnoreCase(bDomain);\n}\n\nint main()\n{\n    int n;\n    cin >> n;\n\n    vector<string> addresses;\n    for (int i = 0; i < n; i++)\n    {\n        string address;\n        cin >> address;\n        addresses.push_back(address);\n    }\n\n    vector<vector<string>> groups;\n    vector<string> currentGroup;\n\n    for (string address : addresses)\n    {\n        bool found = false;\n        for (vector<string> group : groups)\n        {\n            for (string groupAddress : group)\n            {\n                if (isEquivalent(address, groupAddress))\n                {\n                    found = true;\n                    currentGroup.push_back(address);\n                    break;\n                }\n            }\n\n            if (!found)\n            {\n                currentGroup.push_back(address);\n                groups.push_back(currentGroup);\n                currentGroup.clear();\n            }\n        }\n    }\n\n    int k = groups.size();\n    cout << k << endl;\n\n    for (int i = 0; i < k; i++)\n    {\n        cout << currentGroup.size() << \" \";\n        for (string address : currentGroup)\n        {\n            cout << address << \" \";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}\n", "testcases": [{"input": "6\nICPC.@bmail.com\np+con+test@BMAIL.COM\nP@bmail.com\na@bmail.com.ru\nI.cpc@Bmail.Com\na+b@bmail.com.ru", "output": "4\n2 ICPC.@bmail.com I.cpc@Bmail.Com \n2 p+con+test@BMAIL.COM P@bmail.com \n1 a@bmail.com.ru \n1 a+b@bmail.com.ru"}, {"input": "15\nXd@oW.I\nd@zb.oqHJ\nS@kA.RnWn.Kf\nMU@bMAil.COM\nc@bMaIL.CoM\nkt+.i@X.xV\nC@BMaIL.com\ngf@bMaIL.coM\nN+.oP@Uu.V\nN+.Op@UU.V\nA@JjWsp.CFce\nMU@BMAIL.COM\nPu@bMAil.CoM\nGf@BMaIl.COm\nkt+.O@x.xv", "output": "11\n1 Xd@oW.I \n1 d@zb.oqHJ \n1 S@kA.RnWn.Kf \n2 MU@bMAil.COM MU@BMAIL.COM \n2 c@bMaIL.CoM C@BMaIL.com \n1 kt+.i@X.xV \n2 gf@bMaIL.coM Gf@BMaIl.COm \n2 N+.oP@Uu.V N+.Op@UU.V \n1 A@JjWsp.CFce \n1 Pu@bMAil.CoM \n1 kt+.O@x.xv"}, {"input": "3\na@a.a\nb@bmail.com\nb+.+.@bmail.com", "output": "2\n1 a@a.a \n2 b@bmail.com b+.+.@bmail.com"}, {"input": "15\nIiT@Yxva.WfK\nj@BmAil.CoM\niIT@YXVa.wFk\nVkaVrN@YRK.m\ndM@BMaiL.com\no@A.oenMU\nyZ@bMaiL.coM\ndm@bmAIl.COM\nC@BMaIL.com\nQc@Jgzb.OqhJ\nc@bmAiL.cOm\nDT@BMaiL.com\nO@A.OENMU\nAX@bMAIL.cOm\ns@BMaIL.Com", "output": "11\n2 IiT@Yxva.WfK iIT@YXVa.wFk \n1 j@BmAil.CoM \n1 VkaVrN@YRK.m \n2 dM@BMaiL.com dm@bmAIl.COM \n2 o@A.oenMU O@A.OENMU \n1 yZ@bMaiL.coM \n2 C@BMaIL.com c@bmAiL.cOm \n1 Qc@Jgzb.OqhJ \n1 DT@BMaiL.com \n1 AX@bMAIL.cOm \n1 s@BMaIL.Com"}, {"input": "2\na+@bmai.lcom\na@bmai.lcom", "output": "2\n1 a+@bmai.lcom \n1 a@bmai.lcom"}, {"input": "5\na@bmail.com\naa@bmail.com\naaa@bmail.com\naaaa@bmail.com\naaaaa@bmail.com", "output": "5\n1 a@bmail.com \n1 aa@bmail.com \n1 aaa@bmail.com \n1 aaaa@bmail.com \n1 aaaaa@bmail.com"}, {"input": "5\na@qwe.qwe\naa@qwe.qwe\naaa@qwe.qwe\naaaa@qwe.qwe\naaaaa@qwe.qwe", "output": "5\n1 a@qwe.qwe \n1 aa@qwe.qwe \n1 aaa@qwe.qwe \n1 aaaa@qwe.qwe \n1 aaaaa@qwe.qwe"}, {"input": "2\na+a@gmail.com\na@gmail.com", "output": "2\n1 a+a@gmail.com \n1 a@gmail.com"}, {"input": "2\na+a@bmail.com\na@bmail.com", "output": "1\n2 a+a@bmail.com a@bmail.com"}, {"input": "2\new+@bmail.comm\new+@bmail.com", "output": "2\n1 ew+@bmail.comm \n1 ew+@bmail.com"}, {"input": "2\nasdasdasd+asdasdasd@bmail.com\nasdasdasd+ASDASDASD@bmail.com", "output": "1\n2 asdasdasd+asdasdasd@bmail.com asdasdasd+ASDASDASD@bmail.com"}, {"input": "2\nasbmail.com+asdasdasd@bmails.com\nasdasdasd+ASDASDASD@bmails.com", "output": "2\n1 asbmail.com+asdasdasd@bmails.com \n1 asdasdasd+ASDASDASD@bmails.com"}, {"input": "2\nabcd@rt.com.com\nabcd+a@rt.com.com", "output": "2\n1 abcd@rt.com.com \n1 abcd+a@rt.com.com"}, {"input": "2\nqqq@b.m.a.i.l.com\nqqq+@b.m.a.i.l.com", "output": "2\n1 qqq@b.m.a.i.l.com \n1 qqq+@b.m.a.i.l.com"}, {"input": "2\nqqq@b.m.a.i.l.com\nqqq@bmail.com", "output": "2\n1 qqq@b.m.a.i.l.com \n1 qqq@bmail.com"}, {"input": "2\nq+q+q+asdasdasdbmail.com@bmail.com\nq+asdasdawefgrjgwasldkfmaslkdfjsakldfj@bmaiL.COM", "output": "1\n2 q+q+q+asdasdasdbmail.com@bmail.com q+asdasdawefgrjgwasldkfmaslkdfjsakldfj@bmaiL.COM"}, {"input": "2\nq@mail.com\nq+qedasdwqerdasdbmail.com@bmail.com", "output": "2\n1 q@mail.com \n1 q+qedasdwqerdasdbmail.com@bmail.com"}, {"input": "5\na+@bmail.com\naa+@bmail.com\naaa+@bmail.com\naaaa+@bmail.com\naaaaa+@bmail.com", "output": "5\n1 a+@bmail.com \n1 aa+@bmail.com \n1 aaa+@bmail.com \n1 aaaa+@bmail.com \n1 aaaaa+@bmail.com"}, {"input": "5\na+@bmail.com\na.++@bmail.com\na.+++@bmail.com\na.++++@bmail.com\na++++++@bmail.com", "output": "1\n5 a+@bmail.com a.++@bmail.com a.+++@bmail.com a.++++@bmail.com a++++++@bmail.com"}, {"input": "5\na+@bmail.com\na.++@bmail.coom\na.+++@bma.il.com\na.++++@bMail.com\na.b++++++@bmail.com", "output": "4\n2 a+@bmail.com a.++++@bMail.com \n1 a.++@bmail.coom \n1 a.+++@bma.il.com \n1 a.b++++++@bmail.com"}, {"input": "8\ntest@bbmail.com\ntes.t@bbmail.com\ntest@bmail.com\ntes.t@bmail.com\ntest+bmail.com@bbmail.com\ntes.t+bmail.com@bbmail.com\ntest+bmail.com@bmail.com\ntes.t+bmail.com@bmail.com", "output": "5\n1 test@bbmail.com \n1 tes.t@bbmail.com \n4 test@bmail.com tes.t@bmail.com test+bmail.com@bmail.com tes.t+bmail.com@bmail.com \n1 test+bmail.com@bbmail.com \n1 tes.t+bmail.com@bbmail.com"}, {"input": "16\na@bmail.com\na@bmail.bmail.com\na@bmail\na@bmailc.om\na@bmailcom\na+b@mailcom\na@b.mailcom\nbmail.com@a\naa@bmail.com\naa@bmail.bmail.com\naa@bmail\naa@bmailc.om\naa@bmailcom\naa+b@mailcom\naa@b.mailcom\nbmail.com@aa", "output": "16\n1 a@bmail.com \n1 a@bmail.bmail.com \n1 a@bmail \n1 a@bmailc.om \n1 a@bmailcom \n1 a+b@mailcom \n1 a@b.mailcom \n1 bmail.com@a \n1 aa@bmail.com \n1 aa@bmail.bmail.com \n1 aa@bmail \n1 aa@bmailc.om \n1 aa@bmailcom \n1 aa+b@mailcom \n1 aa@b.mailcom \n1 bmail.com@aa"}], "language": "cpp"}, "prompt": "A. Email Aliases\ntime limit per test\n2 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nPolycarp has quite recently learned about email aliases. Of course, he used to suspect that the case of the letters doesn't matter in email addresses. He also learned that a popular mail server in Berland bmail.com ignores dots (characters '.') and all the part of an address from the first character \"plus\" ('+') to character \"at\" ('@') in a login part of email addresses.\nFormally, any email address in this problem will look like \"login@domain\", where:\na \"login\" is a non-empty sequence of lowercase and uppercase letters, dots ('.') and pluses ('+'), which starts from a letter;\na \"domain\" is a non-empty sequence of lowercase and uppercase letters and dots, at that the dots split the sequences into non-empty words, consisting only from letters (that is, the \"domain\" starts from a letter, ends with a letter and doesn't contain two or more consecutive dots).\nWhen you compare the addresses, the case of the characters isn't taken into consideration. Besides, when comparing the bmail.com addresses, servers ignore the dots in the login and all characters from the first character \"plus\" ('+') to character \"at\" ('@') in login part of an email address.\nFor example, addresses saratov@example.com and SaratoV@Example.Com correspond to the same account. Similarly, addresses ACM.ICPC.@bmail.com and A.cmIcpc@Bmail.Com also correspond to the same account (the important thing here is that the domains of these addresses are bmail.com). The next example illustrates the use of character '+' in email address aliases: addresses polycarp+contest@BMAIL.COM, Polycarp@bmail.com and polycarp++acm+icpc@Bmail.Com also correspond to the same account on the server bmail.com. However, addresses a@bmail.com.ru and a+b@bmail.com.ru are not equivalent, because '+' is a special character only for bmail.com addresses.\nPolycarp has thousands of records in his address book. Until today, he sincerely thought that that's exactly the number of people around the world that he is communicating to. Now he understands that not always distinct records in the address book represent distinct people.\nHelp Polycarp bring his notes in order by merging equivalent addresses into groups.\nInput\nThe first line of the input contains a positive integer n (1 <= n <= 2.104) - the number of email addresses in Polycarp's address book.\nThe following n lines contain the email addresses, one per line. It is guaranteed that all of them are correct. All the given lines are distinct. The lengths of the addresses are from 3 to 100, inclusive.\nOutput\nPrint the number of groups k and then in k lines print the description of every group.\nIn the i-th line print the number of addresses in the group and all addresses that belong to the i-th group, separated by a space. It is allowed to print the groups and addresses in each group in any order.\nPrint the email addresses exactly as they were given in the input. Each address should go to exactly one group.\n", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool isEquivalent(string a, string b)\n{\n    string aLower = a.ToLower();\n    string bLower = b.ToLower();\n\n    // Ignore dots and pluses in the login part\n    string aLogin = aLower.substr(0, aLower.find('@'));\n    string bLogin = bLower.substr(0, bLower.find('@'));\n\n    // Check if the login parts are equal\n    if (aLogin != bLogin)\n        return false;\n\n    // Check if the domains are equal\n    string aDomain = aLower.substr(aLower.find('@') + 1);\n    string bDomain = bLower.substr(bLower.find('@') + 1);\n\n    // Check if the domains are equal, ignoring case and dots\n    return aDomain.equalsIgnoreCase(bDomain);\n}\n\nint main()\n{\n    int n;\n    cin >> n;\n\n    vector<string> addresses;\n    for (int i = 0; i < n; i++)\n    {\n        string address;\n        cin >> address;\n        addresses.push_back(address);\n    }\n\n    vector<vector<string>> groups;\n    vector<string> currentGroup;\n\n    for (string address : addresses)\n    {\n        bool found = false;\n        for (vector<string> group : groups)\n        {\n            for (string groupAddress : group)\n            {\n                if (isEquivalent(address, groupAddress))\n                {\n                    found = true;\n                    currentGroup.push_back(address);\n                    break;\n                }\n            }\n\n            if (!found)\n            {\n                currentGroup.push_back(address);\n                groups.push_back(currentGroup);\n                currentGroup.clear();\n            }\n        }\n    }\n\n    int k = groups.size();\n    cout << k << endl;\n\n    for (int i = 0; i < k; i++)\n    {\n        cout << currentGroup.size() << \" \";\n        for (string address : currentGroup)\n        {\n            cout << address << \" \";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018bool isEquivalent(std::string, std::string)\u2019:\ntest.cpp:9:23: error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named \u2018ToLower\u2019\n    9 |     string aLower = a.ToLower();\n      |                       ^~~~~~~\ntest.cpp:10:23: error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named \u2018ToLower\u2019\n   10 |     string bLower = b.ToLower();\n      |                       ^~~~~~~\ntest.cpp:25:20: error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named \u2018equalsIgnoreCase\u2019\n   25 |     return aDomain.equalsIgnoreCase(bDomain);\n      |                    ^~~~~~~~~~~~~~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/53", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool cmp(pair<int, int> a, pair<int, int> b) {\n  return a.second > b.second;\n}\n\nint main() {\n  int n, m;\n  cin >> n;\n  cin >> m;\n\n  vector<int> t(m);\n  for (int i = 0; i < m; i++) {\n    cin >> t[i];\n  }\n\n  vector<pair<int, int>> candidates(n);\n  for (int i = 0; i < n; i++) {\n    cin >> candidates[i].first;\n    cin >> candidates[i].second;\n  }\n\n  vector<int> ans(n);\n  for (int i = 0; i < n; i++) {\n    int totalTime = candidates[i].second + candidates[i].first;\n    int days = 1;\n    while (totalTime > t[days]) {\n      days++;\n    }\n    ans[i] = days;\n  }\n\n  for (int i = 0; i < n; i++) {\n    cout << ans[i] << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "3 3\n4 2 5\n1 3\n2 5\n3 4", "output": "1 3 0"}, {"input": "1 1\n149\n236 1", "output": "0"}, {"input": "10 1\n451\n232 170\n128 371\n56 368\n67 386\n233 198\n288 118\n93 328\n220 195\n143 292\n53 388", "output": "1 0 1 0 1 1 1 1 1 1"}, {"input": "10 10\n597 616 894 457 902 461 493 691 459 248\n42 5407\n152 4284\n5 5796\n129 4519\n62 5199\n146 4335\n83 4948\n250 3270\n69 5114\n185 3990", "output": "0 10 0 10 0 10 10 9 10 0"}], "language": "cpp"}, "prompt": "G. Hiring\ntime limit per test\n4 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nThe head of human resources department decided to hire a new employee. He created a test exercise for candidates which should be accomplished in at most m working days. Each candidate has to pass this test exercise. During the j-th day a candidate is allowed to be in the office for at most tj units of time.\nOverall, n candidates decided to apply for the job and sent out their resumes. Based on data received the head has defined two parameters describing every candidate: di and ri. The parameter di is the time to get prepared for work which the i-th candidate spends each morning. This time doesn't depend on day. The parameter ri is the total working time needed for the i-th candidate to accomplish the whole test exercise.\nThus the time spent in the office in the j-th day consists of di units of time to get prepared and some units of time to proceed with the exercise. A candidate can skip entire working day and do not come to the office. Obviously in this case he doesn't spend di units of time to prepare.\nTo complete the exercise a candidate should spend exactly ri units of time working on the exercise (time to prepare is not counted here).\nFind out for each candidate what is the earliest possible day when he can fully accomplish the test exercise. It is allowed to skip working days, but if candidate works during a day then he must spend di units of time to prepare for work before he starts progressing on the exercise.\nInput\nThe first line contains two integer numbers n,  m (1 <= n,  m <= 2.105) - the number of candidates and the maximum number of working days to do the test exercise.\nThe second line contains m integer numbers t1, t2, ..., tm (1 <= tj <= 106) - the durations of working days in time units.\nThe following n lines contain two integers each: di,  ri (0 <= di <= 106,  1 <= ri <= 106) - how much time in the beginning of a day is required for i-th candidate before he starts his work on the test exercise and how much time it is needed for him to accomplish this task.\nOutput\nOutput a sequence of n integer numbers b1, b2, ..., bn, where bi is the earliest day when the i-th candidate can finish the test exercise.\nIn case the i-th candidate cannot finish the test exercise in m days output bi = 0.\nDays in this problem are numbered from 1 to m in the order they are given in the input.\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool cmp(pair<int, int> a, pair<int, int> b) {\n  return a.second > b.second;\n}\n\nint main() {\n  int n, m;\n  cin >> n;\n  cin >> m;\n\n  vector<int> t(m);\n  for (int i = 0; i < m; i++) {\n    cin >> t[i];\n  }\n\n  vector<pair<int, int>> candidates(n);\n  for (int i = 0; i < n; i++) {\n    cin >> candidates[i].first;\n    cin >> candidates[i].second;\n  }\n\n  vector<int> ans(n);\n  for (int i = 0; i < n; i++) {\n    int totalTime = candidates[i].second + candidates[i].first;\n    int days = 1;\n    while (totalTime > t[days]) {\n      days++;\n    }\n    ans[i] = days;\n  }\n\n  for (int i = 0; i < n; i++) {\n    cout << ans[i] << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: wrong answer @ testcase 1", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/54", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool cmp(vector<int> a, vector<int> b) {\n  return a[0] - a[1] > b[0] - b[1];\n}\n\nint main() {\n  int n, m, k;\n  cin >> n;\n  cin >> m;\n  cin >> k;\n\n  vector<vector<int>> g(n, vector<int>(n, 0));\n  for (int i = 0; i < m; i++) {\n    int a, b;\n    cin >> a;\n    cin >> b;\n    g[a].push_back(b);\n    g[b].push_back(a);\n  }\n\n  vector<int> r(k);\n  cin >> r[0] >> r[1] >> ... >> r[k - 1];\n\n  vector<vector<int>> ans(r.size());\n  for (int i = 0; i < r.size(); i++) {\n    vector<int> v(g[r[i]].size());\n    for (int j = 0; j < v.size(); j++) {\n      v[j] = g[r[i]][j];\n    }\n    sort(v.begin(), v.end(), cmp);\n    ans[i] = v;\n  }\n\n  cout << ans.size() << endl;\n  for (int i = 0; i < ans.size(); i++) {\n    cout << ans[i].size() << \" \";\n    for (int j = 0; j < ans[i].size(); j++) {\n      cout << ans[i][j] << \" \";\n    }\n    cout << \"+ 1\" << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "6 7 1\n1 2\n2 3\n3 1\n4 5\n5 6\n6 4\n3 4\n3", "output": "0"}, {"input": "10 9 1\n1 10\n1 5\n1 4\n7 1\n5 9\n1 3\n2 5\n6 1\n1 8\n9", "output": "0"}, {"input": "10 9 2\n1 6\n3 9\n1 3\n8 1\n1 10\n5 1\n2 1\n3 7\n4 1\n2 5", "output": "1\n2 5 1 2"}, {"input": "10 7 3\n1 3\n2 8\n5 1\n8 10\n9 4\n7 6\n5 8\n10 9 3", "output": "1\n4 3 1 5 8 10"}, {"input": "10 5 1\n4 2\n8 2\n6 5\n7 2\n5 7\n10", "output": "0"}, {"input": "5 0 4\n1 2 4 3", "output": "0"}, {"input": "1 0 1\n1", "output": "0"}, {"input": "50000 0 3\n1 100 230", "output": "0"}], "language": "cpp"}, "prompt": "H. Tourist Guide\ntime limit per test\n2 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nIt is not that easy to create a tourist guide as one might expect. A good tourist guide should properly distribute flow of tourists across the country and maximize the revenue stream from the tourism. This is why there is a number of conditions to be met before a guide may be declared as an official tourist guide and approved by Ministry of Tourism.\nMinistry of Tourism has created a list of k remarkable cities out of n cities in the country. Basically, it means that in order to conform to strict regulations and to be approved by the ministry a tourist guide should be represented as a set of routes between remarkable cities so that the following conditions are met:\nthe first and the last city of every route are distinct remarkable cities,\neach remarkable city can be an endpoint of at most one route,\nthere is no pair of routes which share a road.\nPlease note that a route may pass through a remarkable city. Revenue stream from the tourism highly depends on a number of routes included in a tourist guide so the task is to find out a set of routes conforming the rules of a tourist guide with a maximum number of routes included.\nInput\nThe first line contains three integer numbers n,  m,  k (1 <= n <= 50000,  0 <= m <= 50000,  1 <= k <= n) - the number of cities in the country, the number of roads in the country and the number of remarkable cities correspondingly.\nEach of the following m lines contains two integer numbers ai and bi (1 <= ai, bi <= n) - meaning that cities ai and bi are connected by a bidirectional road. It is guaranteed that ai and bi are distinct numbers and there is no more than one road between a pair of cities.\nThe last line contains k distinct integer numbers - a list of remarkable cities. All cities are numbered from 1 to n.\nOutput\nThe first line of the output should contain c - the number of routes in a tourist guide. The following c lines should contain one tourist route each. Every route should be printed in a form of \"t v1 v2 ... vt + 1\", where t is a number of roads in a route and v1,  v2, ..., vt + 1 - cities listed in the order they are visited on the route.\nIf there are multiple answers print any of them.\n", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool cmp(vector<int> a, vector<int> b) {\n  return a[0] - a[1] > b[0] - b[1];\n}\n\nint main() {\n  int n, m, k;\n  cin >> n;\n  cin >> m;\n  cin >> k;\n\n  vector<vector<int>> g(n, vector<int>(n, 0));\n  for (int i = 0; i < m; i++) {\n    int a, b;\n    cin >> a;\n    cin >> b;\n    g[a].push_back(b);\n    g[b].push_back(a);\n  }\n\n  vector<int> r(k);\n  cin >> r[0] >> r[1] >> ... >> r[k - 1];\n\n  vector<vector<int>> ans(r.size());\n  for (int i = 0; i < r.size(); i++) {\n    vector<int> v(g[r[i]].size());\n    for (int j = 0; j < v.size(); j++) {\n      v[j] = g[r[i]][j];\n    }\n    sort(v.begin(), v.end(), cmp);\n    ans[i] = v;\n  }\n\n  cout << ans.size() << endl;\n  for (int i = 0; i < ans.size(); i++) {\n    cout << ans[i].size() << \" \";\n    for (int j = 0; j < ans[i].size(); j++) {\n      cout << ans[i][j] << \" \";\n    }\n    cout << \"+ 1\" << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:27:22: error: expected \u2018;\u2019 before \u2018>>\u2019 token\n   27 |   cin >> r[0] >> r[1] >> ... >> r[k - 1];\n      |                      ^~~\n      |                      ;\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/ostream:38,\n                 from /usr/include/c++/9/iostream:39,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/predefined_ops.h: In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1, _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Iterator2 = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Compare = bool (*)(std::vector<int>, std::vector<int>)]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:1846:14:   required from \u2018void std::__insertion_sort(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(std::vector<int>, std::vector<int>)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1884:25:   required from \u2018void std::__final_insertion_sort(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(std::vector<int>, std::vector<int>)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1970:31:   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(std::vector<int>, std::vector<int>)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4899:18:   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Compare = bool (*)(std::vector<int>, std::vector<int>)]\u2019\ntest.cpp:35:33:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:143:18: error: could not convert \u2018__it1.__gnu_cxx::__normal_iterator<int*, std::vector<int> >::operator*()\u2019 from \u2018int\u2019 to \u2018std::vector<int>\u2019\n  143 |         { return bool(_M_comp(*__it1, *__it2)); }\n      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                  |\n      |                  int\n/usr/include/c++/9/bits/predefined_ops.h: In instantiation of \u2018bool __gnu_cxx::__ops::_Val_comp_iter<_Compare>::operator()(_Value&, _Iterator) [with _Value = int; _Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Compare = bool (*)(std::vector<int>, std::vector<int>)]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:1827:20:   required from \u2018void std::__unguarded_linear_insert(_RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Compare = __gnu_cxx::__ops::_Val_comp_iter<bool (*)(std::vector<int>, std::vector<int>)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1854:36:   required from \u2018void std::__insertion_sort(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(std::vector<int>, std::vector<int>)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1884:25:   required from \u2018void std::__final_insertion_sort(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(std::vector<int>, std::vector<int>)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1970:31:   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(std::vector<int>, std::vector<int>)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4899:18:   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Compare = bool (*)(std::vector<int>, std::vector<int>)]\u2019\ntest.cpp:35:33:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:215:11: error: could not convert \u2018__val\u2019 from \u2018int\u2019 to \u2018std::vector<int>\u2019\n  215 |  { return bool(_M_comp(__val, *__it)); }\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |           |\n      |           int\n/usr/include/c++/9/bits/predefined_ops.h: In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_comp_val<_Compare>::operator()(_Iterator, _Value&) [with _Iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Value = int; _Compare = bool (*)(std::vector<int>, std::vector<int>)]\u2019:\n/usr/include/c++/9/bits/stl_heap.h:133:48:   required from \u2018void std::__push_heap(_RandomAccessIterator, _Distance, _Distance, _Tp, _Compare&) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Distance = long int; _Tp = int; _Compare = __gnu_cxx::__ops::_Iter_comp_val<bool (*)(std::vector<int>, std::vector<int>)>]\u2019\n/usr/include/c++/9/bits/stl_heap.h:237:23:   required from \u2018void std::__adjust_heap(_RandomAccessIterator, _Distance, _Distance, _Tp, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Distance = long int; _Tp = int; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(std::vector<int>, std::vector<int>)>]\u2019\n/usr/include/c++/9/bits/stl_heap.h:342:22:   required from \u2018void std::__make_heap(_RandomAccessIterator, _RandomAccessIterator, _Compare&) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(std::vector<int>, std::vector<int>)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1671:23:   required from \u2018void std::__heap_select(_RandomAccessIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(std::vector<int>, std::vector<int>)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1932:25:   required from \u2018void std::__partial_sort(_RandomAccessIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(std::vector<int>, std::vector<int>)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1947:27:   required from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator, _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Size = long int; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(std::vector<int>, std::vector<int>)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1967:25:   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(std::vector<int>, std::vector<int>)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4899:18:   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Compare = bool (*)(std::vector<int>, std::vector<int>)]\u2019\ntest.cpp:35:33:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:177:11: error: could not convert \u2018__it.__gnu_cxx::__normal_iterator<int*, std::vector<int> >::operator*()\u2019 from \u2018int\u2019 to \u2018std::vector<int>\u2019\n  177 |  { return bool(_M_comp(*__it, __val)); }\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |           |\n      |           int\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/55", "completion_id": 0, "test_suite": {"code": "int numTraining(string& grid) {\n  vector<int> v(grid.length(), 0);\n  for(int i = 0; i < grid.length(); ++i) {\n    if(grid[i] == ')') {\n      v[i] = 1;\n    } else {\n      v[i] = v[i-1] + 1;\n    }\n  }\n  int ans = 0;\n  for(int i = 0; i < v.size(); ++i) {\n    if(v[i] - v[i-1] >= 1) {\n      ans++;\n    }\n  }\n  return ans;\n}\n", "testcases": [{"input": "1 5\n(()()", "output": "3"}, {"input": "3 2\n()\n()\n()", "output": "6"}, {"input": "4 4\n()()\n()()\n)()(\n()()", "output": "13"}, {"input": "1 1\n(", "output": "0"}, {"input": "1 2\n((", "output": "0"}, {"input": "1 3\n(((", "output": "0"}, {"input": "1 4\n((((", "output": "0"}, {"input": "1 5\n(((((", "output": "0"}, {"input": "1 6\n(()))(", "output": "2"}, {"input": "2 1\n(\n(", "output": "0"}, {"input": "2 2\n((\n((", "output": "0"}, {"input": "2 3\n(((\n(((", "output": "0"}, {"input": "2 4\n((((\n((()", "output": "1"}, {"input": "2 5\n(((()\n((()(", "output": "2"}, {"input": "2 6\n((((()\n((())(", "output": "3"}, {"input": "3 1\n(\n(\n(", "output": "0"}, {"input": "3 2\n((\n((\n((", "output": "0"}, {"input": "3 3\n(()\n(()\n(((", "output": "3"}, {"input": "3 4\n((((\n((((\n((()", "output": "1"}, {"input": "3 5\n(()((\n((())\n(((()", "output": "4"}, {"input": "3 6\n((((()\n((())(\n((((()", "output": "4"}, {"input": "4 1\n(\n(\n(\n(", "output": "0"}, {"input": "4 2\n((\n((\n((\n((", "output": "0"}, {"input": "4 3\n(((\n(((\n(((\n(((", "output": "0"}, {"input": "4 4\n((()\n((((\n((()\n((()", "output": "4"}, {"input": "4 5\n(((()\n((()(\n(((((\n(()))", "output": "4"}, {"input": "4 6\n((((()\n((()((\n((()))\n((((()", "output": "7"}, {"input": "5 1\n(\n(\n(\n(\n(", "output": "0"}, {"input": "5 2\n((\n((\n((\n((\n((", "output": "0"}, {"input": "5 3\n(()\n(((\n(((\n(((\n(()", "output": "2"}, {"input": "5 4\n(())\n((((\n((()\n(()(\n((()", "output": "5"}, {"input": "5 5\n((())\n(()))\n(((()\n(((((\n((()(", "output": "6"}, {"input": "5 6\n((((((\n((((((\n(((()(\n((()((\n(()(()", "output": "4"}, {"input": "6 1\n(\n(\n(\n(\n(\n(", "output": "0"}, {"input": "6 2\n((\n((\n((\n((\n((\n((", "output": "0"}, {"input": "6 3\n(((\n(((\n(((\n(()\n(((\n(()", "output": "2"}, {"input": "6 4\n((()\n((()\n(())\n((((\n(()(\n((()", "output": "7"}, {"input": "6 5\n(((((\n(()()\n(((()\n(()((\n(((()\n(((()", "output": "9"}, {"input": "6 6\n((((()\n((())(\n(()(()\n(()(()\n((((((\n(())((", "output": "11"}, {"input": "20000 50\n((((((((((((((((((((((((()))))))))))))))))))))))))\n((((((((((((((((((((((((()))))))))))))))))))))))))\n((((((((((((((((((((((((()))))))))))))))))))))))))\n((((((((((((((((((((((((()))))))))))))))))))))))))\n((((((((((((((((((((((((()))))))))))))))))))))))))\n((((((((((((((((((((((((()))))))))))))))))))))))))\n((((((((((((((((((((((((()))))))))))))))))))))))))\n((((((((((((((((((((((((()))))))))))))))))))))))))\n((((((((((((((((((((((((()))))))))))))))))))))))))\n((((((((((((((((((((((((())))))))...", "output": "5000250000"}, {"input": "2 10\n((())(())(\n(((()())))", "output": "12"}], "language": "cpp"}, "prompt": "E. Training with Doors\ntime limit per test\n4 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nCol. Sheffard is going to make a training for Cpt. Plice. The colonel has a polygon containing infinite number of closed doors placed one by one in a row. Initially Cpt. Plice stands in front of the first door. The captain is able to perform the following two commands:\nopen the first closed door and go to the front of the next closed door (mark this command as '(' ),\ngo to the front of the last of currently opened doors and close it (mark this command as ')' ).\nA sequence of commands is valid if the following conditions are met:\nthere is at least one opened door when the command ')' should be performed (in particular, the first command shouldn't be ')'),\nall the doors are closed after performing all commands from the sequence (the captain stands in front of the first door).\nCol. Sheffard received a template - a rectangular grid with n rows and m columns where each cell contains one of the commands, i.e. '(' or ')'. The colonel has to choose a training plan for the captain - select a non-empty rectangle from the grid, each row of the rectangle will be an independent training for the captain. The training plan is valid, if each row of the selected rectangle is a valid sequence of commands.\nYou are to find the number of ways to select a valid training plan for a given grid. The selected rectangle should be continuous, i.e. without holes. Plans are different if they have different positions of their corners even if their contents are the same.\nInput\nThe first line contains two integers n and m (1 <= n, m <= 50000) - number of rows and number of columns in the template respectively. Each of the following n lines contains a string with m symbols '(' or ')' - commands of the template. The total number of elements in the template doesn't exceed 106.\nOutput\nOutput a single integer - the number of rectangles on the template, corresponding to a valid training plan. Two rectangles with equal content but different positions of corners should be counted both.\n", "generation": "int numTraining(string& grid) {\n  vector<int> v(grid.length(), 0);\n  for(int i = 0; i < grid.length(); ++i) {\n    if(grid[i] == ')') {\n      v[i] = 1;\n    } else {\n      v[i] = v[i-1] + 1;\n    }\n  }\n  int ans = 0;\n  for(int i = 0; i < v.size(); ++i) {\n    if(v[i] - v[i-1] >= 1) {\n      ans++;\n    }\n  }\n  return ans;\n}\n", "result": "failed: compilation error: test.cpp:1:17: error: \u2018string\u2019 was not declared in this scope\n    1 | int numTraining(string& grid) {\n      |                 ^~~~~~\ntest.cpp:1:25: error: \u2018grid\u2019 was not declared in this scope\n    1 | int numTraining(string& grid) {\n      |                         ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/56", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool compare(pair<int, int> a, pair<int, int> b) {\n  return a.first - (T - b.second) * 2 < b.first - (T - a.second) * 2;\n}\n\nint main() {\n  int n;\n  cin >> n;\n\n  vector<pair<int, int>> tasks(n);\n  for (int i = 0; i < n; i++) {\n    cin >> tasks[i].first;\n    cin >> tasks[i].second;\n  }\n\n  int T;\n  cin >> T;\n\n  sort(tasks.begin(), tasks.end(), compare);\n\n  vector<int> completionTime(n);\n  completionTime[0] = tasks[0].first;\n  for (int i = 1; i < n; i++) {\n    completionTime[i] = completionTime[i - 1] + tasks[i].first;\n  }\n\n  for (int i = 0; i < n; i++) {\n    cout << completionTime[i] << \" \";\n  }\n\n  cout << endl;\n\n  return 0;\n}\n", "testcases": [{"input": "1\n10 5", "output": "15"}, {"input": "3\n3 0\n4 3\n5 2", "output": "3 7 12"}, {"input": "3\n3 0\n4 2\n5 1", "output": "3 12 8"}, {"input": "6\n3 0\n5 1\n4 2\n5 18\n4 19\n5 14", "output": "3 8 12 24 28 19"}, {"input": "17\n45 80\n40 51\n33 79\n78 83\n75 60\n34 21\n69 40\n82 21\n79 24\n74 72\n47 74\n35 71\n6 64\n69 65\n5 79\n17 85\n27 57", "output": "741 325 696 819 427 55 285 137 216 611 658 537 433 502 663 836 352"}, {"input": "9\n33 15\n38 7\n13 39\n39 42\n34 38\n14 44\n24 17\n5 38\n32 7", "output": "110 77 186 225 173 239 134 139 39"}, {"input": "10\n9840 17393\n7654 6875\n8144 20031\n4879 65910\n2350 6943\n9845 16952\n2438 44736\n9629 44685\n6948 0\n9062 44688", "output": "36637 14602 44781 70789 16952 26797 47219 56848 6948 65910"}, {"input": "10\n9472 31223\n8496 0\n1888 26362\n2820 49345\n3015 27987\n9997 14193\n277 14283\n5796 915\n1796 14252\n8608 31235", "output": "40737 8496 28250 52165 31265 24289 26362 14292 26085 49345"}, {"input": "10\n6339 13545\n3913 30963\n3956 40770\n4835 34876\n9448 20558\n1080 38404\n7341 0\n2169 3817\n4035 9481\n1631 15500", "output": "19884 34876 44747 39711 30963 40791 7341 9510 13545 21515"}], "language": "cpp"}, "prompt": "K. Task processing\ntime limit per test\n4 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nVasya wants to create a computing system to process arbitrary tasks. As a part of the system he needs an algorithm which will choose an order of task execution.\nHe came up with the following algorithm:\nThere is a single execution queue. For task to be completed, it needs to be added to the queue.\nFor each task two values are known: li and ti - the number of seconds that it takes to complete the task and the moment of time when this task is added to the execution queue.\nIf at some moment of time T the algorithm has to select a task for execution, it picks the one with the minimum value of li - (T - ti)2. In case of a tie, algorithm picks a task with the lowest index. Then for the following li seconds the algorithm will wait for the task to be completed.\nIn order to test the algorithm Vasya wants you to simulate it.\nYou are given n tasks. For each task, you know the number of seconds li that it takes to complete the task and the moment of time ti when this task is added to the execution queue.\nFor each task find out the moment of time when it will be completed.\nInput\nThe first line contains an integer number n (1 <= n <= 105) - the number of task to process. The next n lines contain two integers each: li,  ti (1 <= li <= 105,  0 <= ti <= 105).\nOutput\nPrint n space-separated integers. The i-th integer is the moment of time when the i-th task was completed.\n", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool compare(pair<int, int> a, pair<int, int> b) {\n  return a.first - (T - b.second) * 2 < b.first - (T - a.second) * 2;\n}\n\nint main() {\n  int n;\n  cin >> n;\n\n  vector<pair<int, int>> tasks(n);\n  for (int i = 0; i < n; i++) {\n    cin >> tasks[i].first;\n    cin >> tasks[i].second;\n  }\n\n  int T;\n  cin >> T;\n\n  sort(tasks.begin(), tasks.end(), compare);\n\n  vector<int> completionTime(n);\n  completionTime[0] = tasks[0].first;\n  for (int i = 1; i < n; i++) {\n    completionTime[i] = completionTime[i - 1] + tasks[i].first;\n  }\n\n  for (int i = 0; i < n; i++) {\n    cout << completionTime[i] << \" \";\n  }\n\n  cout << endl;\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018bool compare(std::pair<int, int>, std::pair<int, int>)\u2019:\ntest.cpp:8:21: error: \u2018T\u2019 was not declared in this scope\n    8 |   return a.first - (T - b.second) * 2 < b.first - (T - a.second) * 2;\n      |                     ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/57", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvoid solve() {\n  int n, m, k;\n  cin >> n;\n  cin >> m;\n  cin >> k;\n\n  vector<vector<char>> field(n, vector<char>(m, ' '));\n\n  for (int i = 0; i < k; i++) {\n    char plant;\n    cin >> plant;\n    string top, right, bottom, left;\n    cin >> top;\n    cin >> right;\n    cin >> bottom;\n    cin >> left;\n\n    vector<char> neighbors = {top[0], right[0], bottom[0], left[0]};\n\n    for (int j = 0; j < neighbors.size(); j++) {\n      field[neighbors[j] - '!'][neighbors[j] - '!' - 1] = plant;\n    }\n  }\n\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cout << field[i][j] << \" \";\n    }\n    cout << endl;\n  }\n}\n\nint main() {\n  solve();\n  return 0;\n}\n", "testcases": [{"input": "5 4 6\na ~ b zc ~\nz ba ~ ~ dce\ne d z ~ ~\nb ~ ~ z a\nc a z d ~\nd c z e ~", "output": "aabb\naabb\nczzz\ndzzz\nezzz"}, {"input": "1 1 1\n! ~ ~ ~ ~", "output": "!"}, {"input": "1 2 2\n! ~ ~ ~ \"\n\" ~ ! ~ ~", "output": "\"!"}, {"input": "2 1 2\n\" ! ~ ~ ~\n! ~ ~ \" ~", "output": "!\n\""}, {"input": "2 2 4\n# ~ ~ $ !\n! ~ # \" ~\n$ # ~ ~ \"\n\" ! $ ~ ~", "output": "!#\n\"$"}, {"input": "2 2 1\n! ~ ~ ~ ~", "output": "!!\n!!"}, {"input": "2 3 6\n& ~ # % ~\n# ~ ! \" &\n\" # $ ~ %\n% & \" ~ ~\n$ ! ~ ~ \"\n! ~ ~ $ #", "output": "&#!\n%\"$"}, {"input": "3 2 6\n% ~ $ # ~\n! $ ~ \" #\n\" ! ~ ~ &\n$ ~ ~ ! %\n& # \" ~ ~\n# % ! & ~", "output": "%$\n#!\n&\""}, {"input": "2 3 3\n\" # ~ ~ !\n! ~ \"# ~ ~\n# ~ ~ \" !", "output": "!!#\n!!\""}, {"input": "3 2 3\n\" ! # ~ ~\n! ~ ~ \"# ~\n# ! ~ ~ \"", "output": "!!\n!!\n\"#"}, {"input": "3 3 1\n! ~ ~ ~ ~", "output": "!!!\n!!!\n!!!"}, {"input": "3 3 6\n% # ~ ~ !\n# \" ~ % !\n$ ~ \" ! &\n& ~ $ ! ~\n! $& %# ~ ~\n\" ~ ~ # $", "output": "&$\"\n!!#\n!!%"}, {"input": "3 3 9\n' % ( ) ~\n( # ! \" '\n# ~ & ( %\n$ ! ~ ~ \"\n\" ( $ ~ )\n! & ~ $ (\n) ' \" ~ ~\n% ~ # ' ~\n& ~ ~ ! #", "output": "%#&\n'(!\n)\"$"}, {"input": "4 4 16\n. % & ~ ~\n) * ! ' /\n# / ' & %\n\" ' , ~ &\n/ ( ) # $\n' ) 0 \" #\n% $ # . ~\n& # \" ~ .\n( ~ * / -\n$ - / % ~\n+ ~ ~ ! *\n, 0 ~ ~ \"\n! + ~ 0 )\n* ~ + ) (\n0 ! ~ , '\n- ~ ( $ ~", "output": "-(*+\n$/)!\n%#'0\n.&\","}, {"input": "4 4 7\n\" !& ~ ~ #\n' ~ ! $ ~\n# $! \" ~ ~\n& % ~ \" !\n$ ' ! # ~\n% ~ ~ & !\n! ~ &% \"# $'", "output": "'!!%\n$!!&\n##\"\"\n##\"\""}, {"input": "4 4 8\n& ~ ~ # !\n# & ~ $ !\n! ~ &$# '\"% ~\n( $ ~ ~ \"\n% ! ' ~ ~\n' ! \" ~ %\n$ # ~ ( !\n\" ! ( ~ '", "output": "!!!&\n!!!#\n!!!$\n%'\"("}, {"input": "4 4 8\n$ \" ! % ~\n! (&' ~ ~ #%$\n' ~ ~ ! (\n# % ! ~ ~\n( ~ ' ! &\n& ~ ( ! \"\n\" ~ & $ ~\n% $ ! # ~", "output": "\"&('\n$!!!\n%!!!\n#!!!"}, {"input": "5 5 25\n/ 0 + 2 7\n# ~ ~ % -\n4 ~ 3 , ~\n+ & * ( /\n9 7 2 ~ ~\n\" , 0 7 ~\n8 - % ) 1\n2 / ( ~ 9\n3 ~ 5 ! 4\n1 5 8 & !\n. $ ~ ' *\n% # ~ $ 8\n' . ~ ~ 6\n, 4 ! \" ~\n6 * ' ~ (\n- ~ # 8 5\n5 ~ - 1 3\n0 ! & / \"\n! 3 1 0 ,\n* ) . 6 +\n7 \" / 9 ~\n$ % ~ . )\n& 1 ) + 0\n) 8 $ * &\n( + 6 ~ 2", "output": "435-#\n,!18%\n\"0&)$\n7/+*.\n92(6'"}, {"input": "5 5 13\n' ~ ( \" ~\n- $ % ! \"\n( ~ $ \" '\n! %- +* ~ #\n# \" ! ~ ~\n* + ~ ~ !\n& ) ~ + %\n+ & ~ * !\n% $ & ! -\n, ~ ~ ) $\n) , ~ & $\n$ ~ ), -% (\"\n\" '( $- # ~", "output": "'($$,\n\"\"$$)\n\"\"-%&\n##!!+\n##!!*"}, {"input": "5 5 8\n! ~ \"& #( ~\n( ! # $ ~\n' ~ ~ \" &\n# ! % ~ ($\n& ~ ' \" !\n% \" ~ ~ #\n$ ( # ~ ~\n\" '& ~ % !", "output": "!!!&'\n!!!\"\"\n!!!\"\"\n(##%%\n$##%%"}, {"input": "5 5 13\n$ ! & ~ (\n- \" ' & !\n) % ! , ~\n( ! $ ~ ,\n, ) ( ~ ~\n+ ~ # * ~\n& -' ~ ~ !$\n\" ~ ~ '- #\n% * ! ) ~\n# ~ \" ! *+\n' \" ~ & -\n! # -& $( %)\n* + # % ~", "output": "+##\"\"\n*##\"\"\n%!!-'\n)!!&&\n,($&&"}, {"input": "5 5 10\n% # & ~ ~\n! ~ ~ &'($ )\"#*\n( ! ~ ~ '\n& ! $ ~ %\n# \" ! % ~\n) * ! \" ~\n* ~ ! ) ~\n' ! ( ~ $\n\" ) ! # ~\n$ ! ' ~ &", "output": "*!!!!\n)!!!!\n\"!!!!\n#!!!!\n%&$'("}, {"input": "6 5 30\n3 . ~ ) 7\n# = ( ; %\n; # < 5 >\n< ( 8 0 ;\n' ~ ! : +\n- 4 > / ~\n) 3 ~ 8 (\n1 2 9 ~ *\n\" + : 4 ~\n2 > 5 1 /\n+ ~ ' \" ~\n, 8 ~ & 0\n6 ~ . 7 !\n/ - 2 * ~\n9 5 $ ~ 1\n> % ; 2 -\n* / 1 ~ ~\n8 ) ~ , <\n$ 0 & ~ 9\n% : # > 4\n: ' = % \"\n4 \" % - ~\n( 7 ) < #\n5 ; 0 9 2\n= ! 7 # :\n. ~ ~ 3 6\n0 < , $ 5\n7 6 3 ( =\n! ~ 6 = '\n& , ~ ~ $", "output": "+'!6.\n\":=73\n4%#()\n->;<8\n/250,\n*19$&"}, {"input": "6 5 15\n$ ! ~ \", ./\n! ~ ~ $ )&\n# (' .& % ~\n( ~ ' # ~\n' ~ ) # (\n, $ ~ * \"\n. & $ / #\n\" $/ ,* ~ -%\n* , ~ ~ \"\n% # \"/ +- ~\n+ % - ~ ~\n/ . $ \" %\n& ) ! . #\n) ~ ! & '\n- % \" ~ +", "output": "(')!!\n##&!!\n##.$$\n%%/$$\n%%\"\",\n+-\"\"*"}, {"input": "6 5 11\n\" )! #$ ~ ~\n! ~ '(% $\" )&*\n+ $ ~ ~ #\n$ %! ~ #+ \"\n' ~ ~ ( !\n# $ + ~ \"\n( ' ~ % !\n* ~ ! & ~\n) & ! \" ~\n% ( ~ $ !\n& * ! ) ~", "output": "*!!!'\n&!!!(\n)!!!%\n\"\"\"$$\n\"\"\"$$\n\"\"\"#+"}, {"input": "6 5 12\n# ! &) ~ (*\n& ) ~ ~ #\n, $ ~ ' !\n* ( # ~ %\n' , ~ ) !\n\" ! ( % ~\n( ! # * \"\n+ ~ ~ $ !\n$ + ~ , !\n% \" * ~ ~\n) ' ~ & #\n! ~ $,'+ (#\" ~", "output": "!!!!+\n!!!!$\n!!!!,\n!!!!'\n\"(##)\n%*##&"}, {"input": "6 5 16\n+ ) ! , ~\n( & % ~ ~\n) . \" + ~\n% ! / ~ (\n* 0 ~ ~ $\n\" ~ # ! ).\n- # ~ ' !\n. ~ \" ) ~\n# ~ ~ -! \"\n$ ! * ~ /\n/ ! $ ~ %\n& , ! ( ~\n0 ' ~ * !\n' - ~ 0 !\n, + ! & ~\n! #\" -'0 %$/ ,&+", "output": ".\"\"##\n)\"\"##\n+!!!-\n,!!!'\n&!!!0\n(%/$*"}, {"input": "5 6 30\n, : 0 $ ~\n* % 1 . &\n9 ~ 3 : ~\n= $ ! ~ ~\n: 9 5 , ~\n' 0 < ! $\n$ , ' = ~\n% 2 4 * >\n\" ~ 2 > 3\n4 + ) 1 %\n0 5 & ' ,\n2 ~ + % \"\n( ~ ~ ) +\n/ ) ~ 7 1\n; . 6 ~ #\n6 - 8 ~ ;\n1 4 / - *\n) ( ~ / 4\n8 7 ~ ~ 6\n! ' # ~ =\n. * - ; <\n+ ~ ( 4 2\n& > * < 0\n< & . # '\n- 1 7 6 .\n5 3 > 0 :\n7 / ~ 8 -\n# < ; ~ !\n> \" % & 5\n3 ~ \" 5 9", "output": "93\"2+(\n:5>%4)\n,0&*1/\n$'<.-7\n=!#;68"}, {"input": "5 6 15\n' # / ! \"\n& % ~ ~ ,.\n% (- ~ & /#\n, . & ~ !\n( ~ - % #\n. / & , !\n- ~ ~ % (\n+ ~ # \" )\n\" )+ '# $! ~\n) ~ + \" ~\n/ # % . '\n* $ ! ~ ~\n$ \" ! * ~\n! '\" ., ~ $*\n# ~ (% '/ +\"", "output": ")+##(-\n\"\"##%%\n\"\"'/%%\n$!!.&&\n*!!,&&"}, {"input": "5 6 13\n# ! %, ~ \"\n+ ~ ' $ ~\n, % ~ ~ #\n! ~ *-& #\" $'\n$ +' ! (\" ~\n\" $! # ~ ()\n* - ~ % !\n% * ~ , #\n' ~ ! $ +\n& ~ ~ - !\n( $ \" ) ~\n- & ~ * !\n) ( \" ~ ~", "output": "+'!!!&\n$$!!!-\n$$!!!*\n(\"\"##%\n)\"\"##,"}, {"input": "5 6 15\n) % ~ / !\n. / ~ ~ $\n/ ) ~ . !\n% - ~ ) !\n( + & ~ ~\n# ! , ~ &\n, ! $ ~ #\n' * ! \" ~\n\" ' ! + ~\n* ~ ! ' ~\n! ~ /-%) $,&# +*\"'\n$ ! . ~ ,\n- ~ ~ % !\n+ \" ! ( ~\n& ! # ~ (", "output": "*!!!!-\n'!!!!%\n\"!!!!)\n+!!!!/\n(&#,$."}, {"input": "5 6 13\n, ~ ! - ~\n) \" ~ & #\n& ) ~ ~ #\n+ $ % ( ~\n* ~ ~ \" '\n% ! # ~ +(\n! ~ \"' %# -$,\n- , ! $ ~\n# \"! &) ~ %\n' ~ * \" !\n\" '* ~ )# !\n( + % ~ ~\n$ - ! + ~", "output": ",!!!'*\n-!!!\"\"\n$!!!\"\"\n+%%##)\n(%%##&"}, {"input": "6 6 36\n2 & D C ~\n% 8 \" + 6\n, > ~ ? 7\n' ~ 5 . 9\n> = ~ , $\n9 ~ ' D &\nC 2 / ( ~\n7 $ , 1 4\n+ % 4 * A\n8 . 3 % /\n& ~ 9 2 ~\n4 \" 7 0 +\n/ D 8 6 C\n( C 6 B ~\n6 / % A (\nB ( A - ~\n= # ~ > !\n\" 3 $ 4 %\n? , ~ ~ 1\nD 9 . / 2\nA 6 + : B\n$ ! > 7 \"\n0 4 1 ~ *\n3 < ! \" 8\n: A * ~ -\n< 5 ) 3 .\n# @ ~ = )\n@ ~ ~ # ;\n; ~ @ ) 5\n) ; # ! <\n! ) = $ 3\n- B : ~ ~\n1 7 ? ~ 0\n* + 0 ~ :\n. ' < 8 D\n5 ~ ; < '", "output": "&9'5;@\n2D.<)#\nC/83!=\n(6%\"$>\nBA+47,\n-:*01?"}, {"input": "6 6 18\n! (1 '% * 0$\n( ~ 1 ! ,\n0 , ! $ #\n* ! %& 2+ )$\n2 * + ~ )\n- . ~ % '\n% '- ~ & *!\n) $ *2 ~ ~\n$ #0 !* ) ~\n' \" - % !\n. ~ ~ - \"\n, ~ ( 0 /\n1 ~ \" ! (\n& % ~ ~ *+\n# / 0 $ ~\n\" ~ . ' 1\n/ ~ , # ~\n+ * & ~ 2", "output": "/,(1\".\n#0!!'-\n$$!!%%\n$$**%%\n))**&&\n))2+&&"}, {"input": "6 6 22\n) \" 0 ~ ~\n% . # ~ 0\n5 ~ * $ ~\n6 2 ~ 4 !\n# ! 4, ~ .%\n3 * ! ( $\n$ 5 3 - ~\n, 4 ~ ~ #\n+ ~ & ! *\n! &/+ 162 .# (3\"\n& ~ / ! +\n( 3 ! \" -\n- $ ( \" ~\n. ! # % \"\n/ ~ ' ! &\n0 \" % ~ )\n\" (- .! 0) ~\n4 6 ~ , #\n* ~ + 3 5\n2 1 ~ 6 !\n1 ' ~ 2 !\n' ~ ~ 1 /", "output": "5*+&/'\n$3!!!1\n-(!!!2\n\"\"!!!6\n\"\".##4\n)0%##,"}, {"input": "6 6 9\n$ ~ ! # )'\n& # \" ~ %\n% # & ~ (\n# $' \"! &%( ~\n\" ! ~ ~ #&\n! ~ ~ \" #$\n) ~ $ ' ~\n( # % ~ ~\n' ) $ # ~", "output": ")$$!!!\n'$$!!!\n###!!!\n###\"\"\"\n###\"\"\"\n(%&\"\"\""}, {"input": "6 6 15\n) $ / ! &\n& ~ )$ ! %\n. # ! * ,\n/ + ~ ! )\n# % ! . -\n* . ! ( \"\n' \" ( ~ ~\n$ ~ + ) &\n\" , * ' ~\n! /&) ~ ~ *.#(\n% ~ & #- ~\n, - . \" ~\n+ ~ ~ / $\n( * ! ~ '\n- % # , ~", "output": "%%&&$+\n%%&&)/\n-#!!!!\n,.!!!!\n\"*!!!!\n'(!!!!"}, {"input": "6 6 12\n) * ~ % \"\n# ' ~ * \"\n& ~ ! \" (\n* # ~ ) \"\n' $ ~ # \"\n% ) ~ ~ \"\n+ ~ ( \" ~\n\" (!,&+ %*)#' ~ ~\n$ ~ ~ ' ,\n! ~ , \" &\n, ~ $ \" !\n( ~ & \" +", "output": "+(&!,$\n\"\"\"\"\"'\n\"\"\"\"\"#\n\"\"\"\"\"*\n\"\"\"\"\")\n\"\"\"\"\"%"}, {"input": "7 7 25\n$ ~ , ! %\n7 ( ~ * !\n/ * ~ - !\n% ~ $ ! )\n' & ! 6 ~\n, ~ 4 ! $\n3 ! 8 ~ 6\n6 ' 3 ~ ~\n9 ~ ~ ( 4\n. ! + ~ #\n# ! . ~ 8\n* 7 ~ / !\n4 ~ 9 ! ,\n5 ~ ) \" ~\n! )%4$, /7*(- 8+#.3 '20\"&\n& 2 ! ' ~\n) ~ % ! 5\n2 0 ! & ~\n- / ~ 1 !\n( 9 ~ 7 !\n8 ! # ~ 3\n+ ! 1 ~ .\n0 \" ! 2 ~\n\" 5 ! 0 ~\n1 - ~ ~ +", "output": "5)%$,49\n\"!!!!!(\n0!!!!!7\n2!!!!!*\n&!!!!!/\n'!!!!!-\n638#.+1"}, {"input": "8 8 25\n0 ~ / ! 6\n8 ~ $ ! /\n% $ 5+ 1\" !\n2 ~ ~ 4 $\n- 1 \" , !\n6 ~ 0 ! 7\n) ! '# ~ (.\n7 ~ 6 ! ~\n! 7/608 %1-$ .#3) ~\n, - * 9 #\n. ! ) ( 3\n+ 5 ~ \" %\n* \" ~ ~ 9,\n4 2 ~ 5 $\n1 % \" - !\n9 , * ~ '\n$ ~ 42 % 8!\n5 4 ~ + %\n& 3 ( ~ ~\n# ! , ' )\n' # 9 ~ )\n3 ! . & ~\n/ ~ 8 ! 0\n( . ) ~ &\n\" %+ ~ * -1", "output": "760/8$$2\n!!!!!$$4\n!!!!!%%5\n!!!!!%%+\n!!!!!1\"\"\n!!!!!-\"\"\n3.))#,**\n&())'9**"}, {"input": "9 9 13\n# +,*- ~ \" $%\n$ &% \"# ~ ~\n, ~ - # +\n' ~ (% & ~\n! ~ ) % (\n( ~ ! % '\n\" # ~ ~ $\n& ' % $ ~\n* ~ ~ # -\n% ()! # $ '&\n) ~ + % !\n- ~ * # ,\n+ ~ , # )", "output": "''(!)+,-*\n''%%%####\n&&%%%####\n&&%%%####\n$$$$$####\n$$$$$\"\"\"\"\n$$$$$\"\"\"\"\n$$$$$\"\"\"\"\n$$$$$\"\"\"\""}, {"input": "10 10 28\n4 3 ~ + #\n) $ 5 ! ~\n( / ' 2 !\n5 $ 1 ! )\n$ ~ %6 )851 ~\n. \" ~ ~ <\n2 ( ' ~ 9\n' # \"< ~ (/2\n& ~ ~ #3 %\n* + ~ \" #\n# &% +43* '\" :6;,\n< \" . ~ '\n- ! 7 ~ 0\n: , # / !\n1 $ 8 ! 5\n8 $ ; ! 1\n9 ! 2 ~ 7\n+ 4 ~ * #\n/ : ' ( !\n! 51)8 ,:/( 970- ~\n6 % # ; $\n; 6 # , 8\n, ; # : !\n0 ! - ~ ~\n7 ! 9 ~ -\n\" #* ~ <. '\n3 & ~ 4 #\n% ~ & 6# $", "output": "$$$$%%%&&&\n$$$$%%%&&&\n$$$$%%%&&&\n$$$$6####3\n)518;####4\n!!!!,####+\n!!!!:####*\n!!!!/'''\"\"\n!!!!('''\"\"\n0-792'''<."}, {"input": "7 7 19\n- + # 0 ~\n) 3 ! & ~\n( \" ,/ ~ %\n0 - . 3 ~\n! .1 \" %& 3)\n* ~ 2 \" '\n+ ~ # - ~\n3 0 ! ) ~\n1 # \" ! .\n% !\" ( ~ &\n& )! % ~ ~\n/ \" ~ , (\n\" $'2* ~ (/% #1!\n# ~ $\" 1. +-\n. # 1 ! 0\n2 ~ ~ \" *\n' ~ * \" $\n$ ~ ' \" #\n, / ~ ~ (", "output": "+##$'*2\n-##\"\"\"\"\n0.1\"\"\"\"\n3!!\"\"\"\"\n)!!\"\"\"\"\n&&%%((/\n&&%%((,"}, {"input": "8 8 22\n' ,6 ! ) ~\n! $\"0 %*& +( ',)\n\" ~ .0 ! #\n, # ! ' 6\n2 % - ~ +\n- % ~ ~ 2\n1 ~ ~ & 3\n4 ) ( ~ /\n* & ~ % !\n0 . $ ! \"\n5 ~ 3 $ .\n3 ~ 1 & 5\n) ' (! 4/ ~\n& 31 ~ * $!\n/ ) 4 ~ ~\n% * ~ 2- +!\n6 # , ' ~\n# ~ \" 6, ~\n. ~ 5 0 \"\n+ ! 2% ~ (\n$ 5 & ! 0\n( ! + ~ )4", "output": "##\"\".531\n##\"\"0$&&\n6,!!!!&&\n''!!!!**\n''!!!!**\n))!!!!%%\n))((++%%\n/4((++2-"}, {"input": "9 9 25\n9 \" - ~ ~\n# 85+3 416( )\" ~\n' !( % $ 41\n% ,! ~ $ '\n2 ~ ~ , !\n3 ~ 8 # +\n) 6# $ & \"\n\" # &) -97 ~\n+ ~ 3 # ~\n4 ( ' 1 #\n, 2 ~ % !\n8 ~ 5 # 3\n* $ ~ ~ /\n! ~ ,2 '% (\n/ $ * ~ .\n( ~ ! 4' #5\n. $ / ~ 0\n7 \" & ~ -\n5 ~ ( # 8\n$ '% ~ *0/. )6&\n0 $ . ~ &\n1 4 ' 6 #\n- \" 7 ~ 9\n& ) 0$ ~ \"7\n6 1 $ ) #", "output": "+385((!!2\n####((!!,\n####4''%%\n####1''%%\n####6$$$$\n\"\"\"))$$$$\n\"\"\"))$$$$\n\"\"\"&&$$$$\n9-7&&0./*"}, {"input": "10 10 28\n0 1 ~ 6 #\n% ~ ' \" /+\n9 - # 2 \"\n. ~ 4 # 8\n7 ! ) ~ (\n- ' # 9 \"\n8 ~ . # '\n< ! 5 ~ $\n3 6 ~ & #\n, ~ ~ 1 :\n# 48.: 6013 &! 29'-\n( ! 7 ~ 5\n* & ; ) !\n5 ! ( ~ <\n' ~ #8 \"- %\n) ;* ~ ~ !7\n+ ~ % / ~\n4 ~ : # .\n& 3# ~ *; !\n; & ~ ) *\n\" /'% !2-9 $ ~\n: ~ , # 4\n2 9 # ! \"\n$ \" !< ~ ~\n! #2 &)* 57<( \"$\n/ + % \" ~\n6 0 ~ 3 #\n1 , ~ 0 #", "output": "+%%''8.4:,\n/%%''####1\n\"\"\"\"-####0\n\"\"\"\"9####6\n\"\"\"\"2####3\n\"\"\"\"!!!!&&\n$$$$!!!!&&\n$$$$!!!!*;\n$$$$!!!!))\n$$$$<5(7))"}, {"input": "6 6 9\n7 6 8 ~ 5\n1 ~ 2 4 ~\n3 ~ ~ 9 2\n4 1 6 5 ~\n6 2 9 7 4\n2 ~ 3 6 1\n5 4 7 ~ ~\n8 9 ~ ~ 7\n9 3 ~ 8 6", "output": "112233\n112233\n446699\n446699\n557788\n557788"}, {"input": "9 6 6\n4 3 ~ 6 2\n1 ~ 3 2 ~\n6 4 ~ ~ 5\n2 1 4 5 ~\n3 ~ ~ 4 1\n5 2 6 ~ ~", "output": "111333\n111333\n111333\n222444\n222444\n222444\n555666\n555666\n555666"}, {"input": "9 9 9\n2 1 4 5 ~\n8 7 ~ 9 4\n9 8 ~ ~ 6\n4 3 8 6 2\n5 2 6 ~ ~\n3 ~ 7 4 1\n7 ~ ~ 8 3\n1 ~ 3 2 ~\n6 4 9 ~ 5", "output": "111333777\n111333777\n111333777\n222444888\n222444888\n222444888\n555666999\n555666999\n555666999"}, {"input": "1 1 1\nA ~ ~ ~ ~", "output": "A"}, {"input": "2 2 4\nD C ~ ~ B\nC ~ ~ D A\nB A D ~ ~\nA ~ C B ~", "output": "AC\nBD"}, {"input": "3 3 6\nC ~ ~ D A\nE A F ~ B\nA ~ CD BE ~\nB A E ~ ~\nD C ~ F A\nF D ~ ~ E", "output": "AAC\nAAD\nBEF"}, {"input": "5 5 8\nG D H ~ F\nB A EF ~ ~\nH D ~ ~ G\nA ~ CD BE ~\nD C ~ GH AE\nF E G ~ B\nE A D F B\nC ~ ~ D A", "output": "AAACC\nAAACC\nAAADD\nBBEDD\nBBFGH"}, {"input": "7 7 9\nB A FH ~ ~\nC ~ ~ DE A\nA ~ CD BF ~\nG E ~ I D\nI DG ~ ~ H\nD C EG HI AF\nE C ~ G D\nH FD I ~ B\nF A D H B", "output": "AAAACCC\nAAAACCC\nAAAACCC\nAAAADDE\nBBBFDDG\nBBBHHII\nBBBHHII"}, {"input": "11 11 11\nA ~ CD BF ~\nC ~ ~ DE A\nF A D G B\nD C EH JK AFG\nG F D J B\nJ GD K ~ B\nH E I K D\nI E ~ K H\nB A FGJ ~ ~\nK DHI ~ ~ J\nE C ~ HI D", "output": "AAAAAACCCCC\nAAAAAACCCCC\nAAAAAACCCCC\nAAAAAACCCCC\nAAAAAACCCCC\nAAAAAADDDEE\nBBBBBFDDDEE\nBBBBBGDDDHI\nBBBBBJJJKKK\nBBBBBJJJKKK\nBBBBBJJJKKK"}, {"input": "13 13 11\nB A FGJ ~ ~\nA ~ CD BF ~\nD C E G AF\nH E I K G\nE C ~ HI DG\nC ~ ~ DE A\nJ G K ~ B\nK GH I ~ J\nG FD EH JK B\nI E ~ ~ HK\nF A D G B", "output": "AAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAADDEEEE\nBBBBBBFDDEEEE\nBBBBBBGGGEEEE\nBBBBBBGGGEEEE\nBBBBBBGGGHIII\nBBBBBBJJKKIII\nBBBBBBJJKKIII"}, {"input": "17 17 12\nI F ~ K E\nB A GHL ~ ~\nJ E K L H\nA ~ CD BG ~\nK EI ~ ~ JL\nL HJ K ~ B\nD C E H AG\nC ~ ~ DEF A\nH GD EJ L B\nG A D H B\nF C ~ I E\nE C FI JK DH", "output": "AAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAADDEEEEFF\nBBBBBBBBGDDEEEEFF\nBBBBBBBBHHHEEEEII\nBBBBBBBBHHHEEEEII\nBBBBBBBBHHHJKKKKK\nBBBBBBBBLLLLKKKKK\nBBBBBBBBLLLLKKKKK\nBBBBBBBBLLLLKKKKK\nBBBBBBBBLLLLKKKKK"}, {"input": "19 19 13\nF A D G B\nC ~ ~ DE A\nL H M ~ B\nM HIJ K ~ L\nE C ~ IJK DH\nI E J M H\nJ E K M I\nB A FGHL ~ ~\nG F D H B\nH GD EI LM B\nA ~ CD BF ~\nD C E H AFG\nK E ~ ~ JM", "output": "AAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAADDDEEEEEE\nBBBBBBBBBFDDDEEEEEE\nBBBBBBBBBGDDDEEEEEE\nBBBBBBBBBHHHHEEEEEE\nBBBBBBBBBHHHHEEEEEE\nBBBBBBBBBHHHHEEEEEE\nBBBBBBBBBHHHHIJKKKK\nBBBBBBBBBLLLMMMKKKK\nBBBBBBBBBLLLMMMKKKK\nBBBBBBBBBLLLMMMKKKK"}, {"input": "19 19 13\nJ E K M I\nI E J M H\nB A FGHL ~ ~\nC ~ ~ DE A\nK E ~ ~ JM\nE C ~ IJK DH\nM HIJ K ~ L\nF A D G B\nD C E H AFG\nG F D H B\nL H M ~ B\nH GD EI LM B\nA ~ CD BF ~", "output": "AAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAADDDEEEEEE\nBBBBBBBBBFDDDEEEEEE\nBBBBBBBBBGDDDEEEEEE\nBBBBBBBBBHHHHEEEEEE\nBBBBBBBBBHHHHEEEEEE\nBBBBBBBBBHHHHEEEEEE\nBBBBBBBBBHHHHIJKKKK\nBBBBBBBBBLLLMMMKKKK\nBBBBBBBBBLLLMMMKKKK\nBBBBBBBBBLLLMMMKKKK"}, {"input": "17 17 12\nE C FI JK DH\nH GD EJ L B\nA ~ CD BG ~\nK EI ~ ~ JL\nC ~ ~ DEF A\nF C ~ I E\nB A GHL ~ ~\nL HJ K ~ B\nD C E H AG\nG A D H B\nJ E K L H\nI F ~ K E", "output": "AAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAADDEEEEFF\nBBBBBBBBGDDEEEEFF\nBBBBBBBBHHHEEEEII\nBBBBBBBBHHHEEEEII\nBBBBBBBBHHHJKKKKK\nBBBBBBBBLLLLKKKKK\nBBBBBBBBLLLLKKKKK\nBBBBBBBBLLLLKKKKK\nBBBBBBBBLLLLKKKKK"}, {"input": "13 13 11\nH E I K G\nI E ~ ~ HK\nK GH I ~ J\nC ~ ~ DE A\nG FD EH JK B\nB A FGJ ~ ~\nA ~ CD BF ~\nD C E G AF\nF A D G B\nJ G K ~ B\nE C ~ HI DG", "output": "AAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAADDEEEE\nBBBBBBFDDEEEE\nBBBBBBGGGEEEE\nBBBBBBGGGEEEE\nBBBBBBGGGHIII\nBBBBBBJJKKIII\nBBBBBBJJKKIII"}, {"input": "11 11 11\nE C ~ HI D\nG F D J B\nF A D G B\nB A FGJ ~ ~\nJ GD K ~ B\nC ~ ~ DE A\nI E ~ K H\nA ~ CD BF ~\nD C EH JK AFG\nK DHI ~ ~ J\nH E I K D", "output": "AAAAAACCCCC\nAAAAAACCCCC\nAAAAAACCCCC\nAAAAAACCCCC\nAAAAAACCCCC\nAAAAAADDDEE\nBBBBBFDDDEE\nBBBBBGDDDHI\nBBBBBJJJKKK\nBBBBBJJJKKK\nBBBBBJJJKKK"}, {"input": "7 7 9\nI DG ~ ~ H\nD C EG HI AF\nB A FH ~ ~\nA ~ CD BF ~\nG E ~ I D\nC ~ ~ DE A\nE C ~ G D\nF A D H B\nH FD I ~ B", "output": "AAAACCC\nAAAACCC\nAAAACCC\nAAAADDE\nBBBFDDG\nBBBHHII\nBBBHHII"}, {"input": "5 5 8\nG D H ~ F\nA ~ CD BE ~\nD C ~ GH AE\nB A EF ~ ~\nE A D F B\nH D ~ ~ G\nF E G ~ B\nC ~ ~ D A", "output": "AAACC\nAAACC\nAAADD\nBBEDD\nBBFGH"}, {"input": "3 3 6\nF D ~ ~ E\nE A F ~ B\nB A E ~ ~\nC ~ ~ D A\nA ~ CD BE ~\nD C ~ F A", "output": "AAC\nAAD\nBEF"}, {"input": "2 2 4\nD C ~ ~ B\nC ~ ~ D A\nA ~ C B ~\nB A D ~ ~", "output": "AC\nBD"}, {"input": "19 19 13\nM HIJ K ~ L\nI E J M H\nJ E K M I\nL H M ~ B\nG F D H B\nB A FGHL ~ ~\nA ~ CD BF ~\nF A D G B\nD C E H AFG\nE C ~ IJK DH\nK E ~ ~ JM\nC ~ ~ DE A\nH GD EI LM B", "output": "AAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAADDDEEEEEE\nBBBBBBBBBFDDDEEEEEE\nBBBBBBBBBGDDDEEEEEE\nBBBBBBBBBHHHHEEEEEE\nBBBBBBBBBHHHHEEEEEE\nBBBBBBBBBHHHHEEEEEE\nBBBBBBBBBHHHHIJKKKK\nBBBBBBBBBLLLMMMKKKK\nBBBBBBBBBLLLMMMKKKK\nBBBBBBBBBLLLMMMKKKK"}, {"input": "17 17 12\nD C E H AG\nB A GHL ~ ~\nJ E K L H\nA ~ CD BG ~\nL HJ K ~ B\nE C FI JK DH\nG A D H B\nH GD EJ L B\nF C ~ I E\nI F ~ K E\nK EI ~ ~ JL\nC ~ ~ DEF A", "output": "AAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAADDEEEEFF\nBBBBBBBBGDDEEEEFF\nBBBBBBBBHHHEEEEII\nBBBBBBBBHHHEEEEII\nBBBBBBBBHHHJKKKKK\nBBBBBBBBLLLLKKKKK\nBBBBBBBBLLLLKKKKK\nBBBBBBBBLLLLKKKKK\nBBBBBBBBLLLLKKKKK"}, {"input": "13 13 11\nJ G K ~ B\nC ~ ~ DE A\nD C E G AF\nI E ~ ~ HK\nB A FGJ ~ ~\nA ~ CD BF ~\nH E I K G\nF A D G B\nE C ~ HI DG\nG FD EH JK B\nK GH I ~ J", "output": "AAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAADDEEEE\nBBBBBBFDDEEEE\nBBBBBBGGGEEEE\nBBBBBBGGGEEEE\nBBBBBBGGGHIII\nBBBBBBJJKKIII\nBBBBBBJJKKIII"}, {"input": "11 11 11\nD C EH JK AFG\nE C ~ HI D\nH E I K D\nC ~ ~ DE A\nJ GD K ~ B\nF A D G B\nK DHI ~ ~ J\nB A FGJ ~ ~\nI E ~ K H\nG F D J B\nA ~ CD BF ~", "output": "AAAAAACCCCC\nAAAAAACCCCC\nAAAAAACCCCC\nAAAAAACCCCC\nAAAAAACCCCC\nAAAAAADDDEE\nBBBBBFDDDEE\nBBBBBGDDDHI\nBBBBBJJJKKK\nBBBBBJJJKKK\nBBBBBJJJKKK"}, {"input": "7 7 9\nG E ~ I D\nD C EG HI AF\nE C ~ G D\nA ~ CD BF ~\nF A D H B\nI DG ~ ~ H\nH FD I ~ B\nC ~ ~ DE A\nB A FH ~ ~", "output": "AAAACCC\nAAAACCC\nAAAACCC\nAAAADDE\nBBBFDDG\nBBBHHII\nBBBHHII"}, {"input": "5 5 8\nB A EF ~ ~\nD C ~ GH AE\nH D ~ ~ G\nF E G ~ B\nG D H ~ F\nE A D F B\nA ~ CD BE ~\nC ~ ~ D A", "output": "AAACC\nAAACC\nAAADD\nBBEDD\nBBFGH"}, {"input": "3 3 6\nA ~ CD BE ~\nE A F ~ B\nB A E ~ ~\nC ~ ~ D A\nF D ~ ~ E\nD C ~ F A", "output": "AAC\nAAD\nBEF"}, {"input": "2 2 4\nD C ~ ~ B\nB A D ~ ~\nA ~ C B ~\nC ~ ~ D A", "output": "AC\nBD"}, {"input": "19 19 13\nE C ~ IJK DH\nK E ~ ~ JM\nG F D H B\nC ~ ~ DE A\nJ E K M I\nH GD EI LM B\nB A FGHL ~ ~\nF A D G B\nM HIJ K ~ L\nL H M ~ B\nD C E H AFG\nI E J M H\nA ~ CD BF ~", "output": "AAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAADDDEEEEEE\nBBBBBBBBBFDDDEEEEEE\nBBBBBBBBBGDDDEEEEEE\nBBBBBBBBBHHHHEEEEEE\nBBBBBBBBBHHHHEEEEEE\nBBBBBBBBBHHHHEEEEEE\nBBBBBBBBBHHHHIJKKKK\nBBBBBBBBBLLLMMMKKKK\nBBBBBBBBBLLLMMMKKKK\nBBBBBBBBBLLLMMMKKKK"}, {"input": "17 17 12\nC ~ ~ DEF A\nI F ~ K E\nE C FI JK DH\nA ~ CD BG ~\nB A GHL ~ ~\nG A D H B\nD C E H AG\nF C ~ I E\nK EI ~ ~ JL\nJ E K L H\nL HJ K ~ B\nH GD EJ L B", "output": "AAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAADDEEEEFF\nBBBBBBBBGDDEEEEFF\nBBBBBBBBHHHEEEEII\nBBBBBBBBHHHEEEEII\nBBBBBBBBHHHJKKKKK\nBBBBBBBBLLLLKKKKK\nBBBBBBBBLLLLKKKKK\nBBBBBBBBLLLLKKKKK\nBBBBBBBBLLLLKKKKK"}, {"input": "13 13 11\nJ G K ~ B\nG FD EH JK B\nB A FGJ ~ ~\nF A D G B\nC ~ ~ DE A\nA ~ CD BF ~\nK GH I ~ J\nD C E G AF\nE C ~ HI DG\nI E ~ ~ HK\nH E I K G", "output": "AAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAADDEEEE\nBBBBBBFDDEEEE\nBBBBBBGGGEEEE\nBBBBBBGGGEEEE\nBBBBBBGGGHIII\nBBBBBBJJKKIII\nBBBBBBJJKKIII"}, {"input": "11 11 11\nC ~ ~ DE A\nB A FGJ ~ ~\nK DHI ~ ~ J\nA ~ CD BF ~\nE C ~ HI D\nI E ~ K H\nD C EH JK AFG\nF A D G B\nG F D J B\nH E I K D\nJ GD K ~ B", "output": "AAAAAACCCCC\nAAAAAACCCCC\nAAAAAACCCCC\nAAAAAACCCCC\nAAAAAACCCCC\nAAAAAADDDEE\nBBBBBFDDDEE\nBBBBBGDDDHI\nBBBBBJJJKKK\nBBBBBJJJKKK\nBBBBBJJJKKK"}, {"input": "7 7 9\nI DG ~ ~ H\nB A FH ~ ~\nH FD I ~ B\nD C EG HI AF\nA ~ CD BF ~\nG E ~ I D\nC ~ ~ DE A\nF A D H B\nE C ~ G D", "output": "AAAACCC\nAAAACCC\nAAAACCC\nAAAADDE\nBBBFDDG\nBBBHHII\nBBBHHII"}, {"input": "5 5 8\nG D H ~ F\nE A D F B\nB A EF ~ ~\nF E G ~ B\nA ~ CD BE ~\nC ~ ~ D A\nD C ~ GH AE\nH D ~ ~ G", "output": "AAACC\nAAACC\nAAADD\nBBEDD\nBBFGH"}, {"input": "3 3 6\nF D ~ ~ E\nE A F ~ B\nC ~ ~ D A\nD C ~ F A\nB A E ~ ~\nA ~ CD BE ~", "output": "AAC\nAAD\nBEF"}, {"input": "2 2 4\nC ~ ~ D A\nB A D ~ ~\nA ~ C B ~\nD C ~ ~ B", "output": "AC\nBD"}, {"input": "19 19 13\nG F D H B\nF A D G B\nC ~ ~ ED A\nE C ~ KJI DH\nL H M ~ B\nD C E H AGF\nJ E K M I\nH GD IE ML B\nM JHI K ~ L\nI E J M H\nB A FGHL ~ ~\nA ~ CD BF ~\nK E ~ ~ MJ", "output": "AAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAACCCCCCCCC\nAAAAAAAAAADDDEEEEEE\nBBBBBBBBBFDDDEEEEEE\nBBBBBBBBBGDDDEEEEEE\nBBBBBBBBBHHHHEEEEEE\nBBBBBBBBBHHHHEEEEEE\nBBBBBBBBBHHHHEEEEEE\nBBBBBBBBBHHHHIJKKKK\nBBBBBBBBBLLLMMMKKKK\nBBBBBBBBBLLLMMMKKKK\nBBBBBBBBBLLLMMMKKKK"}, {"input": "17 17 12\nJ E K L H\nF C ~ I E\nD C E H AG\nI F ~ K E\nL HJ K ~ B\nE C IF JK HD\nA ~ CD BG ~\nC ~ ~ DFE A\nH GD JE L B\nB A GHL ~ ~\nG A D H B\nK IE ~ ~ LJ", "output": "AAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAACCCCCCCC\nAAAAAAAAADDEEEEFF\nBBBBBBBBGDDEEEEFF\nBBBBBBBBHHHEEEEII\nBBBBBBBBHHHEEEEII\nBBBBBBBBHHHJKKKKK\nBBBBBBBBLLLLKKKKK\nBBBBBBBBLLLLKKKKK\nBBBBBBBBLLLLKKKKK\nBBBBBBBBLLLLKKKKK"}, {"input": "13 13 11\nG FD EH JK B\nA ~ CD FB ~\nE C ~ IH DG\nJ G K ~ B\nD C E G FA\nF A D G B\nB A GJF ~ ~\nH E I K G\nI E ~ ~ HK\nC ~ ~ DE A\nK GH I ~ J", "output": "AAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAACCCCCC\nAAAAAAADDEEEE\nBBBBBBFDDEEEE\nBBBBBBGGGEEEE\nBBBBBBGGGEEEE\nBBBBBBGGGHIII\nBBBBBBJJKKIII\nBBBBBBJJKKIII"}, {"input": "11 11 11\nD C HE KJ GFA\nC ~ ~ ED A\nB A FJG ~ ~\nH E I K D\nG F D J B\nI E ~ K H\nF A D G B\nK DHI ~ ~ J\nA ~ DC FB ~\nE C ~ HI D\nJ DG K ~ B", "output": "AAAAAACCCCC\nAAAAAACCCCC\nAAAAAACCCCC\nAAAAAACCCCC\nAAAAAACCCCC\nAAAAAADDDEE\nBBBBBFDDDEE\nBBBBBGDDDHI\nBBBBBJJJKKK\nBBBBBJJJKKK\nBBBBBJJJKKK"}, {"input": "7 7 9\nA ~ DC FB ~\nG E ~ I D\nC ~ ~ DE A\nD C GE IH AF\nE C ~ G D\nI DG ~ ~ H\nB A HF ~ ~\nH FD I ~ B\nF A D H B", "output": "AAAACCC\nAAAACCC\nAAAACCC\nAAAADDE\nBBBFDDG\nBBBHHII\nBBBHHII"}, {"input": "5 5 8\nC ~ ~ D A\nD C ~ HG EA\nB A EF ~ ~\nH D ~ ~ G\nG D H ~ F\nE A D F B\nF E G ~ B\nA ~ DC EB ~", "output": "AAACC\nAAACC\nAAADD\nBBEDD\nBBFGH"}, {"input": "3 3 6\nB A E ~ ~\nC ~ ~ D A\nD C ~ F A\nF D ~ ~ E\nA ~ CD BE ~\nE A F ~ B", "output": "AAC\nAAD\nBEF"}, {"input": "2 2 4\nC ~ ~ D A\nA ~ C B ~\nB A D ~ ~\nD C ~ ~ B", "output": "AC\nBD"}, {"input": "15 9 15\n- * . ~ ~\n\" ~ # % !\n, ) ~ / +\n* ' + - ~\n+ ( , . *\n$ ! % ' ~\n. + / ~ -\n& # ~ ) %\n! ~ \" $ ~\n/ , ~ ~ .\n# ~ ~ & \"\n) & ~ , (\n' $ ( * ~\n( % ) + '\n% \" & ( $", "output": "!!!\"\"\"###\n!!!\"\"\"###\n!!!\"\"\"###\n$$$%%%&&&\n$$$%%%&&&\n$$$%%%&&&\n'''((()))\n'''((()))\n'''((()))\n***+++,,,\n***+++,,,\n***+++,,,\n---...///\n---...///\n---...///"}, {"input": "7 7 28\n! ~ b E ~\nb ~ AF cH !E\nA ~ B F b\nB ~ C g A\nC ~ D g B\nD ~ ~ G C\nE ! b c ~\nF A g I b\ng BC GJ KL FI\nG D ~ J g\nc Eb Hf NO ~\nH b I f c\nI F g f H\nJ G ~ M g\nf HI KP dh cO\nK g L P f\nL g M e K\nM J ~ e L\nN c O Q ~\nO c f d N\nP K e h f\ne LM ~ ST Ph\nQ N d R ~\nd Of h ~ QR\nh fP eS ~ d\nR Q d ~ ~\nS e T ~ h\nT e ~ ~ S", "output": "!bbABCD\nEbbFggG\nccHIggJ\nccffKLM\nNOffPee\nQddhhee\nRddhhST"}, {"input": "19 1 19\n! ~ ~ \" ~\n\" ! ~ # ~\n# \" ~ $ ~\n$ # ~ % ~\n% $ ~ & ~\n& % ~ ' ~\n' & ~ ( ~\n( ' ~ ) ~\n) ( ~ * ~\n* ) ~ + ~\n+ * ~ , ~\n, + ~ - ~\n- , ~ . ~\n. - ~ / ~\n/ . ~ 0 ~\n0 / ~ 1 ~\n1 0 ~ 2 ~\n2 1 ~ 3 ~\n3 2 ~ ~ ~", "output": "!\n\"\n#\n$\n%\n&\n'\n(\n)\n*\n+\n,\n-\n.\n/\n0\n1\n2\n3"}, {"input": "13 8 6\n8 ~ ~ 502 ~\n5 8 013 ~ ~\n0 8 2 1 5\n2 8 ~ 3 01\n1 0 2 3 5\n3 12 ~ ~ 5", "output": "88888888\n88888888\n88888888\n88888888\n88888888\n88888888\n88888888\n88888888\n55555022\n55555122\n55555333\n55555333\n55555333"}, {"input": "9 10 10\n9 ~ abcdefghi ~ ~\na ~ ~ b 9\nb a ~ c 9\nc b ~ d 9\nd c ~ e 9\ne d ~ f 9\nf e ~ g 9\ng f ~ h 9\nh g ~ i 9\ni h ~ ~ 9", "output": "999999999a\n999999999b\n999999999c\n999999999d\n999999999e\n999999999f\n999999999g\n999999999h\n999999999i"}, {"input": "11 11 41\nA ~ j B ~\nj ~ k 9 A\nk ~ l 9 j\nl ~ m 9 k\nm ~ n 9 l\nn ~ o 9 m\no ~ p 9 n\np ~ q 9 o\nq ~ r 9 p\nr ~ s 9 q\ns ~ ~ a r\nB A 9 C ~\n9 jklmnopqr abcdefghi tuvwxyzLM BCDEFGHIJ\na s ~ b 9\nC B 9 D ~\nb a ~ c 9\nD C 9 E ~\nc b ~ d 9\nE D 9 F ~\nd c ~ e 9\nF E 9 G ~\ne d ~ f 9\nG F 9 H ~\nf e ~ g 9\nH G 9 I ~\ng f ~ h 9\nI H 9 J ~\nh g ~ i 9\nJ I 9 K ~\ni h ~ N 9\nK J t ~ ~\nt 9 u ~ K\nu 9 v ~ t\nv 9 w ~ u\nw 9 x ~ v\nx 9 y ~ w\ny 9 z ~ x\nz 9 L ~ y\nL 9 M ~ z\nM 9 N ~ L\nN i ~ ~ M", "output": "Ajklmnopqrs\nB999999999a\nC999999999b\nD999999999c\nE999999999d\nF999999999e\nG999999999f\nH999999999g\nI999999999h\nJ999999999i\nKtuvwxyzLMN"}], "language": "cpp"}, "prompt": "L. Agricultural Archaeology\ntime limit per test\n2 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nRecently Berland archaeologists found ancient text describing agricultural field of ancient people. It had a form of n * m rectangle divided into n.m unit cells. Each cell was sown with some kind of a food plant. There were 90 kinds of food plants popular in ancient Berland.\nAs written in the ancient text, region of each kind of food plant that was sown formed a single perfect square without any holes. Two square regions are adjacent if they share at least one unit cell border. The ancient text does not mention the sizes of the squares. But it provides something about the adjacent squares. For each square, it is known which kind of plants were sown to the each side of this square. Formally, for each food kind there are four lists: top neighbour kinds, right neighbour kinds, bottom neighbour kinds and left neighbour kinds. Food plants are written in arbitrary order in each list of neighbours.\nHelp archaeologists to reconstruct any possible agricultural field given the information from the ancient text.\nInput\nThe first line contains three integer numbers n,  m,  k (1 <= n,  m <= 300,  1 <= k <= 90) - the sizes of the field and the number of the sown kinds of food plants.\nThe sown food plants are encoded with characters which ASCII codes are from 33 ('!') to 122 ('z') inclusively.\nEach of the following lines describes one sown food plant (square) and has the format: \"char top right bottom left\", where char is the character encoding the plant, and top, right, bottom, left are the strings of ASCII characters with codes from 33 to 122 - the lists of corresponding neighbours (all characters in each list are unique and written in arbitrary order). The empty list of neighbours is given by the character ' ' which ASCII code is 126. All characters which encode the sown food plants are different.\nOutput\nPrint the field in the form of n * m matrix of characters with ASCII codes from 33 to 122 - possible field corresponding to the given input. If there are many solutions, print any of them. It is guaranteed that at least one solution exists.\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvoid solve() {\n  int n, m, k;\n  cin >> n;\n  cin >> m;\n  cin >> k;\n\n  vector<vector<char>> field(n, vector<char>(m, ' '));\n\n  for (int i = 0; i < k; i++) {\n    char plant;\n    cin >> plant;\n    string top, right, bottom, left;\n    cin >> top;\n    cin >> right;\n    cin >> bottom;\n    cin >> left;\n\n    vector<char> neighbors = {top[0], right[0], bottom[0], left[0]};\n\n    for (int j = 0; j < neighbors.size(); j++) {\n      field[neighbors[j] - '!'][neighbors[j] - '!' - 1] = plant;\n    }\n  }\n\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      cout << field[i][j] << \" \";\n    }\n    cout << endl;\n  }\n}\n\nint main() {\n  solve();\n  return 0;\n}\n", "result": "failed: runtime error: None", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/58", "completion_id": 0, "test_suite": {"code": "int solve(int n, int m, vector<vector<int>>& g) {\n  vector<vector<int>> dist(n, vector<int>(m, INT_MAX));\n  vector<vector<int>> prev(n, vector<int>(m, -1));\n  dist[0][0] = 0;\n  prev[0][0] = 0;\n\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (dist[i][j] != INT_MAX) continue;\n      if (g[i][j] == 1) {\n        dist[i][j] = 1;\n        prev[i][j] = 0;\n      } else if (prev[i][j] != -1) {\n        dist[i][j] = dist[prev[i][j]] + 1;\n        prev[i][j] = prev[prev[i][j]] + 1;\n      }\n    }\n  }\n\n  if (dist[n - 1][m - 1] == INT_MAX) return -1;\n  return dist[n - 1][m - 1];\n}\n", "testcases": [{"input": "4 5\n11..2\n#..22\n#.323\n.#333", "output": "2"}, {"input": "1 5\n1#2#3", "output": "-1"}, {"input": "3 4\n.2..\n...3\n.1#.", "output": "2"}, {"input": "10 10\n##.#..#.#2\n...###....\n#..#....##\n.....#....\n.#........\n.....#####\n...#..#...\n....###...\n###.##...#\n.#...1#.3.", "output": "-1"}, {"input": "4 3\n..#\n.3.\n..2\n..1", "output": "1"}, {"input": "5 5\n.2...\n#2.3.\n.#..#\n.#.11\n#..#.", "output": "2"}, {"input": "1 3\n231", "output": "0"}, {"input": "3 1\n3\n1\n2", "output": "0"}, {"input": "1 4\n12#3", "output": "-1"}, {"input": "10 10\n..#..###.#\n..##......\n#...#..#..\n.....##...\n2...#.#.##\n#..1.#....\n#.....3...\n#.###.##..\n...#..##.#\n.#........", "output": "6"}, {"input": "10 10\n#...33.#.#\n#.#.33.#1.\n2.....#.11\n222#.#.#..\n####...#.#\n#.........\n.#....#...\n..#..#.##.\n##.....#.#\n#..#....#.", "output": "12"}, {"input": "10 10\n..#.....#.\n.#.##...#.\n..#.......\n..111.....\n#..#.....#\n.#...2....\n.....2....\n.....222..\n..........\n#.3....#..", "output": "6"}, {"input": "10 10\n##.#.##.##\n#.#..####.\n#.###.333.\n..#..#3.2#\n...###3..#\n..#.#..#.#\n...#.#.#..\n...##.1..#\n.##.#.1#.#\n..#.#.11..", "output": "2"}, {"input": "10 10\n###..#.#.#\n#....####.\n##1###.#.#\n#.11######\n##11#####.\n..#####..#\n####...#.3\n.#.#..2223\n#####..#33\n#.########", "output": "-1"}, {"input": "997 995\noutput": "-1"}, {"input": "998 999\noutput": "-1"}, {"input": "999 998\noutput": "-1"}, {"input": "998 999\noutput": "-1"}, {"input": "998 999\noutput": "-1"}, {"input": "1000 1000\noutput": "-1"}, {"input": "1000 1000\noutput": "-1"}, {"input": "1000 1000\noutput": "-1"}, {"input": "1000 1000\noutput": "-1"}, {"input": "1000 1000\noutput": "-1"}, {"input": "3 10\n........2.\n......1...\n.........3", "output": "3"}, {"input": "10 10\n1111.22222\n1111.22222\n11......22\n11......22\n..........\n3333333333\n3333333333\n3333333333\n3333333333\n3333333333", "output": "2"}, {"input": "4 4\n3###\n.222\n.#.2\n1222", "output": "1"}, {"input": "3 3\n##3\n1..\n222", "output": "1"}, {"input": "4 4\n1...\n.222\n....\n...3", "output": "2"}, {"input": "1 9\n111222333", "output": "0"}, {"input": "1 10\n111222333.", "output": "0"}, {"input": "1 15\n111112222233333", "output": "0"}, {"input": "5 4\n2..3\n2..3\n....\n1..1\n1111", "output": "2"}, {"input": "10 1\n1\n.\n2\n2\n2\n2\n2\n.\n3\n.", "output": "2"}, {"input": "3 3\n#2#\n1.3\n1.#", "output": "1"}, {"input": "1 9\n1.22222.3", "output": "2"}, {"input": "3 3\n1.2\n1.2\n333", "output": "0"}, {"input": "4 7\n2..1..3\n2##.##3\n2##.##3\n2.....3", "output": "4"}], "language": "cpp"}, "prompt": "C. Three States\ntime limit per test\n5 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nThe famous global economic crisis is approaching rapidly, so the states of Berman, Berance and Bertaly formed an alliance and allowed the residents of all member states to freely pass through the territory of any of them. In addition, it was decided that a road between the states should be built to guarantee so that one could any point of any country can be reached from any point of any other State.\nSince roads are always expensive, the governments of the states of the newly formed alliance asked you to help them assess the costs. To do this, you have been issued a map that can be represented as a rectangle table consisting of n rows and m columns. Any cell of the map either belongs to one of three states, or is an area where it is allowed to build a road, or is an area where the construction of the road is not allowed. A cell is called passable, if it belongs to one of the states, or the road was built in this cell. From any passable cells you can move up, down, right and left, if the cell that corresponds to the movement exists and is passable.\nYour task is to construct a road inside a minimum number of cells, so that it would be possible to get from any cell of any state to any cell of any other state using only passable cells.\nIt is guaranteed that initially it is possible to reach any cell of any state from any cell of this state, moving only along its cells. It is also guaranteed that for any state there is at least one cell that belongs to it.\nInput\nThe first line of the input contains the dimensions of the map n and m (1 <= n, m <= 1000) - the number of rows and columns respectively.\nEach of the next n lines contain m characters, describing the rows of the map. Digits from 1 to 3 represent the accessory to the corresponding state. The character '.' corresponds to the cell where it is allowed to build a road and the character '#' means no construction is allowed in this cell.\nOutput\nPrint a single integer - the minimum number of cells you need to build a road inside in order to connect all the cells of all states. If such a goal is unachievable, print -1.\n", "generation": "int solve(int n, int m, vector<vector<int>>& g) {\n  vector<vector<int>> dist(n, vector<int>(m, INT_MAX));\n  vector<vector<int>> prev(n, vector<int>(m, -1));\n  dist[0][0] = 0;\n  prev[0][0] = 0;\n\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (dist[i][j] != INT_MAX) continue;\n      if (g[i][j] == 1) {\n        dist[i][j] = 1;\n        prev[i][j] = 0;\n      } else if (prev[i][j] != -1) {\n        dist[i][j] = dist[prev[i][j]] + 1;\n        prev[i][j] = prev[prev[i][j]] + 1;\n      }\n    }\n  }\n\n  if (dist[n - 1][m - 1] == INT_MAX) return -1;\n  return dist[n - 1][m - 1];\n}\n", "result": "failed: compilation error: test.cpp:1:25: error: \u2018vector\u2019 has not been declared\n    1 | int solve(int n, int m, vector<vector<int>>& g) {\n      |                         ^~~~~~\ntest.cpp:1:31: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018<\u2019 token\n    1 | int solve(int n, int m, vector<vector<int>>& g) {\n      |                               ^\ntest.cpp: In function \u2018int solve(int, int, int)\u2019:\ntest.cpp:2:3: error: \u2018vector\u2019 was not declared in this scope\n    2 |   vector<vector<int>> dist(n, vector<int>(m, INT_MAX));\n      |   ^~~~~~\ntest.cpp:2:17: error: expected primary-expression before \u2018int\u2019\n    2 |   vector<vector<int>> dist(n, vector<int>(m, INT_MAX));\n      |                 ^~~\ntest.cpp:3:17: error: expected primary-expression before \u2018int\u2019\n    3 |   vector<vector<int>> prev(n, vector<int>(m, -1));\n      |                 ^~~\ntest.cpp:4:3: error: \u2018dist\u2019 was not declared in this scope\n    4 |   dist[0][0] = 0;\n      |   ^~~~\ntest.cpp:5:3: error: \u2018prev\u2019 was not declared in this scope\n    5 |   prev[0][0] = 0;\n      |   ^~~~\ntest.cpp:9:25: error: \u2018INT_MAX\u2019 was not declared in this scope\n    9 |       if (dist[i][j] != INT_MAX) continue;\n      |                         ^~~~~~~\ntest.cpp:1:1: note: \u2018INT_MAX\u2019 is defined in header \u2018<climits>\u2019; did you forget to \u2018#include <climits>\u2019?\n  +++ |+#include <climits>\n    1 | int solve(int n, int m, vector<vector<int>>& g) {\ntest.cpp:10:11: error: \u2018g\u2019 was not declared in this scope\n   10 |       if (g[i][j] == 1) {\n      |           ^\ntest.cpp:20:29: error: \u2018INT_MAX\u2019 was not declared in this scope\n   20 |   if (dist[n - 1][m - 1] == INT_MAX) return -1;\n      |                             ^~~~~~~\ntest.cpp:20:29: note: \u2018INT_MAX\u2019 is defined in header \u2018<climits>\u2019; did you forget to \u2018#include <climits>\u2019?\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/59", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool isStable(vector<int>& a) {\n  vector<int> b(a.size());\n  b[0] = a[0];\n  b[a.size() - 1] = a[a.size() - 1];\n  for (int i = 1; i < a.size() - 1; i++) {\n    vector<int> c(a.size());\n    c[0] = a[0];\n    c[a.size() - 1] = a[a.size() - 1];\n    for (int j = 1; j < a.size() - 1; j++) {\n      c[j] = median(a[j - 1], a[j], a[j + 1]);\n    }\n    if (c == b) {\n      return true;\n    }\n    b = c;\n  }\n  return false;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  vector<int> a(n);\n  cin >> a;\n\n  if (isStable(a)) {\n    cout << 2 << endl;\n    cout << a[0] << \" \" << a[n - 1] << endl;\n  } else {\n    cout << -1 << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "4\n0 0 1 1", "output": "0\n0 0 1 1"}, {"input": "5\n0 1 0 1 0", "output": "2\n0 0 0 0 0"}, {"input": "3\n1 0 0", "output": "0\n1 0 0"}, {"input": "4\n1 0 0 1", "output": "0\n1 0 0 1"}, {"input": "7\n1 0 1 1 1 0 1", "output": "1\n1 1 1 1 1 1 1"}, {"input": "14\n0 1 0 0 0 1 1 0 1 0 1 0 1 0", "output": "3\n0 0 0 0 0 1 1 1 1 1 0 0 0 0"}, {"input": "3\n1 0 1", "output": "1\n1 1 1"}, {"input": "3\n0 0 1", "output": "0\n0 0 1"}, {"input": "3\n1 1 0", "output": "0\n1 1 0"}, {"input": "3\n1 1 1", "output": "0\n1 1 1"}, {"input": "4\n1 1 0 1", "output": "1\n1 1 1 1"}, {"input": "4\n1 0 1 1", "output": "1\n1 1 1 1"}, {"input": "10\n0 1 0 1 0 0 1 0 1 0", "output": "2\n0 0 0 0 0 0 0 0 0 0"}, {"input": "4\n0 1 1 0", "output": "0\n0 1 1 0"}, {"input": "168\n0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0", "output": "36\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"}, {"input": "3\n0 1 1", "output": "0\n0 1 1"}, {"input": "3\n0 0 0", "output": "0\n0 0 0"}, {"input": "4\n0 1 0 1", "output": "1\n0 0 1 1"}, {"input": "3\n0 1 0", "output": "1\n0 0 0"}], "language": "cpp"}, "prompt": "A. Median Smoothing\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nA schoolboy named Vasya loves reading books on programming and mathematics. He has recently read an encyclopedia article that described the method of median smoothing (or median filter) and its many applications in science and engineering. Vasya liked the idea of the method very much, and he decided to try it in practice.\nApplying the simplest variant of median smoothing to the sequence of numbers a1, a2, ..., an will result a new sequence b1, b2, ..., bn obtained by the following algorithm:\nb1 = a1, bn = an, that is, the first and the last number of the new sequence match the corresponding numbers of the original sequence.\nFor i = 2, ..., n - 1 value bi is equal to the median of three values ai - 1, ai and ai + 1.\nThe median of a set of three numbers is the number that goes on the second place, when these three numbers are written in the non-decreasing order. For example, the median of the set 5, 1, 2 is number 2, and the median of set 1, 0, 1 is equal to 1.\nIn order to make the task easier, Vasya decided to apply the method to sequences consisting of zeros and ones only.\nHaving made the procedure once, Vasya looked at the resulting sequence and thought: what if I apply the algorithm to it once again, and then apply it to the next result, and so on? Vasya tried a couple of examples and found out that after some number of median smoothing algorithm applications the sequence can stop changing. We say that the sequence is stable, if it does not change when the median smoothing is applied to it.\nNow Vasya wonders, whether the sequence always eventually becomes stable. He asks you to write a program that, given a sequence of zeros and ones, will determine whether it ever becomes stable. Moreover, if it ever becomes stable, then you should determine what will it look like and how many times one needs to apply the median smoothing algorithm to initial sequence in order to obtain a stable one.\nInput\nThe first input line of the input contains a single integer n (3 <= n <= 500 000) - the length of the initial sequence.\nThe next line contains n integers a1, a2, ..., an (ai = 0 or ai = 1), giving the initial sequence itself.\nOutput\nIf the sequence will never become stable, print a single number  - 1.\nOtherwise, first print a single integer - the minimum number of times one needs to apply the median smoothing algorithm to the initial sequence before it becomes is stable. In the second line print n numbers separated by a space  - the resulting sequence itself.\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool isStable(vector<int>& a) {\n  vector<int> b(a.size());\n  b[0] = a[0];\n  b[a.size() - 1] = a[a.size() - 1];\n  for (int i = 1; i < a.size() - 1; i++) {\n    vector<int> c(a.size());\n    c[0] = a[0];\n    c[a.size() - 1] = a[a.size() - 1];\n    for (int j = 1; j < a.size() - 1; j++) {\n      c[j] = median(a[j - 1], a[j], a[j + 1]);\n    }\n    if (c == b) {\n      return true;\n    }\n    b = c;\n  }\n  return false;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  vector<int> a(n);\n  cin >> a;\n\n  if (isStable(a)) {\n    cout << 2 << endl;\n    cout << a[0] << \" \" << a[n - 1] << endl;\n  } else {\n    cout << -1 << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018bool isStable(std::vector<int>&)\u2019:\ntest.cpp:15:14: error: \u2018median\u2019 was not declared in this scope\n   15 |       c[j] = median(a[j - 1], a[j], a[j + 1]);\n      |              ^~~~~~\ntest.cpp: In function \u2018int main()\u2019:\ntest.cpp:29:7: error: no match for \u2018operator>>\u2019 (operand types are \u2018std::istream\u2019 {aka \u2018std::basic_istream<char>\u2019} and \u2018std::vector<int>\u2019)\n   29 |   cin >> a;\n      |   ~~~ ^~ ~\n      |   |      |\n      |   |      std::vector<int>\n      |   std::istream {aka std::basic_istream<char>}\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:120:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__istream_type& (*)(std::basic_istream<_CharT, _Traits>::__istream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:120:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__istream_type& (*)(std::basic_istream<char>::__istream_type&)\u2019 {aka \u2018std::basic_istream<char>& (*)(std::basic_istream<char>&)\u2019}\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:124:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__ios_type& (*)(std::basic_istream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>; std::basic_istream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]\u2019\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:124:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__ios_type& (*)(std::basic_istream<char>::__ios_type&)\u2019 {aka \u2018std::basic_ios<char>& (*)(std::basic_ios<char>&)\u2019}\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:131:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:131:30: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::ios_base& (*)(std::ios_base&)\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |                  ~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:168:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(bool&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  168 |       operator>>(bool& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:168:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018bool&\u2019\n  168 |       operator>>(bool& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:172:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(short int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  172 |       operator>>(short& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:172:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short int&\u2019\n  172 |       operator>>(short& __n);\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:175:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(short unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  175 |       operator>>(unsigned short& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:175:34: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short unsigned int&\u2019\n  175 |       operator>>(unsigned short& __n)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:179:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  179 |       operator>>(int& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:179:23: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018int&\u2019\n  179 |       operator>>(int& __n);\n      |                  ~~~~~^~~\n/usr/include/c++/9/istream:182:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  182 |       operator>>(unsigned int& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:182:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018unsigned int&\u2019\n  182 |       operator>>(unsigned int& __n)\n      |                  ~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:186:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  186 |       operator>>(long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:186:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long int&\u2019\n  186 |       operator>>(long& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:190:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  190 |       operator>>(unsigned long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:190:33: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long unsigned int&\u2019\n  190 |       operator>>(unsigned long& __n)\n      |                  ~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:195:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  195 |       operator>>(long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:195:29: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long int&\u2019\n  195 |       operator>>(long long& __n)\n      |                  ~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:199:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:199:38: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long unsigned int&\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |                  ~~~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:214:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(float&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  214 |       operator>>(float& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:214:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018float&\u2019\n  214 |       operator>>(float& __f)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:218:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  218 |       operator>>(double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:218:26: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018double&\u2019\n  218 |       operator>>(double& __f)\n      |                  ~~~~~~~~^~~\n/usr/include/c++/9/istream:222:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  222 |       operator>>(long double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:222:31: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long double&\u2019\n  222 |       operator>>(long double& __f)\n      |                  ~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:235:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(void*&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  235 |       operator>>(void*& __p)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:235:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018void*&\u2019\n  235 |       operator>>(void*& __p)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:259:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]\u2019\n  259 |       operator>>(__streambuf_type* __sb);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:259:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__streambuf_type*\u2019 {aka \u2018std::basic_streambuf<char>*\u2019}\n  259 |       operator>>(__streambuf_type* __sb);\n      |                  ~~~~~~~~~~~~~~~~~~^~~~\nIn file included from /usr/include/c++/9/string:56,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/ostream:38,\n                 from /usr/include/c++/9/iostream:39,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 1466 |     operator>>(basic_istream<_CharT, _Traits>& __in,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note:   template argument deduction/substitution failed:\ntest.cpp:29:10: note:   \u2018std::vector<int>\u2019 is not derived from \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\n   29 |   cin >> a;\n      |          ^\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:931:5: note: candidate: \u2018template<class _CharT, class _Traits> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT&)\u2019\n  931 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:931:5: note:   template argument deduction/substitution failed:\ntest.cpp:29:10: note:   deduced conflicting types for parameter \u2018_CharT\u2019 (\u2018char\u2019 and \u2018std::vector<int>\u2019)\n   29 |   cin >> a;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:756:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char&)\u2019\n  756 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:756:5: note:   template argument deduction/substitution failed:\ntest.cpp:29:10: note:   cannot convert \u2018a\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char&\u2019\n   29 |   cin >> a;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:761:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char&)\u2019\n  761 |     operator>>(basic_istream<char, _Traits>& __in, signed char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:761:5: note:   template argument deduction/substitution failed:\ntest.cpp:29:10: note:   cannot convert \u2018a\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char&\u2019\n   29 |   cin >> a;\n      |          ^\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:963:5: note: candidate: \u2018template<class _CharT2, class _Traits2> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT2*)\u2019\n  963 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:963:5: note:   template argument deduction/substitution failed:\ntest.cpp:29:10: note:   mismatched types \u2018_CharT2*\u2019 and \u2018std::vector<int>\u2019\n   29 |   cin >> a;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:803:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char*)\u2019\n  803 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:803:5: note:   template argument deduction/substitution failed:\ntest.cpp:29:10: note:   cannot convert \u2018a\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char*\u2019\n   29 |   cin >> a;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:808:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char*)\u2019\n  808 |     operator>>(basic_istream<char, _Traits>& __in, signed char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:808:5: note:   template argument deduction/substitution failed:\ntest.cpp:29:10: note:   cannot convert \u2018a\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char*\u2019\n   29 |   cin >> a;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:980:5: note: candidate: \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&)\u2019\n  980 |     operator>>(_Istream&& __is, _Tp&& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:980:5: note:   template argument deduction/substitution failed:\n/usr/include/c++/9/istream: In substitution of \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&) [with _Istream = std::basic_istream<char>&; _Tp = std::vector<int>&]\u2019:\ntest.cpp:29:10:   required from here\n/usr/include/c++/9/istream:980:5: error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false, std::basic_istream<char>&>\u2019\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/62", "completion_id": 0, "test_suite": {"code": "int solve(int n, int k, int s, vector<int> &q) {\n  sort(q.begin(), q.end());\n  int ans = LLONG_MAX;\n  for (int i = 0; i < n - k + 1; i++) {\n    int sum = 0;\n    for (int j = 0; j < k; j++) {\n      sum += q[i + j];\n    }\n    int swaps = min(s, i);\n    ans = min(ans, sum + swaps * 2);\n  }\n  return ans;\n}\n", "testcases": [{"input": "3 2 2\n2 4 1", "output": "3"}, {"input": "5 4 2\n10 1 6 2 5", "output": "18"}, {"input": "5 2 3\n3 1 4 2 5", "output": "3"}, {"input": "17 7 10\n4096 64 512 1 256 16384 8 1024 65536 2 128 32768 4 16 8192 32 2048", "output": "4811"}, {"input": "22 7 10\n2 7 14 33 36 37 3 33 29 38 39 1 26 24 41 4 36 38 16 25 13 39", "output": "89"}, {"input": "40 40 1000000000\n1521 49 100 625 961 676 16 121 361 1369 64 256 484 1089 196 36 144 289 1024 324 841 729 529 225 1156 576 9 169 400 900 81 1296 25 1 1600 441 4 1444 1225 784", "output": "22140"}, {"input": "1 1 1\n1", "output": "1"}, {"input": "22 10 22\n2584 10946 144 17711 3 13 1 233 1597 610 5 1 4181 2 8 987 6765 34 21 55 89 377", "output": "3596"}, {"input": "21 5 9\n157 21 241 73 307 273 57 133 381 91 343 43 3 111 13 7 183 421 1 31 211", "output": "399"}, {"input": "12 6 1\n128 8 32 2 4 2048 1024 64 16 512 1 256", "output": "1198"}, {"input": "4 4 4\n9 5 2 2", "output": "18"}, {"input": "4 2 1\n5 8 7 4", "output": "12"}, {"input": "4 2 2\n7 1 3 3", "output": "4"}, {"input": "6 3 5\n5 3 7 1 10 4", "output": "9"}, {"input": "19 13 16\n14 2 7 4 15 9 3 10 17 13 8 1 19 12 16 18 6 11 5", "output": "97"}, {"input": "16 9 11\n128 4 1024 8192 8 32 4096 16 16384 64 1 32768 2 512 256 2048", "output": "5311"}, {"input": "7 3 6\n64 8 16 32 4 1 2", "output": "25"}, {"input": "20 10 999999999\n128 1 512 256 2 16 4 32 64 8 131072 16384 1024 65536 2048 8192 4096 32768 524288 262144", "output": "1023"}, {"input": "20 10 21\n32768 262144 4096 2048 8192 1024 16384 131072 65536 524288 2 4 128 512 32 8 16 1 64 256", "output": "65158"}, {"input": "20 10 19\n524288 2048 262144 32768 1024 8192 65536 131072 4096 16384 128 16 512 64 2 256 1 4 8 32", "output": "261264"}, {"input": "18 9 19\n256 16384 8192 131072 65536 2048 4096 32768 512 1024 128 8 1 32 4 64 2 16", "output": "31625"}, {"input": "23 11 19\n127 103 1 23 81 43 61 153 181 47 7 3 27 91 43 57 21 1 73 13 13 1 31", "output": "463"}, {"input": "8 3 6\n57 43 31 21 13 1 7 3", "output": "65"}, {"input": "8 7 5\n57 21 43 31 13 7 1 3", "output": "133"}, {"input": "13 7 20\n57 27 13 91 73 1 13 1 43 21 31 3 7", "output": "79"}, {"input": "17 2 2\n43 81 103 13 27 61 43 31 21 13 1 7 1 3 91 73 57", "output": "56"}, {"input": "18 6 7\n999990 999992 999987 999994 999983 999985 999996 999998 999997 999999 999988 999993 999995 999989 1000000 999984 999991 999986", "output": "5999925"}, {"input": "18 14 6\n58 21 44 78 93 54 15 29 81 10 83 19 4 51 17 9 68 21", "output": "532"}, {"input": "21 15 10\n157 21 241 3 31 343 13 307 73 211 381 1 111 133 43 183 91 7 421 57 273", "output": "1653"}, {"input": "98 44 103\n39 77 67 25 81 26 50 11 73 95 86 16 90 33 14 79 12 46 68 64 60 27 41 15 34 24 3 61 83 47 57 65 84 43 40 21 94 72 82 85 23 71 76 32 10 17 30 18 44 59 35 89 6 63 7 69 62 70 4 29 92 87 31 48 36 28 45 97 93 98 56 38 58 80 8 1 74 91 53 55 54 51 96 5 42 52 9 22 78 88 75 13 66 2 37 20 49 19", "output": "1772"}, {"input": "77 45 197\n689 744 654 690 553 753 605 595 445 736 632 487 552 422 479 460 530 677 762 479 425 538 634 406 760 478 762 470 759 736 491 466 762 557 741 717 693 476 298 157 262 284 172 198 338 302 145 181 298 401 152 217 156 271 325 380 92 1 247 24 239 272 281 351 95 225 376 265 31 307 278 17 78 225 355 301 319", "output": "19129"}, {"input": "100 10 44\n122 175 26 45 172 81 47 29 97 2 175 125 182 184 17 156 132 102 128 137 57 139 118 11 79 106 140 168 68 16 140 63 193 49 191 110 155 68 31 180 157 18 134 128 76 155 21 80 122 145 111 67 67 74 91 104 35 34 165 180 21 95 101 152 125 131 102 153 96 22 89 199 7 66 32 102 168 133 75 192 84 10 94 128 154 112 9 80 43 121 151 92 20 197 7 125 167 117 38 200", "output": "437"}, {"input": "44 30 41\n260522 914575 436426 979445 648772 690081 933447 190629 703497 47202 407775 894325 963982 804784 968417 302156 631932 735902 895728 78537 723857 330739 286918 329211 539679 238506 63340 686568 361868 660016 287940 296263 224593 601449 836991 890310 823355 177068 11431 8580 291757 449218 374934 594328", "output": "14459389"}, {"input": "87 11 61\n1 88 2 85 1 84 2 81 1 80 2 77 1 76 2 73 1 72 2 69 1 68 2 65 1 64 2 61 1 60 2 57 1 56 2 53 1 52 2 49 1 48 2 45 1 44 2 41 1 40 2 37 1 36 2 33 1 32 2 29 1 28 2 25 1 24 2 21 1 20 2 17 1 16 2 13 1 12 2 9 1 8 2 5 1 4 2", "output": "15"}, {"input": "66 6 149\n3698 2999 3798 1573 256 2985 1411 2673 2185 742 1453 1843 156 2769 4162 92 2676 2722 3316 1125 1377 567 782 139 2915 4182 3716 1332 1540 736 2300 3635 3245 3273 1975 1702 3987 516 853 1671 1950 2712 4330 3616 3948 2051 3777 1768 1299 2302 2861 1359 263 214 1611 3340 1267 113 3430 4116 1305 801 4055 4176 1633 643", "output": "970"}, {"input": "99 33 184\n2 1 2 1 2 1 1 1 1 2 1 1 2 2 1 2 2 2 2 1 1 1 2 1 1 2 2 2 2 2 2 1 1 1 1 2 1 2 1 2 1 2 2 2 2 1 1 2 2 1 1 1 1 2 1 2 1 2 1 2 1 1 1 2 1 1 2 1 2 2 1 1 1 2 2 2 2 1 1 2 2 2 2 2 2 2 1 2 1 1 1 2 2 1 1 1 1 1 2", "output": "40"}, {"input": "100 99 100000000\n1521 5929 4489 625 6561 676 2500 121 5329 9025 7396 256 8100 1089 196 6241 144 10000 4624 4096 3600 729 1681 225 1156 576 9 3721 6889 2209 3249 4225 9801 1849 1600 441 8836 5184 6724 7225 529 5041 5776 1024 100 289 900 324 1936 3481 1225 7921 36 3969 49 4761 3844 4900 16 841 8464 7569 961 2304 1296 784 2025 9409 8649 9604 3136 1444 3364 6400 64 1 5476 8281 2809 3025 2916 2601 9216 25 1764 2704 81 484 6084 7744 5625 169 4356 4 1369 400 2401 361 7056 2116", "output": "328350"}, {"input": "98 67 1742\n631 805 759 702 837 705 690 722 814 740 550 762 902 552 694 717 881 901 729 864 717 631 934 922 671 833 828 751 900 816 817 660 892 949 915 866 689 576 775 777 748 914 686 918 844 672 963 552 972 360 28 134 267 526 465 435 247 442 105 36 417 519 537 265 88 443 482 71 13 368 304 32 227 447 255 255 451 196 165 87 320 59 172 381 320 260 408 301 548 129 142 491 375 273 295 418 41 427", "output": "25844"}, {"input": "64 33 973\n588 428 351 551 531 593 381 402 368 408 501 315 586 462 481 335 415 580 488 427 557 594 578 312 476 489 390 455 337 496 549 511 222 137 179 137 260 162 7 101 25 251 104 155 300 76 147 114 245 245 132 42 200 304 235 97 252 106 5 263 159 214 300 198", "output": "5697"}, {"input": "100 50 2500\n835 545 593 676 951 792 580 784 537 968 980 728 575 991 643 934 925 757 902 504 712 717 607 679 502 739 674 965 568 895 497 772 982 775 731 607 940 868 629 511 691 694 918 522 506 857 896 932 922 501 354 480 84 426 167 449 218 333 475 420 153 197 466 340 409 16 68 22 121 355 467 328 34 438 200 328 263 10 156 325 431 152 211 80 67 492 355 221 310 432 399 221 489 302 417 325 445 81 447 202", "output": "14181"}, {"input": "86 51 999\n88 2 85 1 84 2 81 1 80 2 77 1 76 2 73 1 72 2 69 1 68 2 65 1 64 2 61 1 60 2 57 1 56 2 53 1 52 2 49 1 48 2 45 1 44 2 41 1 40 2 37 1 36 2 33 1 32 2 29 1 28 2 25 1 24 2 21 1 20 2 17 1 16 2 13 1 12 2 9 1 8 2 5 1 4 2", "output": "336"}, {"input": "20 10 30\n4096 64 512 1 256 16384 8 1024 262144 2 128 32768 4 16 8192 32 2048 65536 524288 131072", "output": "1023"}, {"input": "15 10 26\n4096 64 512 1 256 16384 8 1024 2048 2 128 32 4 16 8192", "output": "1023"}, {"input": "18 4 24\n4096 64 512 1 256 16384 8 1024 131072 2 128 32768 4 16 8192 32 2048 65536", "output": "15"}, {"input": "56 5 12\n2 1 2 1 2 1 1 1 1 2 1 1 2 2 1 2 2 2 2 1 1 1 2 1 1 2 2 2 2 2 2 1 1 1 1 2 1 2 1 2 1 2 2 2 2 1 1 2 2 1 1 1 1 2 1 2", "output": "5"}, {"input": "88 44 975\n2730 5903 6218 3509 4612 2017 5767 5093 2185 4130 3295 2421 1742 6448 4705 5900 3644 1609 6110 6704 7185 3955 7558 5947 6303 2730 812 2508 3752 2672 3268 2183 3729 7145 2943 1083 5356 5574 5543 2434 3757 4164 5782 2648 2012 6891 7165 5640 850 4313 6623 5715 747 7474 2579 2856 6107 4882 6405 7020 6629 2119 7093 1272 5989 729 822 1608 2579 4398 2097 591 2447 2562 1120 3150 3664 4205 2003 4224 5684 4930 2414 5312 4922 2568 7593 4384", "output": "102415"}, {"input": "100 58 1111\n101 1 100 2 97 1 96 2 93 1 92 2 89 1 88 2 85 1 84 2 81 1 80 2 77 1 76 2 73 1 72 2 69 1 68 2 65 1 64 2 61 1 60 2 57 1 56 2 53 1 52 2 49 1 48 2 45 1 44 2 41 1 40 2 37 1 36 2 33 1 32 2 29 1 28 2 25 1 24 2 21 1 20 2 17 1 16 2 13 1 12 2 9 1 8 2 5 1 4 2", "output": "619"}, {"input": "100 56 497\n2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1", "output": "65534"}, {"input": "96 55 463\n2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536", "output": "67582"}, {"input": "98 55 499\n631 805 759 702 837 705 690 722 814 740 550 762 902 552 694 717 881 901 729 864 717 631 934 922 671 833 828 751 900 816 817 660 892 949 915 866 689 576 775 777 748 914 686 918 844 672 963 552 972 360 28 134 267 526 465 435 247 442 105 36 417 519 537 265 88 443 482 71 13 368 304 32 227 447 255 255 451 196 165 87 320 59 172 381 320 260 408 301 548 129 142 491 375 273 295 418 41 427", "output": "28523"}, {"input": "88 49 600\n90 95 58 165 36 81 135 165 73 82 127 133 158 112 129 92 124 126 16 25 145 83 166 139 143 90 108 56 44 32 100 71 33 105 127 118 27 76 87 116 61 146 150 8 76 27 125 8 146 89 111 83 43 82 115 40 123 130 69 156 117 7 53 40 5 115 118 25 24 174 161 63 159 98 64 158 144 157 67 176 52 2 126 32 170 104 25 160", "output": "3049"}, {"input": "90 20 300\n260522 914575 436426 979445 648772 690081 933447 190629 703497 47202 407775 894325 963982 804784 968417 302156 631932 735902 895728 78537 723857 330739 286918 329211 539679 238506 63340 686568 361868 660016 287940 296263 224593 601449 836991 890310 823355 177068 11431 8580 291757 449218 374934 594328 163676 829355 996221 899080 195922 531545 748511 34067 575467 338674 284691 206504 999835 262034 344965 959980 381221 45895 32501 948152 708325 147731 229302 248153 309896 119022 797489 208399 87060...", "output": "4171073"}, {"input": "95 45 400\n1521 5929 4489 625 6561 676 2500 121 5329 9025 7396 256 8100 1089 196 6241 144 2116 4624 4096 3600 729 1681 225 1156 576 9 3721 6889 2209 3249 4225 7056 1849 1600 441 8836 5184 6724 7225 529 5041 5776 1024 100 289 900 324 1936 3481 1225 7921 36 3969 49 4761 3844 4900 16 841 8464 7569 961 2304 1296 784 2025 2401 8649 361 3136 1444 3364 6400 64 1 5476 8281 2809 3025 2916 2601 400 25 1764 2704 81 484 6084 7744 5625 169 4356 4 1369", "output": "67460"}, {"input": "81 40 666\n1521 5929 4489 625 6561 676 2500 121 5329 1369 2704 256 484 1089 196 6241 144 2116 4624 4096 3600 729 1681 225 1156 576 9 3721 400 2209 3249 4225 25 1849 1600 441 4 5184 2601 1764 529 5041 5776 1024 100 289 900 324 1936 3481 1225 6084 36 3969 49 4761 3844 4900 16 841 169 81 961 2304 1296 784 2025 2401 4356 361 3136 1444 3364 6400 64 1 5476 5625 2809 3025 2916", "output": "22845"}, {"input": "100 50 2500\n991 982 980 968 965 951 940 934 932 925 922 918 902 896 895 868 857 835 792 784 775 772 757 739 731 728 717 712 694 691 679 676 674 643 629 607 607 593 580 575 568 545 537 522 511 506 504 502 501 497 492 489 480 475 467 466 449 447 445 438 432 431 426 420 417 409 399 355 355 354 340 333 328 328 325 325 310 302 263 221 221 218 211 202 200 197 167 156 153 152 121 84 81 80 68 67 34 22 16 10", "output": "14181"}, {"input": "144 68 907\n117 121 137 129 81 26 113 11 141 95 135 139 90 109 14 79 112 100 120 64 60 101 41 15 34 132 3 61 103 47 144 65 99 43 128 21 110 72 82 115 134 71 76 32 10 106 30 18 44 59 116 114 6 63 7 69 62 70 4 29 118 87 31 107 119 104 45 97 93 98 56 38 58 80 130 143 74 131 102 55 54 51 140 5 42 52 9 22 78 88 75 13 123 126 37 105 49 19 84 46 27 53 133 108 20 17 48 28 33 94 125 12 50 89 85 35 39 92 127 111 77 2 136 124 68 122 36 40 25 8 91 24 142 23 86 66 67 83 16 96 73 138 1 57", "output": "3581"}, {"input": "128 75 934\n2 1 2 1 2 1 1 1 1 2 1 1 2 2 1 2 2 2 2 1 1 1 2 1 1 2 2 2 2 2 2 1 1 1 1 2 1 2 1 2 1 2 2 2 2 1 1 2 2 1 1 1 1 2 1 2 1 2 1 2 1 1 1 2 1 1 2 1 2 2 1 1 1 2 2 2 2 1 1 2 2 2 2 2 2 2 1 2 1 1 1 2 2 1 1 1 1 1 2 2 2 2 1 2 2 1 2 1 1 2 2 2 1 1 1 2 1 1 2 1 2 2 2 1 2 2 1 1", "output": "91"}, {"input": "149 135 1145\n117 121 137 129 147 26 113 11 141 148 135 139 90 109 14 79 112 100 120 64 60 101 41 15 34 132 3 61 103 47 144 65 99 43 128 21 110 72 82 115 149 71 76 32 10 106 30 18 44 59 116 114 6 63 7 69 62 70 4 29 118 145 31 107 119 104 45 97 93 98 56 38 58 80 130 143 74 131 102 55 54 51 140 5 42 52 9 22 78 88 75 13 123 126 37 105 49 19 84 46 27 53 133 108 20 17 48 28 33 94 125 12 50 89 85 35 39 92 127 146 77 2 136 124 68 122 36 40 25 8 91 24 142 23 86 66 67 83 16 96 73 138 1 57 87 111 81 95 134", "output": "9180"}, {"input": "133 133 1\n2 133 1 132 2 129 1 128 2 125 1 124 2 121 1 120 2 117 1 116 2 113 1 112 2 109 1 108 2 105 1 104 2 101 1 100 2 97 1 96 2 93 1 92 2 89 1 88 2 85 1 84 2 81 1 80 2 77 1 76 2 73 1 72 2 69 1 68 2 65 1 64 2 61 1 60 2 57 1 56 2 53 1 52 2 49 1 48 2 45 1 44 2 41 1 40 2 37 1 36 2 33 1 32 2 29 1 28 2 25 1 24 2 21 1 20 2 17 1 16 2 13 1 12 2 9 1 8 2 5 1 4 2", "output": "4622"}, {"input": "135 37 483\n2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 ...", "output": "4219"}, {"input": "150 1 1\n260522 914575 436426 979445 648772 690081 933447 190629 703497 47202 407775 894325 963982 804784 968417 302156 631932 735902 895728 78537 723857 330739 286918 329211 539679 238506 63340 686568 361868 660016 287940 296263 224593 601449 836991 890310 823355 177068 11431 8580 291757 449218 374934 594328 163676 829355 996221 899080 195922 531545 748511 34067 575467 338674 284691 206504 999835 262034 344965 959980 381221 45895 32501 948152 708325 147731 229302 248153 309896 119022 797489 208399 870607 ...", "output": "260522"}, {"input": "1 1 1\n2", "output": "2"}, {"input": "2 1 10\n4 1", "output": "1"}, {"input": "133 34 1\n2 1 2 1 2 1 1 1 1 2 1 1 2 2 1 2 2 2 2 1 1 1 2 1 1 2 2 2 2 2 2 1 1 1 1 2 1 2 1 2 1 2 2 2 2 1 1 2 2 1 1 1 1 2 1 2 1 2 1 2 1 1 1 2 1 1 2 1 2 2 1 1 1 2 2 2 2 1 1 2 2 2 2 2 2 2 1 2 1 1 1 2 2 1 1 1 1 1 2 2 2 2 1 2 2 1 2 1 1 2 2 2 1 1 1 2 1 1 2 1 2 2 2 1 2 2 1 1 2 1 2 2 1", "output": "51"}, {"input": "150 75 5625\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "output": "75"}, {"input": "150 100 5000\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "output": "150"}, {"input": "150 100 4999\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "output": "150"}], "language": "cpp"}, "prompt": "D. Top Secret Task\ntime limit per test\n3 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nA top-secret military base under the command of Colonel Zuev is expecting an inspection from the Ministry of Defence. According to the charter, each top-secret military base must include a top-secret troop that should... well, we cannot tell you exactly what it should do, it is a top secret troop at the end. The problem is that Zuev's base is missing this top-secret troop for some reasons.\nThe colonel decided to deal with the problem immediately and ordered to line up in a single line all n soldiers of the base entrusted to him. Zuev knows that the loquacity of the i-th soldier from the left is equal to qi. Zuev wants to form the top-secret troop using k leftmost soldiers in the line, thus he wants their total loquacity to be as small as possible (as the troop should remain top-secret). To achieve this, he is going to choose a pair of consecutive soldiers and swap them. He intends to do so no more than s times. Note that any soldier can be a participant of such swaps for any number of times. The problem turned out to be unusual, and colonel Zuev asked you to help.\nDetermine, what is the minimum total loquacity of the first k soldiers in the line, that can be achieved by performing no more than s swaps of two consecutive soldiers.\nInput\nThe first line of the input contains three positive integers n, k, s (1 <= k <= n <= 150, 1 <= s <= 109) - the number of soldiers in the line, the size of the top-secret troop to be formed and the maximum possible number of swap operations of the consecutive pair of soldiers, respectively.\nThe second line of the input contains n integer qi (1 <= qi <= 1 000 000) - the values of loquacity of soldiers in order they follow in line from left to right.\nOutput\nPrint a single integer - the minimum possible total loquacity of the top-secret troop.\n", "generation": "int solve(int n, int k, int s, vector<int> &q) {\n  sort(q.begin(), q.end());\n  int ans = LLONG_MAX;\n  for (int i = 0; i < n - k + 1; i++) {\n    int sum = 0;\n    for (int j = 0; j < k; j++) {\n      sum += q[i + j];\n    }\n    int swaps = min(s, i);\n    ans = min(ans, sum + swaps * 2);\n  }\n  return ans;\n}\n", "result": "failed: compilation error: test.cpp:1:32: error: \u2018vector\u2019 has not been declared\n    1 | int solve(int n, int k, int s, vector<int> &q) {\n      |                                ^~~~~~\ntest.cpp:1:38: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018<\u2019 token\n    1 | int solve(int n, int k, int s, vector<int> &q) {\n      |                                      ^\ntest.cpp: In function \u2018int solve(int, int, int, int)\u2019:\ntest.cpp:2:8: error: \u2018q\u2019 was not declared in this scope\n    2 |   sort(q.begin(), q.end());\n      |        ^\ntest.cpp:2:3: error: \u2018sort\u2019 was not declared in this scope; did you mean \u2018short\u2019?\n    2 |   sort(q.begin(), q.end());\n      |   ^~~~\n      |   short\ntest.cpp:3:13: error: \u2018LLONG_MAX\u2019 was not declared in this scope\n    3 |   int ans = LLONG_MAX;\n      |             ^~~~~~~~~\ntest.cpp:1:1: note: \u2018LLONG_MAX\u2019 is defined in header \u2018<climits>\u2019; did you forget to \u2018#include <climits>\u2019?\n  +++ |+#include <climits>\n    1 | int solve(int n, int k, int s, vector<int> &q) {\ntest.cpp:9:17: error: \u2018min\u2019 was not declared in this scope\n    9 |     int swaps = min(s, i);\n      |                 ^~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/64", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring solve(string& s, vector<pair<char, char>>& v) {\n  string ans = \"\";\n  vector<char> used(26, 0);\n  for (int i = 0; i < v.size(); i++) {\n    used[v[i].first] = 1;\n    used[v[i].second] = 1;\n  }\n  for (int i = 0; i < s.length(); i++) {\n    if (!used[s[i]]) {\n      ans += s[i];\n    } else if (s[i] == v[i].first) {\n      ans += v[i].second;\n    } else {\n      ans += s[i];\n    }\n  }\n  return ans;\n}\n\nint main() {\n  string s;\n  cin >> s;\n  int m;\n  cin >> m;\n  vector<pair<char, char>> v(m);\n  for (int i = 0; i < m; i++) {\n    cin >> v[i].first;\n    cin >> v[i].second;\n  }\n  string ans = solve(s, v);\n  cout << ans;\n  return 0;\n}\n", "testcases": [{"input": "6 1\npolice\np m", "output": "molice"}, {"input": "11 6\nabacabadaba\na b\nb c\na d\ne g\nf a\nb b", "output": "cdcbcdcfcdc"}, {"input": "1 1\nf\nz h", "output": "f"}, {"input": "1 1\na\na b", "output": "b"}, {"input": "10 10\nlellelleel\ne l\ne l\ne l\ne l\ne l\ne e\nl l\nl e\nl l\ne e", "output": "lellelleel"}], "language": "cpp"}, "prompt": "B. Rebranding\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nThe name of one small but proud corporation consists of n lowercase English letters. The Corporation has decided to try rebranding - an active marketing strategy, that includes a set of measures to change either the brand (both for the company and the goods it produces) or its components: the name, the logo, the slogan. They decided to start with the name.\nFor this purpose the corporation has consecutively hired m designers. Once a company hires the i-th designer, he immediately contributes to the creation of a new corporation name as follows: he takes the newest version of the name and replaces all the letters xi by yi, and all the letters yi by xi. This results in the new version. It is possible that some of these letters do no occur in the string. It may also happen that xi coincides with yi. The version of the name received after the work of the last designer becomes the new name of the corporation.\nManager Arkady has recently got a job in this company, but is already soaked in the spirit of teamwork and is very worried about the success of the rebranding. Naturally, he can't wait to find out what is the new name the Corporation will receive.\nSatisfy Arkady's curiosity and tell him the final version of the name.\nInput\nThe first line of the input contains two integers n and m (1 <= n, m <= 200 000) - the length of the initial name and the number of designers hired, respectively.\nThe second line consists of n lowercase English letters and represents the original name of the corporation.\nNext m lines contain the descriptions of the designers' actions: the i-th of them contains two space-separated lowercase English letters xi and yi.\nOutput\nPrint the new name of the corporation.\n", "generation": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring solve(string& s, vector<pair<char, char>>& v) {\n  string ans = \"\";\n  vector<char> used(26, 0);\n  for (int i = 0; i < v.size(); i++) {\n    used[v[i].first] = 1;\n    used[v[i].second] = 1;\n  }\n  for (int i = 0; i < s.length(); i++) {\n    if (!used[s[i]]) {\n      ans += s[i];\n    } else if (s[i] == v[i].first) {\n      ans += v[i].second;\n    } else {\n      ans += s[i];\n    }\n  }\n  return ans;\n}\n\nint main() {\n  string s;\n  cin >> s;\n  int m;\n  cin >> m;\n  vector<pair<char, char>> v(m);\n  for (int i = 0; i < m; i++) {\n    cin >> v[i].first;\n    cin >> v[i].second;\n  }\n  string ans = solve(s, v);\n  cout << ans;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp:6:25: error: \u2018vector\u2019 has not been declared\n    6 | string solve(string& s, vector<pair<char, char>>& v) {\n      |                         ^~~~~~\ntest.cpp:6:31: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018<\u2019 token\n    6 | string solve(string& s, vector<pair<char, char>>& v) {\n      |                               ^\ntest.cpp: In function \u2018std::string solve(std::string&, int)\u2019:\ntest.cpp:8:3: error: \u2018vector\u2019 was not declared in this scope\n    8 |   vector<char> used(26, 0);\n      |   ^~~~~~\ntest.cpp:2:1: note: \u2018std::vector\u2019 is defined in header \u2018<vector>\u2019; did you forget to \u2018#include <vector>\u2019?\n    1 | #include <iostream>\n  +++ |+#include <vector>\n    2 | #include <string>\ntest.cpp:8:10: error: expected primary-expression before \u2018char\u2019\n    8 |   vector<char> used(26, 0);\n      |          ^~~~\ntest.cpp:9:23: error: \u2018v\u2019 was not declared in this scope\n    9 |   for (int i = 0; i < v.size(); i++) {\n      |                       ^\ntest.cpp:10:5: error: \u2018used\u2019 was not declared in this scope\n   10 |     used[v[i].first] = 1;\n      |     ^~~~\ntest.cpp:14:10: error: \u2018used\u2019 was not declared in this scope\n   14 |     if (!used[s[i]]) {\n      |          ^~~~\ntest.cpp:16:24: error: \u2018v\u2019 was not declared in this scope\n   16 |     } else if (s[i] == v[i].first) {\n      |                        ^\ntest.cpp: In function \u2018int main()\u2019:\ntest.cpp:30:3: error: \u2018vector\u2019 was not declared in this scope\n   30 |   vector<pair<char, char>> v(m);\n      |   ^~~~~~\ntest.cpp:30:3: note: \u2018std::vector\u2019 is defined in header \u2018<vector>\u2019; did you forget to \u2018#include <vector>\u2019?\ntest.cpp:30:25: error: expected primary-expression before \u2018>\u2019 token\n   30 |   vector<pair<char, char>> v(m);\n      |                         ^~\ntest.cpp:30:28: error: \u2018v\u2019 was not declared in this scope\n   30 |   vector<pair<char, char>> v(m);\n      |                            ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/65", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool isStable(vector<int>& a) {\n  vector<int> b(a.size());\n  b[0] = a[0];\n  b[a.size() - 1] = a[a.size() - 1];\n  for (int i = 1; i < a.size() - 1; i++) {\n    vector<int> c(a.size());\n    c[0] = a[0];\n    c[a.size() - 1] = a[a.size() - 1];\n    for (int j = 1; j < a.size() - 1; j++) {\n      c[j] = median(a[j - 1], a[j], a[j + 1]);\n    }\n    if (c == b) {\n      return true;\n    }\n    b = c;\n  }\n  return false;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  vector<int> a(n);\n  cin >> a;\n\n  if (isStable(a)) {\n    cout << 2 << endl;\n    cout << a[0] << \" \" << a[n - 1] << endl;\n  } else {\n    cout << -1 << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "4\n0 0 1 1", "output": "0\n0 0 1 1"}, {"input": "5\n0 1 0 1 0", "output": "2\n0 0 0 0 0"}, {"input": "3\n1 0 0", "output": "0\n1 0 0"}, {"input": "4\n1 0 0 1", "output": "0\n1 0 0 1"}, {"input": "7\n1 0 1 1 1 0 1", "output": "1\n1 1 1 1 1 1 1"}, {"input": "14\n0 1 0 0 0 1 1 0 1 0 1 0 1 0", "output": "3\n0 0 0 0 0 1 1 1 1 1 0 0 0 0"}, {"input": "3\n1 0 1", "output": "1\n1 1 1"}, {"input": "3\n0 0 1", "output": "0\n0 0 1"}, {"input": "3\n1 1 0", "output": "0\n1 1 0"}, {"input": "3\n1 1 1", "output": "0\n1 1 1"}, {"input": "4\n1 1 0 1", "output": "1\n1 1 1 1"}, {"input": "4\n1 0 1 1", "output": "1\n1 1 1 1"}, {"input": "10\n0 1 0 1 0 0 1 0 1 0", "output": "2\n0 0 0 0 0 0 0 0 0 0"}, {"input": "4\n0 1 1 0", "output": "0\n0 1 1 0"}, {"input": "168\n0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 0 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1 0 1 0", "output": "36\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"}, {"input": "3\n0 1 1", "output": "0\n0 1 1"}, {"input": "3\n0 0 0", "output": "0\n0 0 0"}, {"input": "4\n0 1 0 1", "output": "1\n0 0 1 1"}, {"input": "3\n0 1 0", "output": "1\n0 0 0"}], "language": "cpp"}, "prompt": "C. Median Smoothing\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nA schoolboy named Vasya loves reading books on programming and mathematics. He has recently read an encyclopedia article that described the method of median smoothing (or median filter) and its many applications in science and engineering. Vasya liked the idea of the method very much, and he decided to try it in practice.\nApplying the simplest variant of median smoothing to the sequence of numbers a1, a2, ..., an will result a new sequence b1, b2, ..., bn obtained by the following algorithm:\nb1 = a1, bn = an, that is, the first and the last number of the new sequence match the corresponding numbers of the original sequence.\nFor i = 2, ..., n - 1 value bi is equal to the median of three values ai - 1, ai and ai + 1.\nThe median of a set of three numbers is the number that goes on the second place, when these three numbers are written in the non-decreasing order. For example, the median of the set 5, 1, 2 is number 2, and the median of set 1, 0, 1 is equal to 1.\nIn order to make the task easier, Vasya decided to apply the method to sequences consisting of zeros and ones only.\nHaving made the procedure once, Vasya looked at the resulting sequence and thought: what if I apply the algorithm to it once again, and then apply it to the next result, and so on? Vasya tried a couple of examples and found out that after some number of median smoothing algorithm applications the sequence can stop changing. We say that the sequence is stable, if it does not change when the median smoothing is applied to it.\nNow Vasya wonders, whether the sequence always eventually becomes stable. He asks you to write a program that, given a sequence of zeros and ones, will determine whether it ever becomes stable. Moreover, if it ever becomes stable, then you should determine what will it look like and how many times one needs to apply the median smoothing algorithm to initial sequence in order to obtain a stable one.\nInput\nThe first input line of the input contains a single integer n (3 <= n <= 500 000) - the length of the initial sequence.\nThe next line contains n integers a1, a2, ..., an (ai = 0 or ai = 1), giving the initial sequence itself.\nOutput\nIf the sequence will never become stable, print a single number  - 1.\nOtherwise, first print a single integer - the minimum number of times one needs to apply the median smoothing algorithm to the initial sequence before it becomes is stable. In the second line print n numbers separated by a space  - the resulting sequence itself.\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool isStable(vector<int>& a) {\n  vector<int> b(a.size());\n  b[0] = a[0];\n  b[a.size() - 1] = a[a.size() - 1];\n  for (int i = 1; i < a.size() - 1; i++) {\n    vector<int> c(a.size());\n    c[0] = a[0];\n    c[a.size() - 1] = a[a.size() - 1];\n    for (int j = 1; j < a.size() - 1; j++) {\n      c[j] = median(a[j - 1], a[j], a[j + 1]);\n    }\n    if (c == b) {\n      return true;\n    }\n    b = c;\n  }\n  return false;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  vector<int> a(n);\n  cin >> a;\n\n  if (isStable(a)) {\n    cout << 2 << endl;\n    cout << a[0] << \" \" << a[n - 1] << endl;\n  } else {\n    cout << -1 << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018bool isStable(std::vector<int>&)\u2019:\ntest.cpp:15:14: error: \u2018median\u2019 was not declared in this scope\n   15 |       c[j] = median(a[j - 1], a[j], a[j + 1]);\n      |              ^~~~~~\ntest.cpp: In function \u2018int main()\u2019:\ntest.cpp:29:7: error: no match for \u2018operator>>\u2019 (operand types are \u2018std::istream\u2019 {aka \u2018std::basic_istream<char>\u2019} and \u2018std::vector<int>\u2019)\n   29 |   cin >> a;\n      |   ~~~ ^~ ~\n      |   |      |\n      |   |      std::vector<int>\n      |   std::istream {aka std::basic_istream<char>}\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:120:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__istream_type& (*)(std::basic_istream<_CharT, _Traits>::__istream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:120:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__istream_type& (*)(std::basic_istream<char>::__istream_type&)\u2019 {aka \u2018std::basic_istream<char>& (*)(std::basic_istream<char>&)\u2019}\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:124:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__ios_type& (*)(std::basic_istream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>; std::basic_istream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]\u2019\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:124:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__ios_type& (*)(std::basic_istream<char>::__ios_type&)\u2019 {aka \u2018std::basic_ios<char>& (*)(std::basic_ios<char>&)\u2019}\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:131:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:131:30: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::ios_base& (*)(std::ios_base&)\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |                  ~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:168:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(bool&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  168 |       operator>>(bool& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:168:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018bool&\u2019\n  168 |       operator>>(bool& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:172:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(short int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  172 |       operator>>(short& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:172:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short int&\u2019\n  172 |       operator>>(short& __n);\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:175:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(short unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  175 |       operator>>(unsigned short& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:175:34: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short unsigned int&\u2019\n  175 |       operator>>(unsigned short& __n)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:179:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  179 |       operator>>(int& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:179:23: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018int&\u2019\n  179 |       operator>>(int& __n);\n      |                  ~~~~~^~~\n/usr/include/c++/9/istream:182:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  182 |       operator>>(unsigned int& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:182:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018unsigned int&\u2019\n  182 |       operator>>(unsigned int& __n)\n      |                  ~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:186:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  186 |       operator>>(long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:186:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long int&\u2019\n  186 |       operator>>(long& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:190:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  190 |       operator>>(unsigned long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:190:33: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long unsigned int&\u2019\n  190 |       operator>>(unsigned long& __n)\n      |                  ~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:195:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  195 |       operator>>(long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:195:29: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long int&\u2019\n  195 |       operator>>(long long& __n)\n      |                  ~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:199:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:199:38: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long unsigned int&\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |                  ~~~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:214:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(float&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  214 |       operator>>(float& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:214:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018float&\u2019\n  214 |       operator>>(float& __f)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:218:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  218 |       operator>>(double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:218:26: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018double&\u2019\n  218 |       operator>>(double& __f)\n      |                  ~~~~~~~~^~~\n/usr/include/c++/9/istream:222:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  222 |       operator>>(long double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:222:31: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long double&\u2019\n  222 |       operator>>(long double& __f)\n      |                  ~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:235:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(void*&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  235 |       operator>>(void*& __p)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:235:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018void*&\u2019\n  235 |       operator>>(void*& __p)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:259:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]\u2019\n  259 |       operator>>(__streambuf_type* __sb);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:259:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__streambuf_type*\u2019 {aka \u2018std::basic_streambuf<char>*\u2019}\n  259 |       operator>>(__streambuf_type* __sb);\n      |                  ~~~~~~~~~~~~~~~~~~^~~~\nIn file included from /usr/include/c++/9/string:56,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/ostream:38,\n                 from /usr/include/c++/9/iostream:39,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 1466 |     operator>>(basic_istream<_CharT, _Traits>& __in,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note:   template argument deduction/substitution failed:\ntest.cpp:29:10: note:   \u2018std::vector<int>\u2019 is not derived from \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\n   29 |   cin >> a;\n      |          ^\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:931:5: note: candidate: \u2018template<class _CharT, class _Traits> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT&)\u2019\n  931 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:931:5: note:   template argument deduction/substitution failed:\ntest.cpp:29:10: note:   deduced conflicting types for parameter \u2018_CharT\u2019 (\u2018char\u2019 and \u2018std::vector<int>\u2019)\n   29 |   cin >> a;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:756:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char&)\u2019\n  756 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:756:5: note:   template argument deduction/substitution failed:\ntest.cpp:29:10: note:   cannot convert \u2018a\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char&\u2019\n   29 |   cin >> a;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:761:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char&)\u2019\n  761 |     operator>>(basic_istream<char, _Traits>& __in, signed char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:761:5: note:   template argument deduction/substitution failed:\ntest.cpp:29:10: note:   cannot convert \u2018a\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char&\u2019\n   29 |   cin >> a;\n      |          ^\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:963:5: note: candidate: \u2018template<class _CharT2, class _Traits2> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT2*)\u2019\n  963 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:963:5: note:   template argument deduction/substitution failed:\ntest.cpp:29:10: note:   mismatched types \u2018_CharT2*\u2019 and \u2018std::vector<int>\u2019\n   29 |   cin >> a;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:803:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char*)\u2019\n  803 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:803:5: note:   template argument deduction/substitution failed:\ntest.cpp:29:10: note:   cannot convert \u2018a\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char*\u2019\n   29 |   cin >> a;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:808:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char*)\u2019\n  808 |     operator>>(basic_istream<char, _Traits>& __in, signed char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:808:5: note:   template argument deduction/substitution failed:\ntest.cpp:29:10: note:   cannot convert \u2018a\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char*\u2019\n   29 |   cin >> a;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:980:5: note: candidate: \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&)\u2019\n  980 |     operator>>(_Istream&& __is, _Tp&& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:980:5: note:   template argument deduction/substitution failed:\n/usr/include/c++/9/istream: In substitution of \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&) [with _Istream = std::basic_istream<char>&; _Tp = std::vector<int>&]\u2019:\ntest.cpp:29:10:   required from here\n/usr/include/c++/9/istream:980:5: error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false, std::basic_istream<char>&>\u2019\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/66", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n\nusing namespace std;\n\nint main()\n{\n    int l, p, q;\n    cin >> l;\n    cin >> p;\n    cin >> q;\n\n    double d = 2 * l * (p + q) / (p - q);\n\n    printf(\"%.12lf\", d);\n\n    return 0;\n}\n", "testcases": [{"input": "100\n50\n50", "output": "50"}, {"input": "199\n60\n40", "output": "119.4"}, {"input": "1\n1\n1", "output": "0.5"}, {"input": "1\n500\n500", "output": "0.5"}, {"input": "1000\n1\n1", "output": "500"}, {"input": "1000\n500\n500", "output": "500"}, {"input": "987\n1\n3", "output": "246.75"}, {"input": "600\n221\n279", "output": "265.2"}], "language": "cpp"}, "prompt": "A. Wizards' Duel\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nHarry Potter and He-Who-Must-Not-Be-Named engaged in a fight to the death once again. This time they are located at opposite ends of the corridor of length l. Two opponents simultaneously charge a deadly spell in the enemy. We know that the impulse of Harry's magic spell flies at a speed of p meters per second, and the impulse of You-Know-Who's magic spell flies at a speed of q meters per second.\nThe impulses are moving through the corridor toward each other, and at the time of the collision they turn round and fly back to those who cast them without changing their original speeds. Then, as soon as the impulse gets back to it's caster, the wizard reflects it and sends again towards the enemy, without changing the original speed of the impulse.\nSince Harry has perfectly mastered the basics of magic, he knows that after the second collision both impulses will disappear, and a powerful explosion will occur exactly in the place of their collision. However, the young wizard isn't good at math, so he asks you to calculate the distance from his position to the place of the second meeting of the spell impulses, provided that the opponents do not change positions during the whole fight.\nInput\nThe first line of the input contains a single integer l (1 <= l <= 1 000) - the length of the corridor where the fight takes place.\nThe second line contains integer p, the third line contains integer q (1 <= p, q <= 500) - the speeds of magical impulses for Harry Potter and He-Who-Must-Not-Be-Named, respectively.\nOutput\nPrint a single real number - the distance from the end of the corridor, where Harry is located, to the place of the second meeting of the spell impulses. Your answer will be considered correct if its absolute or relative error will not exceed 10 - 4.\nNamely: let's assume that your answer equals a, and the answer of the jury is b. The checker program will consider your answer correct if .\n", "generation": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n\nusing namespace std;\n\nint main()\n{\n    int l, p, q;\n    cin >> l;\n    cin >> p;\n    cin >> q;\n\n    double d = 2 * l * (p + q) / (p - q);\n\n    printf(\"%.12lf\", d);\n\n    return 0;\n}\n", "result": "failed: runtime error: None", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/68", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> graph[123456];\nvector<int> distance(int n, int x) {\n  vector<int> d(n, INT_MAX);\n  d[x] = 0;\n  vector<int> q(n);\n  q.push_back(x);\n  int i = 0;\n  while (!q.empty()) {\n    int current = q[i++];\n    for (int neighbor : graph[current]) {\n      if (d[neighbor] == INT_MAX) {\n        d[neighbor] = d[current] + 1;\n        q.push_back(neighbor);\n      }\n    }\n  }\n  return d;\n}\n\nint main() {\n  int n, m;\n  cin >> n;\n  cin >> m;\n\n  for (int i = 0; i < n - 1; i++) {\n    int u, v;\n    cin >> u;\n    cin >> v;\n    graph[u].push_back(v);\n    graph[v].push_back(u);\n  }\n\n  vector<int> attackedCities;\n  for (int i = 0; i < m; i++) {\n    int city;\n    cin >> city;\n    attackedCities.push_back(city);\n  }\n\n  vector<int> d = distance(n, attackedCities[0]);\n  int minTime = INT_MAX;\n  for (int i = 0; i < m; i++) {\n    minTime = min(minTime, d[attackedCities[i]] + 1);\n  }\n\n  cout << attackededCities.size() << endl;\n  cout << minTime << endl;\n\n  return 0;\n}\n", "testcases": [{"input": "7 2\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n2 7", "output": "2\n3"}, {"input": "6 4\n1 2\n2 3\n2 4\n4 5\n4 6\n2 4 5 6", "output": "2\n4"}, {"input": "2 1\n2 1\n1", "output": "1\n0"}, {"input": "1 1\n1", "output": "1\n0"}, {"input": "10 2\n6 9\n6 2\n1 6\n4 10\n3 7\n9 4\n9 5\n6 7\n2 8\n7 6", "output": "6\n1"}, {"input": "15 2\n7 12\n13 11\n6 8\n2 15\n10 9\n5 1\n13 5\n5 4\n14 3\n8 9\n8 4\n4 7\n12 14\n5 2\n7 4", "output": "4\n1"}, {"input": "20 2\n1 16\n12 5\n15 19\n18 9\n8 4\n10 16\n9 16\n20 15\n14 19\n7 4\n18 12\n17 12\n2 20\n6 14\n3 19\n7 19\n18 15\n19 13\n9 11\n12 18", "output": "12\n1"}, {"input": "4 2\n4 3\n3 1\n1 2\n3 4", "output": "3\n1"}, {"input": "8 5\n2 5\n1 8\n6 7\n3 4\n6 8\n8 5\n5 3\n1 6 7 3 8", "output": "3\n6"}, {"input": "16 8\n16 12\n16 15\n15 9\n15 13\n16 3\n15 2\n15 10\n1 2\n6 16\n5 15\n2 7\n15 4\n14 15\n11 16\n8 5\n5 10 14 6 8 3 1 9", "output": "1\n16"}, {"input": "32 28\n30 12\n30 27\n24 32\n6 13\n11 5\n4 30\n8 28\n9 20\n8 20\n7 20\n5 30\n18 5\n20 14\n23 20\n17 20\n8 26\n20 1\n15 2\n20 13\n24 20\n22 24\n25 16\n2 3\n19 5\n16 10\n31 2\n29 5\n20 16\n2 20\n5 21\n5 20\n32 11 6 12 22 30 23 21 14 13 1 20 7 25 9 29 10 27 5 19 24 31 15 26 8 3 28 17", "output": "3\n53"}, {"input": "10 3\n10 5\n3 2\n6 8\n1 5\n10 4\n6 1\n9 8\n2 9\n7 3\n3 9 1", "output": "1\n5"}, {"input": "7 5\n6 4\n5 6\n6 7\n2 3\n5 2\n2 1\n4 6 1 7 3", "output": "1\n8"}, {"input": "15 7\n5 4\n12 5\n7 13\n10 11\n3 8\n6 12\n3 15\n1 3\n5 14\n7 9\n1 10\n6 1\n12 7\n10 2\n4 10 8 13 1 7 9", "output": "4\n14"}, {"input": "31 16\n3 25\n8 1\n1 9\n1 23\n16 15\n10 6\n25 30\n20 29\n2 24\n3 7\n19 22\n2 12\n16 4\n7 26\n31 10\n17 13\n25 21\n7 18\n28 2\n6 27\n19 5\n13 3\n17 31\n10 16\n20 14\n8 19\n6 11\n28 20\n13 28\n31 8\n31 27 25 20 26 8 28 15 18 17 10 23 4 16 30 22", "output": "4\n34"}, {"input": "63 20\n35 26\n54 5\n32 56\n56 53\n59 46\n37 31\n46 8\n4 1\n2 47\n59 42\n55 11\n62 6\n30 7\n60 24\n41 36\n34 22\n24 34\n21 2\n12 52\n8 44\n60 21\n24 30\n48 35\n48 25\n32 57\n20 37\n11 54\n11 62\n42 58\n31 43\n12 23\n55 48\n51 55\n41 27\n25 33\n21 18\n42 12\n4 15\n51 60\n62 39\n46 41\n57 9\n30 61\n31 4\n58 13\n34 29\n37 32\n18 16\n57 45\n2 49\n40 51\n43 17\n40 20\n20 59\n8 19\n58 10\n43 63\n54 50\n18 14\n25 38\n56 28\n35 3\n41 36 18 28 54 22 20 6 23 38 33 52 48 44 29 56 63 4 27 50", "output": "6\n66"}, {"input": "4 2\n2 3\n2 1\n2 4\n3 4", "output": "3\n2"}, {"input": "13 11\n4 11\n2 7\n4 13\n8 12\n8 9\n8 6\n3 8\n4 1\n2 10\n2 5\n3 4\n3 2\n10 4 5 6 1 2 3 9 13 7 12", "output": "1\n18"}, {"input": "7 5\n1 5\n4 1\n1 3\n7 1\n1 6\n1 2\n2 4 1 3 7", "output": "2\n6"}, {"input": "12 9\n11 12\n1 10\n1 7\n5 6\n8 7\n9 8\n4 5\n1 4\n2 3\n1 2\n10 11\n4 9 11 3 5 12 8 6 7", "output": "6\n16"}, {"input": "56 34\n7 31\n47 6\n13 4\n51 29\n13 12\n10 52\n10 41\n1 47\n47 54\n9 1\n4 27\n4 40\n49 19\n21 26\n24 33\n56 49\n41 56\n7 23\n41 48\n16 34\n35 9\n56 51\n5 43\n44 46\n10 25\n49 2\n1 21\n9 32\n33 20\n16 5\n5 35\n55 50\n55 53\n37 44\n43 15\n4 55\n8 10\n8 24\n21 42\n37 8\n39 13\n49 38\n39 16\n50 3\n55 7\n51 45\n21 11\n51 28\n50 18\n50 30\n5 37\n7 17\n35 22\n47 36\n35 14\n3 38 47 22 34 10 54 50 9 52 36 1 21 29 28 6 13 39 4 40 53 51 35 55 45 18 44 20 42 31 11 46 41 12", "output": "3\n70"}, {"input": "26 22\n20 16\n2 7\n7 19\n5 9\n20 23\n22 18\n24 3\n8 22\n16 10\n5 2\n7 15\n22 14\n25 4\n25 11\n24 13\n8 24\n13 1\n20 8\n22 6\n7 26\n16 12\n16 5\n13 21\n25 17\n2 25\n16 4 7 24 10 12 2 23 20 1 26 14 8 9 3 6 21 13 11 18 22 17", "output": "1\n37"}, {"input": "43 13\n7 28\n17 27\n39 8\n21 3\n17 20\n17 2\n9 6\n35 23\n43 22\n7 41\n5 24\n26 11\n21 43\n41 17\n16 5\n25 15\n39 10\n18 7\n37 33\n39 13\n39 16\n10 12\n1 21\n2 25\n14 36\n12 7\n16 34\n24 4\n25 40\n5 29\n37 31\n3 32\n22 14\n16 35\n5 37\n10 38\n25 19\n9 1\n26 42\n43 26\n10 30\n33 9\n28 6 42 38 27 32 8 11 36 7 41 29 19", "output": "19\n41"}, {"input": "21 20\n16 9\n7 11\n4 12\n2 17\n17 7\n5 2\n2 8\n4 10\n8 19\n6 15\n2 6\n12 18\n16 5\n20 16\n6 14\n5 3\n5 21\n20 1\n17 13\n6 4\n6 4 18 11 14 1 19 15 10 8 9 17 16 3 20 13 2 5 12 21", "output": "1\n32"}, {"input": "29 6\n16 9\n20 13\n24 3\n24 28\n22 12\n10 11\n10 26\n22 4\n10 27\n5 1\n2 23\n23 5\n16 7\n8 24\n7 19\n19 17\n8 10\n20 16\n20 25\n24 20\n23 15\n22 29\n2 8\n7 22\n2 21\n23 14\n19 18\n19 6\n19 17 18 27 29 4", "output": "4\n16"}, {"input": "31 29\n10 14\n16 6\n23 22\n25 23\n2 27\n24 17\n20 8\n5 2\n8 24\n16 5\n10 26\n8 7\n5 29\n20 16\n13 9\n13 21\n24 30\n13 1\n10 15\n23 3\n25 10\n2 25\n20 13\n25 11\n8 12\n30 28\n20 18\n5 4\n23 19\n16 31\n13 14 3 30 5 6 26 22 25 1 23 7 31 12 16 28 17 2 8 18 24 4 20 21 15 11 9 29 10", "output": "3\n46"}, {"input": "54 8\n33 9\n39 36\n22 14\n24 13\n8 50\n34 52\n47 2\n35 44\n16 54\n34 25\n1 3\n39 11\n9 17\n43 19\n10 40\n47 38\n5 37\n21 47\n37 12\n16 6\n37 7\n32 26\n39 42\n44 10\n1 18\n37 8\n9 1\n8 24\n10 33\n33 53\n5 4\n21 30\n9 31\n24 28\n24 49\n16 5\n34 35\n21 48\n47 43\n13 34\n39 16\n10 27\n22 32\n43 22\n13 46\n33 23\n44 15\n1 21\n8 41\n43 45\n5 29\n35 20\n13 51\n40 50 33 14 48 25 44 9", "output": "14\n21"}, {"input": "17 12\n5 2\n4 3\n8 17\n2 4\n2 8\n17 12\n8 10\n6 11\n16 7\n4 14\n15 13\n6 9\n4 6\n15 16\n16 5\n9 1\n4 8 1 9 3 12 15 10 13 6 14 16", "output": "1\n20"}, {"input": "28 6\n25 21\n9 18\n25 1\n16 5\n9 11\n28 19\n5 2\n20 16\n20 13\n2 23\n5 25\n8 24\n14 27\n3 15\n24 28\n8 10\n22 14\n14 17\n13 9\n3 22\n22 26\n16 7\n2 8\n25 3\n3 12\n14 4\n9 6\n28 27 22 24 20 16", "output": "27\n13"}, {"input": "10 9\n3 9\n4 8\n10 1\n2 3\n5 6\n4 3\n1 2\n5 4\n6 7\n9 1 5 8 7 3 4 6 10", "output": "7\n11"}, {"input": "9 6\n1 6\n3 4\n9 7\n3 2\n8 7\n2 1\n6 7\n3 5\n2 5 1 6 3 9", "output": "5\n6"}, {"input": "19 11\n8 9\n10 13\n16 15\n6 4\n3 2\n17 16\n4 7\n1 14\n10 11\n15 14\n4 3\n10 12\n4 5\n2 1\n16 19\n8 1\n10 9\n18 16\n10 14 18 12 17 11 19 8 1 3 9", "output": "11\n18"}, {"input": "36 5\n36 33\n11 12\n14 12\n25 24\n27 26\n23 24\n20 19\n1 2\n3 2\n17 18\n33 34\n23 1\n32 31\n12 15\n25 26\n4 5\n5 8\n5 6\n26 29\n1 9\n35 33\n33 32\n16 1\n3 4\n31 30\n16 17\n19 21\n1 30\n7 5\n9 10\n13 12\n19 18\n10 11\n22 19\n28 26\n29 12 11 17 33", "output": "12\n21"}, {"input": "10 2\n5 1\n1 3\n3 4\n4 2\n5 10\n1 9\n3 8\n4 7\n2 6\n3 4", "output": "3\n1"}, {"input": "53 30\n41 42\n27 24\n13 11\n10 11\n32 33\n34 33\n37 40\n21 22\n21 20\n46 47\n2 1\n31 30\n29 30\n11 14\n42 43\n50 51\n34 35\n36 35\n24 23\n48 47\n41 1\n28 29\n45 44\n16 15\n5 4\n6 5\n18 19\n9 8\n37 38\n11 12\n39 37\n49 48\n50 49\n43 44\n50 53\n3 4\n50 52\n24 25\n7 6\n46 45\n2 3\n17 18\n31 32\n19 20\n7 8\n15 1\n36 37\n23 22\n9 10\n17 16\n24 26\n28 1\n38 52 41 35 53 43 3 29 36 4 23 20 46 5 40 30 49 25 16 48 17 27 21 9 45 44 15 13 14 2", "output": "13\n74"}, {"input": "10 4\n2 3\n4 2\n8 9\n6 5\n8 1\n5 1\n8 10\n7 5\n1 2\n4 10 2 5", "output": "4\n6"}, {"input": "10 5\n4 5\n9 1\n1 2\n7 1\n5 1\n10 1\n7 3\n6 3\n5 8\n5 2 7 10 1", "output": "2\n6"}, {"input": "10 4\n8 7\n7 6\n1 2\n3 2\n3 4\n6 5\n10 7\n7 9\n5 4\n9 5 10 4", "output": "4\n6"}, {"input": "5 4\n2 3\n2 1\n3 5\n4 3\n4 2 5 1", "output": "1\n5"}, {"input": "5 1\n1 2\n2 3\n3 4\n4 5\n4", "output": "4\n0"}], "language": "cpp"}, "prompt": "D. Super M\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nAri the monster is not an ordinary monster. She is the hidden identity of Super M, the Byteforces' superhero. Byteforces is a country that consists of n cities, connected by n - 1 bidirectional roads. Every road connects exactly two distinct cities, and the whole road system is designed in a way that one is able to go from any city to any other city using only the given roads. There are m cities being attacked by humans. So Ari... we meant Super M have to immediately go to each of the cities being attacked to scare those bad humans. Super M can pass from one city to another only using the given roads. Moreover, passing through one road takes her exactly one kron - the time unit used in Byteforces.\nHowever, Super M is not on Byteforces now - she is attending a training camp located in a nearby country Codeforces. Fortunately, there is a special device in Codeforces that allows her to instantly teleport from Codeforces to any city of Byteforces. The way back is too long, so for the purpose of this problem teleportation is used exactly once.\nYou are to help Super M, by calculating the city in which she should teleport at the beginning in order to end her job in the minimum time (measured in krons). Also, provide her with this time so she can plan her way back to Codeforces.\nInput\nThe first line of the input contains two integers n and m (1 <= m <= n <= 123456) - the number of cities in Byteforces, and the number of cities being attacked respectively.\nThen follow n - 1 lines, describing the road system. Each line contains two city numbers ui and vi (1 <= ui, vi <= n) - the ends of the road i.\nThe last line contains m distinct integers - numbers of cities being attacked. These numbers are given in no particular order.\nOutput\nFirst print the number of the city Super M should teleport to. If there are many possible optimal answers, print the one with the lowest city number.\nThen print the minimum possible time needed to scare all humans in cities being attacked, measured in Krons.\nNote that the correct answer is always unique.\n", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> graph[123456];\nvector<int> distance(int n, int x) {\n  vector<int> d(n, INT_MAX);\n  d[x] = 0;\n  vector<int> q(n);\n  q.push_back(x);\n  int i = 0;\n  while (!q.empty()) {\n    int current = q[i++];\n    for (int neighbor : graph[current]) {\n      if (d[neighbor] == INT_MAX) {\n        d[neighbor] = d[current] + 1;\n        q.push_back(neighbor);\n      }\n    }\n  }\n  return d;\n}\n\nint main() {\n  int n, m;\n  cin >> n;\n  cin >> m;\n\n  for (int i = 0; i < n - 1; i++) {\n    int u, v;\n    cin >> u;\n    cin >> v;\n    graph[u].push_back(v);\n    graph[v].push_back(u);\n  }\n\n  vector<int> attackedCities;\n  for (int i = 0; i < m; i++) {\n    int city;\n    cin >> city;\n    attackedCities.push_back(city);\n  }\n\n  vector<int> d = distance(n, attackedCities[0]);\n  int minTime = INT_MAX;\n  for (int i = 0; i < m; i++) {\n    minTime = min(minTime, d[attackedCities[i]] + 1);\n  }\n\n  cout << attackededCities.size() << endl;\n  cout << minTime << endl;\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018std::vector<int> distance(int, int)\u2019:\ntest.cpp:9:20: error: \u2018INT_MAX\u2019 was not declared in this scope\n    9 |   vector<int> d(n, INT_MAX);\n      |                    ^~~~~~~\ntest.cpp:4:1: note: \u2018INT_MAX\u2019 is defined in header \u2018<climits>\u2019; did you forget to \u2018#include <climits>\u2019?\n    3 | #include <algorithm>\n  +++ |+#include <climits>\n    4 | \ntest.cpp: In function \u2018int main()\u2019:\ntest.cpp:47:17: error: \u2018INT_MAX\u2019 was not declared in this scope\n   47 |   int minTime = INT_MAX;\n      |                 ^~~~~~~\ntest.cpp:47:17: note: \u2018INT_MAX\u2019 is defined in header \u2018<climits>\u2019; did you forget to \u2018#include <climits>\u2019?\ntest.cpp:52:11: error: \u2018attackededCities\u2019 was not declared in this scope; did you mean \u2018attackedCities\u2019?\n   52 |   cout << attackededCities.size() << endl;\n      |           ^~~~~~~~~~~~~~~~\n      |           attackedCities\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/69", "completion_id": 0, "test_suite": {"code": "int main() {\n  int n;\n  cin >> n;\n\n  int jumps = 0;\n  switch (n) {\n    case 3:\n      jumps = 2;\n      break;\n    case 4:\n      jumps = 3;\n      break;\n    default:\n      jumps = n - 1;\n  }\n\n  cout << jumps;\n  return 0;\n}\n", "testcases": [{"input": "5", "output": "9"}, {"input": "3", "output": "1"}, {"input": "54321", "output": "2950553761"}, {"input": "4", "output": "4"}, {"input": "6", "output": "16"}, {"input": "7", "output": "25"}, {"input": "8", "output": "36"}, {"input": "9", "output": "49"}, {"input": "10", "output": "64"}, {"input": "54320", "output": "2950445124"}, {"input": "54319", "output": "2950336489"}, {"input": "54318", "output": "2950227856"}, {"input": "54317", "output": "2950119225"}, {"input": "54316", "output": "2950010596"}, {"input": "54315", "output": "2949901969"}, {"input": "54314", "output": "2949793344"}, {"input": "8153", "output": "66438801"}, {"input": "51689", "output": "2671545969"}, {"input": "16659", "output": "277455649"}, {"input": "47389", "output": "2245527769"}, {"input": "314", "output": "97344"}, {"input": "23481", "output": "551263441"}, {"input": "20380", "output": "415262884"}, {"input": "1994", "output": "3968064"}], "language": "cpp"}, "prompt": "B. The Monster and the Squirrel\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nAri the monster always wakes up very early with the first ray of the sun and the first thing she does is feeding her squirrel.\nAri draws a regular convex polygon on the floor and numbers it's vertices 1, 2, ..., n in clockwise order. Then starting from the vertex 1 she draws a ray in the direction of each other vertex. The ray stops when it reaches a vertex or intersects with another ray drawn before. Ari repeats this process for vertex 2, 3, ..., n (in this particular order). And then she puts a walnut in each region inside the polygon.\nAda the squirrel wants to collect all the walnuts, but she is not allowed to step on the lines drawn by Ari. That means Ada have to perform a small jump if she wants to go from one region to another. Ada can jump from one region P to another region Q if and only if P and Q share a side or a corner.\nAssuming that Ada starts from outside of the picture, what is the minimum number of jumps she has to perform in order to collect all the walnuts?\nInput\nThe first and only line of the input contains a single integer n (3 <= n <= 54321) - the number of vertices of the regular polygon drawn by Ari.\nOutput\nPrint the minimum number of jumps Ada should make to collect all the walnuts. Note, that she doesn't need to leave the polygon after.\n", "generation": "int main() {\n  int n;\n  cin >> n;\n\n  int jumps = 0;\n  switch (n) {\n    case 3:\n      jumps = 2;\n      break;\n    case 4:\n      jumps = 3;\n      break;\n    default:\n      jumps = n - 1;\n  }\n\n  cout << jumps;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> n;\n      |   ^~~\ntest.cpp:17:3: error: \u2018cout\u2019 was not declared in this scope\n   17 |   cout << jumps;\n      |   ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/70", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool is_valid(int r, int c) {\n  return r >= 1 && r <= 8 && c >= 1 && c <= 8;\n}\n\nbool move_valid(int r, int c, vector<vector<char>>& board) {\n  return is_valid(r - 1, c) && board[r - 1][c] == '.' && board[r][c] == 'W';\n}\n\nbool move_valid_b(int r, int c, vector<vector<char>>& board) {\n  return is_valid(r + 1, c) && board[r + 1][c] == '.' && board[r][c] == 'B';\n}\n\nint main() {\n  vector<vector<char>> board(8, vector<char>(8, '.'));\n  cin >> board;\n\n  bool is_a_win = false;\n  for (int r = 0; r < 8; r++) {\n    for (int c = 0; c < 8; c++) {\n      if (board[r][c] == 'W' && move_valid(r, c, board)) {\n        board[r][c] = '.';\n        is_a_win = true;\n        break;\n      }\n    }\n  }\n\n  if (is_a_win) {\n    cout << \"A\";\n  } else {\n    cout << \"B\";\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "........\n........\n.B....B.\n....W...\n........\n..W.....\n........\n........", "output": "A"}, {"input": "..B.....\n..W.....\n......B.\n........\n.....W..\n......B.\n........\n........", "output": "B"}, {"input": ".BB.B.B.\nB..B..B.\n.B.BB...\nBB.....B\nBBB....B\nB..BB...\nBB.B...B\n....WWW.", "output": "B"}, {"input": "..BB....\n........\nWW.W..WW\nW...W...\n.W...W..\n.W..W.WW\nW.....WW\nWW......", "output": "A"}, {"input": "BB....B.\nB.....B.\n.....B..\n..B...BB\n.W.BWBWB\n....W...\nWW.WWW..\n....W...", "output": "B"}, {"input": "B.B.BB.B\nW.WWW.WW\n.WWWWW.W\nW.BB.WBW\n.W..BBWB\nBB.WWBBB\n.W.W.WWB\nWWW..WW.", "output": "A"}, {"input": "BB..BB..\nBW.W.W.B\n..B.....\n.....BB.\n.B..B..B\n........\n...BB.B.\nW.WWWW.W", "output": "A"}, {"input": "BB......\nW....BBW\n........\n.B.B.BBB\n....BB..\nB....BB.\n...WWWW.\n....WW..", "output": "A"}, {"input": ".B.B..B.\nB.B....B\n...B.B.B\n..B.W..B\n.BBB.B.B\nB.BB.B.B\nBB..BBBB\nW.W.W.WW", "output": "B"}, {"input": "..BB....\n.B.B.B.B\n..B.B...\n..B..B.B\nWWWBWWB.\n.BB...B.\n..BBB...\n......W.", "output": "B"}, {"input": "..BB....\n.WBWBWBB\n.....BBB\n..WW....\n.W.W...W\nWWW...W.\n.W....W.\nW...W.W.", "output": "A"}, {"input": "B...BB..\nWWBBW.BB\n.W.W....\nWWWW....\nW....W..\nW..WW...\n...W....\nWW.W....", "output": "A"}, {"input": "B..BB..B\n..B.B...\nBW..BBW.\n...B.BBB\n.B..BB..\n..B.B.BB\n........\n........", "output": "A"}, {"input": "....BB..\nBB......\n.B.....B\nWW..WWW.\n...BB.B.\nB...BB..\n..W..WWW\n...W...W", "output": "B"}, {"input": "B...BBBB\n...BBB..\nBBWBWW.W\n.B..BB.B\nW..W..WW\nW.WW....\n........\nWW.....W", "output": "A"}, {"input": ".BB..B..\n.B.....B\n.B......\n.B...B..\n.......B\n.WWB.WWB\nW.....W.\n...W....", "output": "B"}, {"input": ".B......\n.B....B.\n...W....\n......W.\nW.WWWW.W\nW.WW....\n..WWW...\n..W...WW", "output": "A"}, {"input": "B.......\nBBB.....\n.B....B.\n.W.BWB.W\n......B.\nW..WW...\n...W....\nW...W..W", "output": "A"}, {"input": ".B......\n.B...B.B\n.B..B.BB\nW.......\n..W.....\n..WWW...\n.......W\n........", "output": "A"}, {"input": ".....B..\n........\n........\n.BB..B..\n..BB....\n........\n....WWW.\n......W.", "output": "B"}, {"input": "B.B...B.\n...BBBBB\n....B...\n...B...B\nB.B.B..B\n........\n........\nWWW..WW.", "output": "B"}, {"input": "B.B...B.\n........\n.......B\n.BB....B\n.....W..\n.W.WW.W.\n...W.WW.\nW..WW..W", "output": "A"}, {"input": "......B.\nB....B..\n...B.BB.\n...B....\n........\n..W....W\nWW......\n.W....W.", "output": "B"}, {"input": ".BBB....\nB.B.B...\nB.BB.B..\nB.BB.B.B\n........\n........\nW.....W.\n..WW..W.", "output": "B"}, {"input": "..B..BBB\n........\n........\n........\n...W.W..\n...W..W.\nW.......\n..W...W.", "output": "A"}, {"input": "........\n.B.B....\n...B..BB\n........\n........\nW...W...\nW...W...\nW.WW.W..", "output": "A"}, {"input": "...B..BB\n.B..B..B\n........\n........\n........\nW..W....\n.....WW.\n.W......", "output": "A"}, {"input": "B....BB.\n...B...B\n.B......\n........\n........\n........\n........\n....W..W", "output": "B"}, {"input": "...BB.BB\nBB...B..\n........\n........\n........\n........\n..W..W..\n......W.", "output": "A"}, {"input": "...BB...\n........\n........\n........\n........\n........\n......W.\nWW...WW.", "output": "A"}, {"input": "...B.B..\n........\n........\n........\n........\n........\n........\nWWW...WW", "output": "A"}, {"input": "BBBBBBB.\n........\n........\n........\n........\n........\n........\n.WWWWWWW", "output": "A"}, {"input": ".BBBBBB.\nB.......\n........\n........\n........\n........\n........\n.WWWWWWW", "output": "B"}, {"input": ".BBBBBBB\n........\n........\n........\n........\n........\n........\nWWWWWWW.", "output": "A"}, {"input": ".BBBBBB.\n.......B\n........\n........\n........\n........\n........\nWWWWWWW.", "output": "B"}, {"input": "B..BB...\n..B...B.\n.WBB...B\nBW......\nW.B...W.\n..BBW.B.\nBW..BB..\n......W.", "output": "B"}, {"input": "BBB.BBBB\nWB.W..B.\nBBBB...B\nB..B....\n.......W\n.BWB..BB\nB..BW.BW\n.W......", "output": "A"}, {"input": "B.BBBBBB\nB..BBB.B\nW.BB.W.B\nB.BWBB.B\nBWBWBBBB\n...BBBBB\nB.B...BB\nWW..WW.W", "output": "B"}, {"input": "BBBB.BBB\nBBBB.B.B\nB.B..BBB\nB.BB.BWW\nB.BB.BBB\nB.BB.BBB\n..BW.BB.\nW.WWWWWW", "output": "B"}, {"input": "BBBB.BBB\n.B....WB\nBB.B...B\nWWWW.WWB\nBB...BWW\nWWW..BBB\nW.BW.BB.\nWWWWWWW.", "output": "B"}, {"input": "B.BBBBBB\nW.WWBBBW\nW.BB.WBB\nW.W.BBBW\nW.BWW.WB\nB..B..BB\nB.B.W.BB\nWWWWW.WW", "output": "B"}, {"input": "BBBBBB.B\n.BBWBB.B\nWWW..B.W\n..WW.W.W\nBWB..W.W\n..BW.B.W\nB..B....\nWWWW.WWW", "output": "B"}, {"input": ".B...BB.\nWBB.BWBB\n.BWBW...\n..W...B.\nWB.BWW..\nWBW.....\n.W..W.B.\n.W.W.WW.", "output": "A"}, {"input": ".B..BBBB\nBB...WWB\nB..B.W.B\nWB.W...B\n...W.WW.\nW.....W.\nWB.W.W.W\n.WW...WW", "output": "A"}, {"input": "B.BBBBBB\nW.BB.W.B\nW.BBW...\n..WWWW.B\n....W..B\n.WW.W..W\n.W..WW.W\nW.W....W", "output": "A"}, {"input": "........\n.......W\n........\n........\n........\n........\n.......B\n........", "output": "A"}, {"input": "..B.....\n..W.....\n.W....B.\n........\n.B...W..\n......B.\n.W......\n........", "output": "A"}, {"input": "........\nB.......\n........\n........\n........\n........\n.......W\n........", "output": "A"}, {"input": "........\n........\n........\n.W......\n......B.\n........\n........\n........", "output": "A"}, {"input": "........\nB.......\nW.......\n.......B\n........\n........\n........\n...W....", "output": "B"}, {"input": "........\n.B......\n.W......\n........\n....B...\n........\n........\n.......W", "output": "B"}, {"input": "........\n..B.....\n..W...B.\n........\n.....W..\n......B.\n........\n........", "output": "B"}, {"input": "........\nW.......\n........\n........\n........\n........\n.......B\n........", "output": "A"}, {"input": "........\n........\n........\n........\nW.......\nB.......\n........\n........", "output": "B"}, {"input": "........\n........\n.W......\n........\n........\n........\n.B......\n........", "output": "B"}, {"input": "........\nB.......\nW.......\n.W......\n........\nB.......\n........\n........", "output": "B"}], "language": "cpp"}, "prompt": "A. PawnChess\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nGalois is one of the strongest chess players of Byteforces. He has even invented a new variant of chess, which he named <<PawnChess>>.\nThis new game is played on a board consisting of 8 rows and 8 columns. At the beginning of every game some black and white pawns are placed on the board. The number of black pawns placed is not necessarily equal to the number of white pawns placed.\nLets enumerate rows and columns with integers from 1 to 8. Rows are numbered from top to bottom, while columns are numbered from left to right. Now we denote as (r, c) the cell located at the row r and at the column c.\nThere are always two players A and B playing the game. Player A plays with white pawns, while player B plays with black ones. The goal of player A is to put any of his pawns to the row 1, while player B tries to put any of his pawns to the row 8. As soon as any of the players completes his goal the game finishes immediately and the succeeded player is declared a winner.\nPlayer A moves first and then they alternate turns. On his move player A must choose exactly one white pawn and move it one step upward and player B (at his turn) must choose exactly one black pawn and move it one step down. Any move is possible only if the targeted cell is empty. It's guaranteed that for any scenario of the game there will always be at least one move available for any of the players.\nMoving upward means that the pawn located in (r, c) will go to the cell (r - 1, c), while moving down means the pawn located in (r, c) will go to the cell (r + 1, c). Again, the corresponding cell must be empty, i.e. not occupied by any other pawn of any color.\nGiven the initial disposition of the board, determine who wins the game if both players play optimally. Note that there will always be a winner due to the restriction that for any game scenario both players will have some moves available.\nInput\nThe input consists of the board description given in eight lines, each line contains eight characters. Character 'B' is used to denote a black pawn, and character 'W' represents a white pawn. Empty cell is marked with '.'.\nIt's guaranteed that there will not be white pawns on the first row neither black pawns on the last row.\nOutput\nPrint 'A' if player A wins the game on the given board, and 'B' if player B will claim the victory. Again, it's guaranteed that there will always be a winner on the given board.\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool is_valid(int r, int c) {\n  return r >= 1 && r <= 8 && c >= 1 && c <= 8;\n}\n\nbool move_valid(int r, int c, vector<vector<char>>& board) {\n  return is_valid(r - 1, c) && board[r - 1][c] == '.' && board[r][c] == 'W';\n}\n\nbool move_valid_b(int r, int c, vector<vector<char>>& board) {\n  return is_valid(r + 1, c) && board[r + 1][c] == '.' && board[r][c] == 'B';\n}\n\nint main() {\n  vector<vector<char>> board(8, vector<char>(8, '.'));\n  cin >> board;\n\n  bool is_a_win = false;\n  for (int r = 0; r < 8; r++) {\n    for (int c = 0; c < 8; c++) {\n      if (board[r][c] == 'W' && move_valid(r, c, board)) {\n        board[r][c] = '.';\n        is_a_win = true;\n        break;\n      }\n    }\n  }\n\n  if (is_a_win) {\n    cout << \"A\";\n  } else {\n    cout << \"B\";\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:20:7: error: no match for \u2018operator>>\u2019 (operand types are \u2018std::istream\u2019 {aka \u2018std::basic_istream<char>\u2019} and \u2018std::vector<std::vector<char> >\u2019)\n   20 |   cin >> board;\n      |   ~~~ ^~ ~~~~~\n      |   |      |\n      |   |      std::vector<std::vector<char> >\n      |   std::istream {aka std::basic_istream<char>}\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:120:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__istream_type& (*)(std::basic_istream<_CharT, _Traits>::__istream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:120:36: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018std::basic_istream<char>::__istream_type& (*)(std::basic_istream<char>::__istream_type&)\u2019 {aka \u2018std::basic_istream<char>& (*)(std::basic_istream<char>&)\u2019}\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:124:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__ios_type& (*)(std::basic_istream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>; std::basic_istream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]\u2019\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:124:32: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018std::basic_istream<char>::__ios_type& (*)(std::basic_istream<char>::__ios_type&)\u2019 {aka \u2018std::basic_ios<char>& (*)(std::basic_ios<char>&)\u2019}\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:131:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:131:30: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018std::ios_base& (*)(std::ios_base&)\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |                  ~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:168:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(bool&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  168 |       operator>>(bool& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:168:24: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018bool&\u2019\n  168 |       operator>>(bool& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:172:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(short int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  172 |       operator>>(short& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:172:25: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018short int&\u2019\n  172 |       operator>>(short& __n);\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:175:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(short unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  175 |       operator>>(unsigned short& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:175:34: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018short unsigned int&\u2019\n  175 |       operator>>(unsigned short& __n)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:179:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  179 |       operator>>(int& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:179:23: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018int&\u2019\n  179 |       operator>>(int& __n);\n      |                  ~~~~~^~~\n/usr/include/c++/9/istream:182:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  182 |       operator>>(unsigned int& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:182:32: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018unsigned int&\u2019\n  182 |       operator>>(unsigned int& __n)\n      |                  ~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:186:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  186 |       operator>>(long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:186:24: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018long int&\u2019\n  186 |       operator>>(long& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:190:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  190 |       operator>>(unsigned long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:190:33: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018long unsigned int&\u2019\n  190 |       operator>>(unsigned long& __n)\n      |                  ~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:195:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  195 |       operator>>(long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:195:29: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018long long int&\u2019\n  195 |       operator>>(long long& __n)\n      |                  ~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:199:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:199:38: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018long long unsigned int&\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |                  ~~~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:214:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(float&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  214 |       operator>>(float& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:214:25: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018float&\u2019\n  214 |       operator>>(float& __f)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:218:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  218 |       operator>>(double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:218:26: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018double&\u2019\n  218 |       operator>>(double& __f)\n      |                  ~~~~~~~~^~~\n/usr/include/c++/9/istream:222:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  222 |       operator>>(long double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:222:31: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018long double&\u2019\n  222 |       operator>>(long double& __f)\n      |                  ~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:235:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(void*&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  235 |       operator>>(void*& __p)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:235:25: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018void*&\u2019\n  235 |       operator>>(void*& __p)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:259:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]\u2019\n  259 |       operator>>(__streambuf_type* __sb);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:259:36: note:   no known conversion for argument 1 from \u2018std::vector<std::vector<char> >\u2019 to \u2018std::basic_istream<char>::__streambuf_type*\u2019 {aka \u2018std::basic_streambuf<char>*\u2019}\n  259 |       operator>>(__streambuf_type* __sb);\n      |                  ~~~~~~~~~~~~~~~~~~^~~~\nIn file included from /usr/include/c++/9/string:56,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/ostream:38,\n                 from /usr/include/c++/9/iostream:39,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 1466 |     operator>>(basic_istream<_CharT, _Traits>& __in,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note:   template argument deduction/substitution failed:\ntest.cpp:20:10: note:   \u2018std::vector<std::vector<char> >\u2019 is not derived from \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\n   20 |   cin >> board;\n      |          ^~~~~\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:931:5: note: candidate: \u2018template<class _CharT, class _Traits> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT&)\u2019\n  931 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:931:5: note:   template argument deduction/substitution failed:\ntest.cpp:20:10: note:   deduced conflicting types for parameter \u2018_CharT\u2019 (\u2018char\u2019 and \u2018std::vector<std::vector<char> >\u2019)\n   20 |   cin >> board;\n      |          ^~~~~\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:756:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char&)\u2019\n  756 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:756:5: note:   template argument deduction/substitution failed:\ntest.cpp:20:10: note:   cannot convert \u2018board\u2019 (type \u2018std::vector<std::vector<char> >\u2019) to type \u2018unsigned char&\u2019\n   20 |   cin >> board;\n      |          ^~~~~\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:761:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char&)\u2019\n  761 |     operator>>(basic_istream<char, _Traits>& __in, signed char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:761:5: note:   template argument deduction/substitution failed:\ntest.cpp:20:10: note:   cannot convert \u2018board\u2019 (type \u2018std::vector<std::vector<char> >\u2019) to type \u2018signed char&\u2019\n   20 |   cin >> board;\n      |          ^~~~~\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:963:5: note: candidate: \u2018template<class _CharT2, class _Traits2> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT2*)\u2019\n  963 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:963:5: note:   template argument deduction/substitution failed:\ntest.cpp:20:10: note:   mismatched types \u2018_CharT2*\u2019 and \u2018std::vector<std::vector<char> >\u2019\n   20 |   cin >> board;\n      |          ^~~~~\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:803:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char*)\u2019\n  803 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:803:5: note:   template argument deduction/substitution failed:\ntest.cpp:20:10: note:   cannot convert \u2018board\u2019 (type \u2018std::vector<std::vector<char> >\u2019) to type \u2018unsigned char*\u2019\n   20 |   cin >> board;\n      |          ^~~~~\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:808:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char*)\u2019\n  808 |     operator>>(basic_istream<char, _Traits>& __in, signed char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:808:5: note:   template argument deduction/substitution failed:\ntest.cpp:20:10: note:   cannot convert \u2018board\u2019 (type \u2018std::vector<std::vector<char> >\u2019) to type \u2018signed char*\u2019\n   20 |   cin >> board;\n      |          ^~~~~\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:980:5: note: candidate: \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&)\u2019\n  980 |     operator>>(_Istream&& __is, _Tp&& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:980:5: note:   template argument deduction/substitution failed:\n/usr/include/c++/9/istream: In substitution of \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&) [with _Istream = std::basic_istream<char>&; _Tp = std::vector<std::vector<char> >&]\u2019:\ntest.cpp:20:10:   required from here\n/usr/include/c++/9/istream:980:5: error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false, std::basic_istream<char>&>\u2019\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/71", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <algorithm>\n#include <random>\n\nusing namespace std;\n\nbool isPrime(int n)\n{\n    if (n <= 1)\n        return false;\n    for (int i = 2; i * i <= n; i++)\n    {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n\nint main()\n{\n    int t, w, b, l, p, q;\n    cin >> t;\n    for (int i = 0; i < t; i++)\n    {\n        cin >> w;\n        cin >> b;\n        cin >> l;\n\n        long long steps_w = l / w;\n        long long steps_b = l / b;\n\n        p = __gcd(steps_w, steps_b);\n        q = steps_w * steps_b / p;\n\n        cout << p << \"/\" << q << endl;\n    }\n    return 0;\n}\n", "testcases": [{"input": "10 3 2", "output": "3/10"}, {"input": "7 1 2", "output": "3/7"}, {"input": "1 1 1", "output": "1/1"}, {"input": "5814 31 7", "output": "94/2907"}, {"input": "94268 813 766", "output": "765/94268"}, {"input": "262610 5583 4717", "output": "2358/131305"}, {"input": "3898439 96326 71937", "output": "71936/3898439"}, {"input": "257593781689876390 32561717 4411677", "output": "7914548537/257593781689876390"}, {"input": "111319886766128339 7862842484895022 3003994959686829", "output": "3003994959686828/111319886766128339"}, {"input": "413850294331656955 570110918058849723 409853735661743839", "output": "409853735661743838/413850294331656955"}, {"input": "3000000000000000000 2999999999999999873 2999999999999999977", "output": "23437499999999999/23437500000000000"}, {"input": "9 6 1", "output": "1/9"}, {"input": "32 9 2", "output": "3/32"}, {"input": "976 5 6", "output": "41/244"}, {"input": "5814 31 7", "output": "94/2907"}, {"input": "94268 714 345", "output": "689/94268"}, {"input": "262610 5583 4717", "output": "2358/131305"}, {"input": "3898439 96326 71937", "output": "71936/3898439"}, {"input": "54682301 778668 253103", "output": "253102/54682301"}, {"input": "329245015 1173508 8918834", "output": "1173507/329245015"}, {"input": "321076647734423976 7 7", "output": "1/1"}, {"input": "455227494055672047 92 28", "output": "19792499741550983/455227494055672047"}, {"input": "595779167455745259 6954 8697", "output": "205511958419723/595779167455745259"}, {"input": "1000000000000000000 1000000000 2000000000", "output": "1/2"}, {"input": "462643382718281828 462643382718281507 462643382718281701", "output": "33045955908448679/33045955908448702"}, {"input": "4000000000000000000 9999999999999997 99999999999999999", "output": "2499999999999999/1000000000000000000"}, {"input": "4003000100004000000 9999999099999999 99999999999999999", "output": "4999999549999999/2001500050002000000"}, {"input": "4903000100004000000 58997960959949999 99933992929999999", "output": "29498980479974999/2451500050002000000"}, {"input": "257593781689876390 32561717 4411677", "output": "7914548537/257593781689876390"}, {"input": "111319886766128339 7862842484895022 3003994959686829", "output": "3003994959686828/111319886766128339"}, {"input": "413850294331656955 570110918058849723 409853735661743839", "output": "409853735661743838/413850294331656955"}, {"input": "232 17 83", "output": "2/29"}, {"input": "5496272 63 200", "output": "13765/2748136"}, {"input": "180 174 53", "output": "13/45"}, {"input": "1954 190 537", "output": "189/1954"}, {"input": "146752429 510 514", "output": "571199/146752429"}, {"input": "579312860 55 70", "output": "10344881/144828215"}, {"input": "1 9 9", "output": "1/1"}, {"input": "95 19 19", "output": "1/1"}, {"input": "404 63 441", "output": "31/202"}, {"input": "5566 4798 4798", "output": "1/1"}, {"input": "118289676 570846883 570846883", "output": "1/1"}, {"input": "763 358 358", "output": "1/1"}, {"input": "85356138 7223 482120804", "output": "3611/42678069"}, {"input": "674664088 435395270 5", "output": "9/674664088"}, {"input": "762200126044291557 370330636048898430 6", "output": "17/762200126044291557"}, {"input": "917148533938841535 47 344459175789842163", "output": "28/183429706787768307"}, {"input": "360212127113008697 877228952036215545 5259", "output": "5258/360212127113008697"}, {"input": "683705963104411677 89876390 116741460012229240", "output": "539258339/683705963104411677"}, {"input": "573003994959686829 275856334120822851 1319886766128339", "output": "3959660298385016/573003994959686829"}, {"input": "409853735661743839 413850294331656955 413850294331656955", "output": "1/1"}, {"input": "19 1 19", "output": "1/19"}, {"input": "576 18 32", "output": "1/16"}, {"input": "9540 10 954", "output": "1/477"}, {"input": "101997840 6 16999640", "output": "1/8499820"}, {"input": "955944 1278 748", "output": "1/639"}, {"input": "482120804 66748 7223", "output": "1/66748"}, {"input": "370330636048898430 61721772674816405 6", "output": "1/61721772674816405"}, {"input": "344459175789842163 7328918633826429 47", "output": "1/7328918633826429"}, {"input": "877228952036215545 166805277055755 5259", "output": "1/55601759018585"}, {"input": "116741460012229240 1298911316 89876390", "output": "1/649455658"}, {"input": "275856334120822851 209 1319886766128339", "output": "1/1319886766128339"}, {"input": "413850294331656955 1 413850294331656955", "output": "1/413850294331656955"}, {"input": "54682301 778668 253103", "output": "253102/54682301"}, {"input": "329245015 3931027 6443236", "output": "357366/29931365"}, {"input": "321076647734423976 7 8", "output": "1672274206950125/13378193655600999"}, {"input": "455227494055672047 71 60", "output": "6411654845854559/455227494055672047"}, {"input": "595779167455745259 9741 9331", "output": "61162012885196/595779167455745259"}, {"input": "6470 80 160", "output": "327/647"}, {"input": "686325 828 1656", "output": "114511/228775"}, {"input": "4535304 2129 4258", "output": "755973/1511768"}, {"input": "40525189 6365 12730", "output": "20265394/40525189"}, {"input": "675297075 25986 51972", "output": "112553659/225099025"}, {"input": "5681598412 75376 226128", "output": "1893897375/5681598412"}, {"input": "384118571739435733 619773000 1859319000", "output": "128039524053435733/384118571739435733"}, {"input": "391554751752251913 625743359 1877230077", "output": "130518250652782079/391554751752251913"}, {"input": "390728504279201198 625082797 1250165594", "output": "195364252413988195/390728504279201198"}, {"input": "389902265396085075 624421544 1248843088", "output": "64983710976697837/129967421798695025"}, {"input": "734812071040507372 857211800 2571635400", "output": "61234339274051543/183703017760126843"}, {"input": "1 1 2", "output": "0/1"}, {"input": "3 1 4", "output": "0/1"}, {"input": "8 2 3", "output": "3/8"}, {"input": "64 32 16", "output": "1/2"}, {"input": "1 1 1000000000", "output": "0/1"}, {"input": "1000000000 1 1", "output": "1/1"}, {"input": "1000000000 1000000000 1000000000", "output": "1/1"}, {"input": "1000000000 2 4", "output": "1/2"}, {"input": "1000000000 123 456", "output": "6579023/1000000000"}, {"input": "1000000000 123123 654", "output": "24851/1000000000"}, {"input": "123456 123 456", "output": "215/30864"}, {"input": "123456 1234567 123", "output": "61/61728"}, {"input": "314159265 271 8281", "output": "37939/314159265"}, {"input": "11071994 4231 1324", "output": "2647/11071994"}, {"input": "961748927 961748941 982451653", "output": "1/1"}, {"input": "15485221 1259 90863", "output": "1258/15485221"}, {"input": "5000000000000000000 4999999999999999837 4999999999999999963", "output": "1249999999999999959/1250000000000000000"}, {"input": "4000000000000000000 3999999999999999691 3999999999999999887", "output": "399999999999999969/400000000000000000"}, {"input": "999999999999999999 999999999999999709 999999999999999737", "output": "333333333333333236/333333333333333333"}, {"input": "799999999999999999 799999999999999969 799999999999999991", "output": "799999999999999968/799999999999999999"}, {"input": "812312312312312222 812312312312311897 812312312312312029", "output": "406156156156155948/406156156156156111"}, {"input": "500000000000000000 499999999999999927 499999999999999931", "output": "249999999999999963/250000000000000000"}, {"input": "555555555555555555 555555555555555083 555555555555555229", "output": "50505050505050462/50505050505050505"}, {"input": "199419941994199419 199419941994199369 199419941994199391", "output": "66473313998066456/66473313998066473"}, {"input": "145685485411238588 145685485411238483 145685485411238573", "output": "72842742705619241/72842742705619294"}, {"input": "314159265358979323 314159265358979167 314159265358979213", "output": "314159265358979166/314159265358979323"}, {"input": "10 1000000000000000000 1000000000000000001", "output": "1/1"}, {"input": "5 100000000000000000 99999999999999999", "output": "1/1"}, {"input": "5 1000000000000 1000000000001", "output": "1/1"}, {"input": "5 1000000000000000000 1000000000000000001", "output": "1/1"}, {"input": "2 1000000000000000000 1000000000000000001", "output": "1/1"}, {"input": "2 10 11", "output": "1/1"}, {"input": "10 123456789123456789 723456789123456781", "output": "1/1"}, {"input": "12345678910 123456789101112131 123456789101112132", "output": "1/1"}, {"input": "5 499999999999999999 499999999999999998", "output": "1/1"}], "language": "cpp"}, "prompt": "C. The Big Race\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nVector Willman and Array Bolt are the two most famous athletes of Byteforces. They are going to compete in a race with a distance of L meters today.\nWillman and Bolt have exactly the same speed, so when they compete the result is always a tie. That is a problem for the organizers because they want a winner.\nWhile watching previous races the organizers have noticed that Willman can perform only steps of length equal to w meters, and Bolt can perform only steps of length equal to b meters. Organizers decided to slightly change the rules of the race. Now, at the end of the racetrack there will be an abyss, and the winner will be declared the athlete, who manages to run farther from the starting point of the the racetrack (which is not the subject to change by any of the athletes).\nNote that none of the athletes can run infinitely far, as they both will at some moment of time face the point, such that only one step further will cause them to fall in the abyss. In other words, the athlete will not fall into the abyss if the total length of all his steps will be less or equal to the chosen distance L.\nSince the organizers are very fair, the are going to set the length of the racetrack as an integer chosen randomly and uniformly in range from 1 to t (both are included). What is the probability that Willman and Bolt tie again today?\nInput\nThe first line of the input contains three integers t, w and b (1 <= t, w, b <= 5.1018) - the maximum possible length of the racetrack, the length of Willman's steps and the length of Bolt's steps respectively.\nOutput\nPrint the answer to the problem as an irreducible fraction . Follow the format of the samples output.\nThe fraction  (p and q are integers, and both p >= 0 and q > 0 holds) is called irreducible, if there is no such integer d > 1, that both p and q are divisible by d.\n", "generation": "#include <iostream>\n#include <algorithm>\n#include <random>\n\nusing namespace std;\n\nbool isPrime(int n)\n{\n    if (n <= 1)\n        return false;\n    for (int i = 2; i * i <= n; i++)\n    {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n\nint main()\n{\n    int t, w, b, l, p, q;\n    cin >> t;\n    for (int i = 0; i < t; i++)\n    {\n        cin >> w;\n        cin >> b;\n        cin >> l;\n\n        long long steps_w = l / w;\n        long long steps_b = l / b;\n\n        p = __gcd(steps_w, steps_b);\n        q = steps_w * steps_b / p;\n\n        cout << p << \"/\" << q << endl;\n    }\n    return 0;\n}\n", "result": "failed: wrong answer @ testcase 1", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/72", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool compare(vector<int> a, vector<int> b) {\n  vector<int> ac = a;\n  vector<int> bc = b;\n  sort(ac.begin(), ac.end());\n  sort(bc.begin(), bc.end());\n  return ac != bc;\n}\n\nint main() {\n  int n, c, d;\n  cin >> n;\n  cin >> c;\n  cin >> d;\n\n  vector<int> r(n);\n  vector<int> w(n);\n\n  for (int i = 0; i < n; i++) {\n    cin >> r[i];\n    cin >> w[i];\n  }\n\n  vector<vector<int>> teams;\n  for (int i = 0; i < n - 2; i++) {\n    vector<int> team(3);\n    team[0] = i;\n    team[1] = i + 1;\n    team[2] = i + 2;\n    teams.push_back(team);\n  }\n\n  int ans = 0;\n  for (int i = 0; i < teams.size(); i++) {\n    bool flag = true;\n    for (int j = 0; j < teams.size(); j++) {\n      if (i == j) continue;\n      if (compare(teams[i], teams[j])) flag = false;\n    }\n    if (flag) ans++;\n  }\n\n  cout << ans;\n  return 0;\n}\n", "testcases": [{"input": "5 2 2\n1 1\n4 1\n2 3\n3 2\n3 4", "output": "4"}, {"input": "7 6 6\n3 2\n1 7\n5 7\n3 7\n6 4\n8 9\n8 5", "output": "11"}, {"input": "3 91 20\n37 37\n25 86\n78 44", "output": "0"}, {"input": "16 894 6836\n9496 1902\n2712 9362\n8839 1118\n5908 7223\n8902 4311\n849 253\n4152 6625\n7475 8107\n9585 7253\n592 9614\n2491 7169\n4596 230\n882 6184\n1389 8103\n3768 9791\n8495 9402", "output": "26"}, {"input": "32 79793 36411\n37942 45805\n11123 1864\n8196 82922\n31139 76552\n77991 28555\n96327 37047\n79356 82575\n10442 62647\n90848 41723\n16799 36366\n38456 80022\n17881 53383\n17674 10701\n41940 49647\n13218 10032\n1803 90968\n52334 29939\n31711 2745\n33251 80686\n77911 70443\n25206 87806\n53498 94862\n22755 9506\n92022 12354\n52137 46494\n19389 24111\n40907 8123\n98755 59389\n39345 28613\n11553 78172\n27813 68108\n93557 59646", "output": "496"}, {"input": "5 20 20\n20 29\n20 23\n20 6\n20 17\n20 30", "output": "0"}, {"input": "5 20 20\n38 20\n15 20\n5 20\n18 20\n4 20", "output": "0"}, {"input": "5 20 20\n22 24\n16 12\n13 6\n15 10\n18 16", "output": "0"}, {"input": "10 20 20\n29 29\n25 25\n24 24\n33 33\n1 1\n5 5\n17 17\n15 15\n31 31\n27 27", "output": "0"}, {"input": "1000 2000 2000\n436 436\n2365 2365\n459 459\n3053 3053\n2111 2111\n3759 3759\n831 831\n2162 2162\n3056 3056\n851 851\n427 427\n3128 3128\n80 80\n583 583\n3586 3586\n1906 1906\n2805 2805\n3087 3087\n681 681\n3107 3107\n1295 1295\n1434 1434\n3007 3007\n3656 3656\n2973 2973\n2120 2120\n2114 2114\n3166 3166\n3797 3797\n1829 1829\n2088 2088\n2289 2289\n1872 1872\n1567 1567\n137 137\n1935 1935\n1457 1457\n2422 2422\n635 635\n2433 2433\n2831 2831\n1380 1380\n2034 2034\n3572 3572\n3257 3257\n2325 2325\n3536 3536\n...", "output": "0"}, {"input": "1000 2000 2000\n3927 73\n659 3341\n1125 2875\n2653 1347\n1592 2408\n2132 1868\n1035 2965\n3412 588\n997 3003\n1769 2231\n1162 2838\n2432 1568\n2527 1473\n23 3977\n2324 1676\n2744 1256\n3165 835\n3005 995\n3990 10\n3208 792\n1316 2684\n1639 2361\n3558 442\n3763 237\n2660 1340\n3600 400\n1612 2388\n1919 2081\n2772 1228\n2982 1018\n3045 955\n495 3505\n2545 1455\n40 3960\n3544 456\n3865 135\n1389 2611\n3497 503\n3968 32\n665 3335\n2438 1562\n2033 1967\n3676 324\n1101 2899\n3578 422\n70 3930\n2325 1675\n404 359...", "output": "0"}, {"input": "4 4 1\n1 3\n2 4\n2 1\n5 5", "output": "0"}, {"input": "15 1 1\n3 1\n4 1\n3 2\n3 3\n1 3\n1 2\n1 4\n2 1\n2 4\n2 3\n2 2\n4 4\n3 4\n4 3\n4 2", "output": "0"}, {"input": "4 1 23\n90 14\n97 74\n38 26\n4 21", "output": "0"}, {"input": "8 61 898\n315 863\n524 559\n612 425\n577 542\n220 280\n560 880\n297 626\n381 24", "output": "0"}, {"input": "64 38747 858397\n796971 66294\n284528 624800\n908887 455682\n685253 739742\n974302 416068\n468915 622051\n457976 618850\n162490 731632\n101903 937753\n136462 223131\n699841 391993\n156889 564686\n991714 998820\n265463 554118\n922103 353619\n295800 654996\n387835 550865\n651297 85280\n248286 394942\n581739 135777\n393985 472845\n288963 351462\n130683 502918\n611464 630736\n972119 148165\n400593 811797\n22868 786297\n485540 532159\n541347 210854\n220352 428267\n337645 180067\n44244 18635\n91275 377949\n24800...", "output": "0"}], "language": "cpp"}, "prompt": "E. BCPC\ntime limit per test\n4 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nBCPC stands for Byteforces Collegiate Programming Contest, and is the most famous competition in Byteforces.\nBCPC is a team competition. Each team is composed by a coach and three contestants. Blenda is the coach of the Bit State University(BSU), and she is very strict selecting the members of her team.\nIn BSU there are n students numbered from 1 to n. Since all BSU students are infinitely smart, the only important parameters for Blenda are their reading and writing speed. After a careful measuring, Blenda have found that the i-th student have a reading speed equal to ri (words per minute), and a writing speed of wi (symbols per minute). Since BSU students are very smart, the measured speeds are sometimes very big and Blenda have decided to subtract some constant value c from all the values of reading speed and some value d from all the values of writing speed. Therefore she considers ri' = ri - c and wi' = wi - d.\nThe student i is said to overwhelm the student j if and only if ri'.wj' > rj'.wi'. Blenda doesn't like fights in teams, so she thinks that a team consisting of three distinct students i, j and k is good if i overwhelms j, j overwhelms k, and k overwhelms i. Yes, the relation of overwhelming is not transitive as it often happens in real life.\nSince Blenda is busy preparing a training camp in Codeforces, you are given a task to calculate the number of different good teams in BSU. Two teams are considered to be different if there is at least one student that is present in one team but is not present in the other. In other words, two teams are different if the sets of students that form these teams are different.\nInput\nIn the first line of the input three integers n, c and d (3 <= n <= 345678, 1 <= c, d <= 109) are written. They denote the number of students Blenda can use to form teams, the value subtracted from all reading speeds and the value subtracted from all writing speeds respectively.\nEach of the next n lines contains two integers ri and wi (0 < ri, wi <= 109, |ri - c| + |wi - d| > 0). There are no two students, such that both their reading and writing speeds coincide, i.e. for every i != j condition |ri - rj| + |wi - wj| > 0 holds.\nOutput\nPrint the number of different teams in BSU, that are good according to Blenda's definition.\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool compare(vector<int> a, vector<int> b) {\n  vector<int> ac = a;\n  vector<int> bc = b;\n  sort(ac.begin(), ac.end());\n  sort(bc.begin(), bc.end());\n  return ac != bc;\n}\n\nint main() {\n  int n, c, d;\n  cin >> n;\n  cin >> c;\n  cin >> d;\n\n  vector<int> r(n);\n  vector<int> w(n);\n\n  for (int i = 0; i < n; i++) {\n    cin >> r[i];\n    cin >> w[i];\n  }\n\n  vector<vector<int>> teams;\n  for (int i = 0; i < n - 2; i++) {\n    vector<int> team(3);\n    team[0] = i;\n    team[1] = i + 1;\n    team[2] = i + 2;\n    teams.push_back(team);\n  }\n\n  int ans = 0;\n  for (int i = 0; i < teams.size(); i++) {\n    bool flag = true;\n    for (int j = 0; j < teams.size(); j++) {\n      if (i == j) continue;\n      if (compare(teams[i], teams[j])) flag = false;\n    }\n    if (flag) ans++;\n  }\n\n  cout << ans;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018bool compare(std::vector<int>, std::vector<int>)\u2019:\ntest.cpp:9:3: error: \u2018sort\u2019 was not declared in this scope; did you mean \u2018qsort\u2019?\n    9 |   sort(ac.begin(), ac.end());\n      |   ^~~~\n      |   qsort\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/73", "completion_id": 0, "test_suite": {"code": "int solve(vector<string>& w) {\n  unordered_map<string, int> m;\n  int ans = 0;\n  for (string word : w) {\n    string key = word.substr(0, 2);\n    if (!m.count(key)) {\n      m[key] = 0;\n    }\n    m[key]++;\n  }\n  for (auto it : m) {\n    ans = max(ans, it.second * it.first.length());\n  }\n  return ans;\n}\n", "testcases": [{"input": "4\nabb\ncacc\naaa\nbbb", "output": "9"}, {"input": "5\na\na\nbcbcb\ncdecdecdecdecdecde\naaaa", "output": "6"}, {"input": "1\na", "output": "1"}, {"input": "2\nz\nz", "output": "2"}, {"input": "5\nabcde\nfghij\nklmno\npqrst\nuvwxy", "output": "0"}, {"input": "6\ngggggg\ngggggg\ngggggg\ngggggg\ngggggg\ngggggg", "output": "36"}, {"input": "6\naaaaaa\naaaaaa\nbbbbbb\nbbbbbb\naaabbb\nababab", "output": "36"}, {"input": "1\nabc", "output": "0"}, {"input": "2\nabc\nbca", "output": "0"}, {"input": "3\nab\nba\nzzz", "output": "4"}, {"input": "3\nab\nba\nzzzzz", "output": "5"}, {"input": "5\nzzz\nzzzz\nzz\nz\naaaaaaaaaaaaaaaaaaaaaaaaaaa", "output": "37"}, {"input": "26\nq\nw\ne\nr\nt\ny\nu\ni\no\np\na\ns\nd\nf\ng\nh\nj\nk\nl\nz\nx\nc\nv\nb\nn\nm", "output": "2"}, {"input": "5\nzzz\nzzzz\nzz\nz\naaaaaaaaaaaaaaaaaaaaaaaaaaaf", "output": "28"}, {"input": "100\narorkkmo\nrzphvlgkd\nrfqfsmai\nvpdwbujaym\ngrbwmkciidzav\nsiohwmlla\nfbqdthyeuq\njpzmzmsy\ndokgpxcvu\nzzaumewdpj\ngfbagjuqswv\nvsgssvoxyehsa\nwbogdzxvlefu\ncuaidfj\npkcdfsws\nlifsmoiuroh\nvygfigvgz\nxopuicsrbs\nhwludsfkhjjxzp\nicrp\nbaubvzoceo\newchhviulyxanf\ntfhsfsbtkp\ndtnrcegzcmzk\npdpieqjtxefpmkwc\nbczwvehaoq\ncshmhzdmpobf\nahferrvgmmbo\nrequkuh\ncdxuqqjz\ntqbqxsly\nvehwptdacx\nshwmebfmdh\nweskkkapir\nsdxxynzxaejxgxg\nptcwrsdfwopgifog\nejubkyg\ncepwnnqiqrt\nltcgmggzqdhpyz\nqjfitg\ngemurojxydss\nf...", "output": "0"}, {"input": "1\nbomyppjghimqvauuflfacvjwkteglafzcqcguzigedropgjepqfufpwwnbqjjzayofuzzhezjaqstwootqosfkdegwxhqmowxahsfbgpnabicngkbplervrahpvaankzpapusshiirfqcteolooawwkgufvjuahtjnsrdqidiiughfyhjztmklqwmuzhhxrrzfvdouovezcexuytdusqljaytgfkfmxyzpvgzaqolwygfgvdbdhhmffoozjzmrkqnooxryempodlshujsyiaktzxtetyrnnnfakvvuimqohqnhjzsvurffmdcitrdibmpdgmcitproppgtshjrjlrwdbnkacyyjmskljaajznyeuhimjecuqlvpecghxsixvpffbtftfilrwdvgbwkucagoapmqiyfqfyrmcrxsnuynuaesgjmxcqfldjfpyxzodnblsnignihlufnswmfrbrxyoyjtrzmumraluutprxazmvdtmfnmnuxzabxsr...", "output": "0"}, {"input": "1\nbbcccccbbabccaccbabccbccacccabacabbbacacbabaaacbbbcabcaccbcbaabcbcbaccacbbaaaaabcbcabcabcbcbcacccbbcbcaccacbcbacbccccaabacbcbbabcabbbabbbbabccbabcacbabbbbcabccaacabccbaaacbcbbaacacbcbbbbaabcaccbbcbbcacbbbcabcaaabaaaccccacacaacbccccabaabbaccaabacbcbacacaacbacbccabccccabbbacaccccbcabbacaabccbcbbbbbcbbccccabcbaacbcbcbccbacbbabccabccaaacbaaacabaacaabccbaaaabcbbcbbbccbbbbabbabacccabcaccbcbaabacbccabcbaccabbbaacabbabbaababcacbbbaacccabbcccbaaaaaababcbcbcacabcaabbbabbccbbbabbbaabcacabbbccbcbacbbcccaabbbaabaabb...", "output": "0"}, {"input": "7\npavel\nerika\nalexxxxxxx\ngracio\nzhenya\nsudarev\nchelyaba", "output": "0"}, {"input": "31\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml\nfml", "output": "0"}, {"input": "5\nzloyfreid\ngraciocode\nschooldiary\nkazakov\nevgesha", "output": "0"}, {"input": "4\nurkop\nvisualac\ngnutl\nwtf", "output": "0"}, {"input": "3\naa\nb\nccc", "output": "5"}, {"input": "3\na\nbd\ncaaaaaaa", "output": "9"}, {"input": "4\naa\nax\nay\nxxxx", "output": "8"}, {"input": "5\nc\nbb\ne\ndd\nf", "output": "4"}, {"input": "2\naaaaa\naaaaa", "output": "10"}], "language": "cpp"}, "prompt": "A. 2Char\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nAndrew often reads articles in his favorite magazine 2Char. The main feature of these articles is that each of them uses at most two distinct letters. Andrew decided to send an article to the magazine, but as he hasn't written any article, he just decided to take a random one from magazine 26Char. However, before sending it to the magazine 2Char, he needs to adapt the text to the format of the journal. To do so, he removes some words from the chosen article, in such a way that the remaining text can be written using no more than two distinct letters.\nSince the payment depends from the number of non-space characters in the article, Andrew wants to keep the words with the maximum total length.\nInput\nThe first line of the input contains number n (1 <= n <= 100) - the number of words in the article chosen by Andrew. Following are n lines, each of them contains one word. All the words consist only of small English letters and their total length doesn't exceed 1000. The words are not guaranteed to be distinct, in this case you are allowed to use a word in the article as many times as it appears in the input.\nOutput\nPrint a single integer - the maximum possible total length of words in Andrew's article.\n", "generation": "int solve(vector<string>& w) {\n  unordered_map<string, int> m;\n  int ans = 0;\n  for (string word : w) {\n    string key = word.substr(0, 2);\n    if (!m.count(key)) {\n      m[key] = 0;\n    }\n    m[key]++;\n  }\n  for (auto it : m) {\n    ans = max(ans, it.second * it.first.length());\n  }\n  return ans;\n}\n", "result": "failed: compilation error: test.cpp:1:11: error: \u2018vector\u2019 was not declared in this scope\n    1 | int solve(vector<string>& w) {\n      |           ^~~~~~\ntest.cpp:1:18: error: \u2018string\u2019 was not declared in this scope\n    1 | int solve(vector<string>& w) {\n      |                  ^~~~~~\ntest.cpp:1:27: error: \u2018w\u2019 was not declared in this scope\n    1 | int solve(vector<string>& w) {\n      |                           ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/76", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> solve(int n, int m, int q, vector<int> &a, vector<int> &b, vector<int> &c) {\n  vector<int> dp(n * m, 0);\n  dp[0] = 1;\n\n  for (int i = 0; i < q; i++) {\n    int t = a[i];\n    int x = b[i];\n    int y = c[i];\n\n    if (t == 1) {\n      dp[x * m + y] = dp[x * m + y] + 1;\n    } else if (t == 2) {\n      dp[x * m + y] = 0;\n    } else if (t == 3) {\n      dp[x * m + y] = dp[x * m + y] - 1;\n    }\n  }\n\n  return dp;\n}\n\nint main() {\n  int n, m, q;\n  cin >> n;\n  cin >> m;\n  cin >> q;\n\n  vector<int> a(q);\n  vector<int> b(q);\n  vector<int> c(q);\n\n  for (int i = 0; i < q; i++) {\n    cin >> a[i];\n    cin >> b[i];\n    cin >> c[i];\n  }\n\n  vector<int> ans = solve(n, m, q, a, b, c);\n\n  for (int i = 0; i < q; i++) {\n    cout << ans[i] << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "1 3 3\n2 1 2 3\n3 1 2 5\n1 1 1 7", "output": "5"}, {"input": "3 3 3\n2 2 2 2\n1 3 3 5\n1 3 3 7", "output": "2\n42"}, {"input": "4 5 5\n2 2 5 3\n2 2 4 6\n3 2 4 9\n1 4 4 13\n1 4 4 15", "output": "490902\n10598759"}, {"input": "1 1 1\n1 1 1 2", "output": "1"}, {"input": "3 3 1\n1 3 3 5", "output": "6"}, {"input": "2 2 5\n2 1 1 8\n3 1 1 12345\n2 1 2 22345\n3 1 2 31243\n1 2 2 111115", "output": "703708091"}, {"input": "1 2 3\n1 1 1 2\n1 1 2 5\n1 1 1 19", "output": "1\n8\n131072"}, {"input": "1 1 4\n2 1 1 2\n3 1 1 5\n1 1 1 7\n1 1 1 10", "output": "0\n0"}, {"input": "2 2 3\n2 1 1 2\n1 2 2 3\n1 2 2 5", "output": "2\n10"}, {"input": "1 20 2\n1 1 20 100000001\n1 1 20 1000000000", "output": "452548876\n224409846"}, {"input": "2 2 10\n1 2 2 185\n1 2 2 243\n2 1 1 261\n3 1 1 279\n1 2 1 280\n2 1 1 293\n2 2 1 295\n3 1 1 298\n2 1 2 299\n2 1 1 300", "output": "990123599\n781690482\n617361700"}, {"input": "1 1 10\n2 1 1 227\n3 1 1 238\n2 1 1 286\n3 1 1 292\n2 1 1 295\n3 1 1 296\n1 1 1 297\n2 1 1 298\n3 1 1 299\n1 1 1 300", "output": "0\n0"}, {"input": "20 1 10\n2 8 1 245\n2 2 1 275\n1 17 1 284\n1 13 1 293\n3 2 1 295\n1 3 1 296\n2 1 1 297\n3 1 1 298\n2 13 1 299\n2 19 1 300", "output": "26508505\n16907334\n673189879"}, {"input": "1 20 10\n1 1 4 200\n1 1 11 278\n2 1 15 285\n3 1 15 290\n1 1 13 292\n2 1 17 296\n2 1 8 297\n1 1 6 298\n1 1 11 299\n3 1 8 300", "output": "272600817\n593383272\n555850892\n746491153\n78394828"}], "language": "cpp"}, "prompt": "E. Strange Calculation and Cats\ntime limit per test\n4 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nGosha's universe is a table consisting of n rows and m columns. Both the rows and columns are numbered with consecutive integers starting with 1. We will use (r, c) to denote a cell located in the row r and column c.\nGosha is often invited somewhere. Every time he gets an invitation, he first calculates the number of ways to get to this place, and only then he goes. Gosha's house is located in the cell (1, 1).\nAt any moment of time, Gosha moves from the cell he is currently located in to a cell adjacent to it (two cells are adjacent if they share a common side). Of course, the movement is possible only if such a cell exists, i.e. Gosha will not go beyond the boundaries of the table. Thus, from the cell (r, c) he is able to make a move to one of the cells (r - 1, c), (r, c - 1), (r + 1, c), (r, c + 1). Also, Ghosha can skip a move and stay in the current cell (r, c).\nBesides the love of strange calculations, Gosha is allergic to cats, so he never goes to the cell that has a cat in it. Gosha knows exactly where and when he will be invited and the schedule of cats travelling along the table. Formally, he has q records, the i-th of them has one of the following forms:\n1, xi, yi, ti - Gosha is invited to come to cell (xi, yi) at the moment of time ti. It is guaranteed that there is no cat inside cell (xi, yi) at this moment of time.\n2, xi, yi, ti - at the moment ti a cat appears in cell (xi, yi). It is guaranteed that no other cat is located in this cell (xi, yi) at that moment of time.\n3, xi, yi, ti - at the moment ti a cat leaves cell (xi, yi). It is guaranteed that there is cat located in the cell (xi, yi).\nGosha plans to accept only one invitation, but he has not yet decided, which particular one. In order to make this decision, he asks you to calculate for each of the invitations i the number of ways to get to the cell (xi, yi) at the moment ti. For every invitation, assume that Gosha he starts moving from cell (1, 1) at the moment 1.\nMoving between two neighboring cells takes Gosha exactly one unit of tim. In particular, this means that Gosha can come into the cell only if a cat sitting in it leaves the moment when Gosha begins his movement from the neighboring cell, and if none of the cats comes to the cell at the time when Gosha is in it.\nTwo ways to go from cell (1, 1) to cell (x, y) at time t are considered distinct if for at least one moment of time from 1 to t Gosha's positions are distinct for the two ways at this moment. Note, that during this travel Gosha is allowed to visit both (1, 1) and (x, y) multiple times. Since the number of ways can be quite large, print it modulo 109 + 7.\nInput\nThe first line of the input contains three positive integers n, m and q (1 <= n.m <= 20, 1 <= q <= 10 000) - the number of rows and columns in the table and the number of events respectively.\nNext q lines describe the events, each description contains four integers tpi, xi, yi and ti (1 <= tp <= 3, 1 <= x <= n, 1 <= y <= m, 2 <= t <= 109) - the type of the event (1 if Gosha gets an invitation, 2 if a cat comes to the cell and 3 if a cat leaves the cell), the coordinates of the cell where the action takes place and the moment of time at which the action takes place respectively.\nIt is guaranteed that the queries are given in the chronological order, i.e. ti < ti + 1.\nOutput\nFor each invitation i (that is, tpi = 1) calculate the number of ways to get to cell (xi, yi) at the moment of time ti. Respond to the invitations chronologically, that is, in the order they appear in the input.\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> solve(int n, int m, int q, vector<int> &a, vector<int> &b, vector<int> &c) {\n  vector<int> dp(n * m, 0);\n  dp[0] = 1;\n\n  for (int i = 0; i < q; i++) {\n    int t = a[i];\n    int x = b[i];\n    int y = c[i];\n\n    if (t == 1) {\n      dp[x * m + y] = dp[x * m + y] + 1;\n    } else if (t == 2) {\n      dp[x * m + y] = 0;\n    } else if (t == 3) {\n      dp[x * m + y] = dp[x * m + y] - 1;\n    }\n  }\n\n  return dp;\n}\n\nint main() {\n  int n, m, q;\n  cin >> n;\n  cin >> m;\n  cin >> q;\n\n  vector<int> a(q);\n  vector<int> b(q);\n  vector<int> c(q);\n\n  for (int i = 0; i < q; i++) {\n    cin >> a[i];\n    cin >> b[i];\n    cin >> c[i];\n  }\n\n  vector<int> ans = solve(n, m, q, a, b, c);\n\n  for (int i = 0; i < q; i++) {\n    cout << ans[i] << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: wrong answer @ testcase 1", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/79", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nlong long phi(long long n) {\n  long long i, phi = 1, primes[n];\n  for (i = 2; i * i <= n; i++) {\n    if (primes[i] == 0) {\n      for (long long j = i; j <= n; j += i) {\n        primes[j] = 1;\n      }\n    }\n  }\n  for (i = 1; i <= n; i++) {\n    if (primes[i] == 0) {\n      phi++;\n    }\n  }\n  return phi;\n}\n\nint main() {\n  long long n, q, i, a[200001], l, r, ans;\n  cin >> n;\n  cin >> a[0];\n  for (i = 1; i <= n; i++) {\n    cin >> a[i];\n  }\n  cin >> q;\n  for (i = 0; i < q; i++) {\n    cin >> l;\n    cin >> r;\n    ans = phi(r) - phi(l - 1);\n    cout << ans << endl;\n  }\n  return 0;\n}\n", "testcases": [{"input": "10\n1 2 3 4 5 6 7 8 9 10\n7\n1 1\n3 8\n5 6\n4 8\n8 10\n7 9\n7 10", "output": "1\n4608\n8\n1536\n192\n144\n1152"}, {"input": "7\n24 63 13 52 6 10 1\n6\n3 5\n4 7\n1 7\n2 4\n3 6\n2 6", "output": "1248\n768\n12939264\n11232\n9984\n539136"}, {"input": "5\n2 3 4 5 6\n5\n2 5\n2 2\n1 5\n2 3\n2 4", "output": "96\n2\n192\n4\n16"}, {"input": "1\n560149\n1\n1 1", "output": "560148"}, {"input": "10\n570570 570570 930930 870870 570570 903210 746130 930930 930930 930930\n10\n1 1\n2 8\n7 9\n2 6\n6 8\n4 8\n1 1\n9 10\n3 3\n1 4", "output": "103680\n318621451\n527979517\n716367138\n457727889\n629095486\n103680\n864702880\n172800\n916551950"}, {"input": "19\n315553 551648 583644 900821 913348 429897 180052 889652 759534 685141 15340 659749 413620 137295 192336 421022 546366 612600 683011\n20\n18 18\n12 15\n7 16\n7 15\n2 10\n14 18\n9 12\n13 17\n2 16\n1 5\n3 19\n3 3\n3 4\n11 13\n4 5\n2 14\n5 11\n12 19\n1 15\n5 10", "output": "163200\n475366378\n597854865\n929642857\n563596944\n545464902\n728372354\n960791317\n764355760\n562848199\n914318373\n183040\n886091652\n310208405\n379268163\n629833585\n962167533\n771170864\n239595114\n712695808"}, {"input": "20\n39820 179494 514786 504333 809650 354659 812783 502726 477018 706364 79176 236379 55592 596907 287364 653769 899015 214093 636223 250607\n18\n6 10\n2 5\n6 8\n4 9\n5 5\n8 16\n11 12\n9 18\n10 18\n11 17\n11 20\n14 20\n1 13\n7 20\n15 20\n4 19\n8 12\n19 20", "output": "793095787\n43455937\n900236543\n394081652\n323840\n713146045\n787112932\n643607188\n375506593\n860078464\n766900035\n349331076\n525610850\n729079241\n78928241\n222023397\n728062803\n107480655"}, {"input": "19\n710357 781854 569626 616635 721994 711144 82545 3451 937228 207998 780960 722017 324806 270002 904330 744586 275574 464202 436073\n19\n4 6\n7 10\n10 15\n2 6\n1 2\n1 16\n18 18\n4 9\n11 12\n9 16\n2 3\n4 5\n5 18\n7 14\n7 18\n10 17\n12 19\n10 11\n14 17", "output": "983951760\n133287506\n309859795\n387114647\n587906079\n939595516\n138240\n636049617\n444381172\n528204840\n623754811\n107652476\n500324047\n475248994\n844724352\n28447096\n461076071\n454035204\n923802677"}, {"input": "10\n528985 936188 742768 646102 635926 310713 99394 440480 200430 551266\n20\n4 10\n1 4\n4 6\n1 3\n2 10\n3 4\n9 10\n6 9\n1 1\n2 5\n3 6\n5 6\n6 10\n6 6\n1 7\n10 10\n1 5\n5 6\n3 9\n9 10", "output": "580148919\n187209938\n648424595\n677944904\n919654504\n354852993\n619742545\n277531939\n414000\n244529692\n163892742\n606755434\n830608793\n184320\n765107277\n256608\n291779355\n606755434\n814151120\n619742545"}, {"input": "20\n793398 752408 238352 775625 929132 465822 849561 810507 156687 817866 327920 915769 678672 487682 163959 476796 479909 204624 943318 892191\n10\n6 7\n14 15\n8 20\n5 17\n2 2\n11 20\n3 6\n7 11\n17 19\n13 17", "output": "266167550\n687257446\n36761289\n888773112\n373248\n307299290\n201982287\n550471414\n730015749\n721510471"}, {"input": "17\n86982 341510 779926 700440 866320 790548 406470 808470 503034 604968 41910 251490 830620 484120 901230 831720 685146\n20\n6 10\n13 15\n4 16\n3 7\n14 17\n6 15\n10 17\n2 15\n12 12\n8 14\n9 11\n1 6\n6 11\n4 7\n5 6\n3 14\n7 10\n6 10\n5 10\n9 12", "output": "816011795\n891384963\n141343300\n635651671\n871641405\n89941064\n458061543\n994311786\n65600\n174800928\n306426074\n555497637\n770198597\n338938634\n229723320\n970467650\n199055370\n816011795\n333295911\n813676340"}, {"input": "18\n603330 813450 435540 889980 949410 507210 774060 396270 735930 286230 850080 695640 71610 761838 352716 188790 503580 256620\n18\n4 17\n9 18\n1 7\n6 9\n1 13\n3 9\n4 17\n6 13\n5 17\n3 12\n13 16\n4 6\n13 18\n4 17\n7 11\n1 17\n13 17\n5 10", "output": "962117190\n49281424\n235819299\n957293612\n135996759\n584808383\n962117190\n82912\n420330761\n293495233\n302593786\n930936619\n931753978\n962117190\n695072904\n798965379\n194405686\n998949772"}, {"input": "20\n746130 870870 870870 690690 930930 690690 746130 570570 881790 746130 746130 570570 881790 930930 570570 570570 510510 870870 903210 881790\n20\n1 9\n4 19\n1 9\n4 20\n14 15\n15 17\n7 13\n2 15\n2 5\n15 17\n5 12\n12 20\n6 14\n2 19\n5 11\n8 18\n11 13\n2 10\n7 14\n6 10", "output": "909089325\n734423493\n909089325\n287359221\n405311349\n863882737\n133535169\n64838050\n510994565\n863882737\n165833490\n879414760\n312123490\n563002853\n392449949\n230934252\n321916940\n909089325\n832909993\n107657898"}, {"input": "18\n900606 871752 108024 697506 784490 116616 806799 762210 655910 853074 62031 10062 516768 135924 778845 683422 228124 261205\n17\n9 18\n2 3\n6 9\n5 6\n1 12\n3 17\n3 8\n4 17\n6 8\n4 12\n12 17\n10 13\n15 18\n2 10\n6 14\n4 15\n1 13", "output": "79284990\n858732362\n668434638\n230963060\n924418212\n37057644\n862952010\n490988331\n333898554\n421160259\n43038327\n804491893\n808552201\n786261546\n565340524\n572509844\n538200736"}, {"input": "20\n664950 643110 737490 671160 794430 366366 549010 757302 425334 397670 531930 506220 548730 938630 899130 380190 726180 463980 450870 398580\n10\n10 11\n8 11\n1 9\n8 8\n2 7\n11 20\n1 14\n5 13\n3 9\n14 19", "output": "809192701\n530233436\n910177950\n186624\n399661455\n596733551\n989131896\n92282202\n302488769\n271705538"}, {"input": "10\n566566 98532 543270 424914 66430 253590 728916 377580 240465 279370\n11\n1 10\n5 8\n7 10\n7 9\n3 3\n1 9\n2 3\n6 9\n2 9\n1 3\n6 7", "output": "216676960\n346424055\n142252585\n200377928\n114048\n804712412\n116513722\n740913213\n703384006\n502260687\n375647443"}, {"input": "18\n400200 839190 358190 826182 102718 615020 194370 272370 871194 678405 418860 552420 814980 218730 727272 552270 18564 843486\n19\n1 18\n1 18\n1 18\n1 18\n1 18\n1 18\n1 18\n1 18\n1 18\n1 18\n1 18\n1 18\n1 18\n1 18\n1 18\n1 18\n1 18\n1 18\n1 18", "output": "494432828\n494432828\n494432828\n494432828\n494432828\n494432828\n494432828\n494432828\n494432828\n494432828\n494432828\n494432828\n494432828\n494432828\n494432828\n494432828\n494432828\n494432828\n494432828"}, {"input": "20\n881790 570570 870870 510510 881790 746130 930930 746130 903210 881790 881790 881790 903210 903210 690690 881790 903210 930930 903210 746130\n17\n2 19\n2 20\n1 19\n1 20\n2 19\n1 19\n1 20\n2 20\n1 19\n2 20\n2 19\n1 19\n2 20\n2 19\n1 20\n1 20\n1 20", "output": "217845625\n155043463\n92324092\n774281765\n217845625\n92324092\n774281765\n155043463\n92324092\n155043463\n217845625\n92324092\n155043463\n217845625\n774281765\n774281765\n774281765"}], "language": "cpp"}, "prompt": "D. REQ\ntime limit per test\n3 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nToday on a math lesson the teacher told Vovochka that the Euler function of a positive integer phi(n) is an arithmetic function that counts the positive integers less than or equal to n that are relatively prime to n. The number 1 is coprime to all the positive integers and phi(1) = 1.\nNow the teacher gave Vovochka an array of n positive integers a1, a2, ..., an and a task to process q queries li ri - to calculate and print  modulo 109 + 7. As it is too hard for a second grade school student, you've decided to help Vovochka.\nInput\nThe first line of the input contains number n (1 <= n <= 200 000) - the length of the array given to Vovochka. The second line contains n integers a1, a2, ..., an (1 <= ai <= 106).\nThe third line contains integer q (1 <= q <= 200 000) - the number of queries. Next q lines contain the queries, one per line. Each query is defined by the boundaries of the segment li and ri (1 <= li <= ri <= n).\nOutput\nPrint q numbers - the value of the Euler function for each query, calculated modulo 109 + 7.\n", "generation": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nlong long phi(long long n) {\n  long long i, phi = 1, primes[n];\n  for (i = 2; i * i <= n; i++) {\n    if (primes[i] == 0) {\n      for (long long j = i; j <= n; j += i) {\n        primes[j] = 1;\n      }\n    }\n  }\n  for (i = 1; i <= n; i++) {\n    if (primes[i] == 0) {\n      phi++;\n    }\n  }\n  return phi;\n}\n\nint main() {\n  long long n, q, i, a[200001], l, r, ans;\n  cin >> n;\n  cin >> a[0];\n  for (i = 1; i <= n; i++) {\n    cin >> a[i];\n  }\n  cin >> q;\n  for (i = 0; i < q; i++) {\n    cin >> l;\n    cin >> r;\n    ans = phi(r) - phi(l - 1);\n    cout << ans << endl;\n  }\n  return 0;\n}\n", "result": "failed: wrong answer @ testcase 1", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/81", "completion_id": 0, "test_suite": {"code": "int findMinDoorArea(int n, int k, vector<vector<int>>& plan) {\n  vector<int> x(n);\n  vector<int> y(n);\n  for (int i = 0; i < n; i++) {\n    x[i] = plan[i][0];\n    y[i] = plan[i][1];\n  }\n\n  sort(x.begin(), x.end());\n  sort(y.begin(), y.end());\n\n  int area = INT_MAX;\n  int i = 0;\n  int j = 0;\n  while (i < n && j < n) {\n    int currentArea = (x[j] - x[i]) * (y[j] - y[i]) + 1;\n    if (currentArea < area) {\n      area = currentArea;\n    }\n    i++;\n    j++;\n  }\n\n  return area;\n}\n", "testcases": [{"input": "3 1\n1 1 2 2\n2 2 3 3\n3 3 4 4", "output": "1"}, {"input": "4 1\n1 1 2 2\n1 9 2 10\n9 9 10 10\n9 1 10 2", "output": "64"}, {"input": "3 0\n1 1 2 2\n1 1 1000000000 1000000000\n1 3 8 12", "output": "249999999000000001"}, {"input": "11 8\n9 1 11 5\n2 2 8 12\n3 8 23 10\n2 1 10 5\n7 1 19 5\n1 8 3 10\n1 5 3 9\n1 2 3 4\n1 2 3 4\n4 2 12 16\n8 5 12 9", "output": "4"}, {"input": "20 5\n1 12 21 22\n9 10 15 20\n10 12 12 20\n1 1 25 29\n5 10 21 22\n4 9 16 25\n12 10 14 24\n3 3 19 27\n3 4 23 28\n9 1 11 31\n9 14 17 18\n8 12 14 20\n8 11 18 19\n12 3 14 29\n7 8 13 22\n6 4 16 30\n11 3 13 27\n9 16 15 18\n6 13 14 21\n9 12 15 22", "output": "4"}, {"input": "1 0\n1 1 100 100", "output": "1"}, {"input": "1 0\n1 1 2 2", "output": "1"}, {"input": "1 0\n1 1 4 4", "output": "1"}, {"input": "2 1\n1 1 1000000000 1000000000\n100 200 200 300", "output": "1"}, {"input": "2 1\n1 1 1000000000 2\n1 1 2 1000000000", "output": "1"}, {"input": "2 1\n1 1 999999999 1000000000\n1 1 1000000000 999999999", "output": "1"}, {"input": "1 0\n1 1 1000000000 1000000000", "output": "1"}, {"input": "1 0\n100 300 400 1000", "output": "1"}, {"input": "1 0\n2 2 3 3", "output": "1"}], "language": "cpp"}, "prompt": "C. Edo and Magnets\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nEdo has got a collection of n refrigerator magnets!\nHe decided to buy a refrigerator and hang the magnets on the door. The shop can make the refrigerator with any size of the door that meets the following restrictions: the refrigerator door must be rectangle, and both the length and the width of the door must be positive integers.\nEdo figured out how he wants to place the magnets on the refrigerator. He introduced a system of coordinates on the plane, where each magnet is represented as a rectangle with sides parallel to the coordinate axes.\nNow he wants to remove no more than k magnets (he may choose to keep all of them) and attach all remaining magnets to the refrigerator door, and the area of   the door should be as small as possible. A magnet is considered to be attached to the refrigerator door if its center lies on the door or on its boundary. The relative positions of all the remaining magnets must correspond to the plan.\nLet us explain the last two sentences. Let's suppose we want to hang two magnets on the refrigerator. If the magnet in the plan has coordinates of the lower left corner (x1, y1) and the upper right corner (x2, y2), then its center is located at (, ) (may not be integers). By saying the relative position should correspond to the plan we mean that the only available operation is translation, i.e. the vector connecting the centers of two magnets in the original plan, must be equal to the vector connecting the centers of these two magnets on the refrigerator.\nThe sides of the refrigerator door must also be parallel to coordinate axes.\nInput\nThe first line contains two integers n and k (1 <= n <= 100 000, 0 <= k <= min(10, n - 1)) - the number of magnets that Edo has and the maximum number of magnets Edo may not place on the refrigerator.\nNext n lines describe the initial plan of placing magnets. Each line contains four integers x1, y1, x2, y2 (1 <= x1 < x2 <= 109, 1 <= y1 < y2 <= 109) - the coordinates of the lower left and upper right corners of the current magnet. The magnets can partially overlap or even fully coincide.\nOutput\nPrint a single integer - the minimum area of the door of refrigerator, which can be used to place at least n - k magnets, preserving the relative positions.\n", "generation": "int findMinDoorArea(int n, int k, vector<vector<int>>& plan) {\n  vector<int> x(n);\n  vector<int> y(n);\n  for (int i = 0; i < n; i++) {\n    x[i] = plan[i][0];\n    y[i] = plan[i][1];\n  }\n\n  sort(x.begin(), x.end());\n  sort(y.begin(), y.end());\n\n  int area = INT_MAX;\n  int i = 0;\n  int j = 0;\n  while (i < n && j < n) {\n    int currentArea = (x[j] - x[i]) * (y[j] - y[i]) + 1;\n    if (currentArea < area) {\n      area = currentArea;\n    }\n    i++;\n    j++;\n  }\n\n  return area;\n}\n", "result": "failed: compilation error: test.cpp:1:35: error: \u2018vector\u2019 has not been declared\n    1 | int findMinDoorArea(int n, int k, vector<vector<int>>& plan) {\n      |                                   ^~~~~~\ntest.cpp:1:41: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018<\u2019 token\n    1 | int findMinDoorArea(int n, int k, vector<vector<int>>& plan) {\n      |                                         ^\ntest.cpp: In function \u2018int findMinDoorArea(int, int, int)\u2019:\ntest.cpp:2:3: error: \u2018vector\u2019 was not declared in this scope\n    2 |   vector<int> x(n);\n      |   ^~~~~~\ntest.cpp:2:10: error: expected primary-expression before \u2018int\u2019\n    2 |   vector<int> x(n);\n      |          ^~~\ntest.cpp:3:10: error: expected primary-expression before \u2018int\u2019\n    3 |   vector<int> y(n);\n      |          ^~~\ntest.cpp:5:5: error: \u2018x\u2019 was not declared in this scope\n    5 |     x[i] = plan[i][0];\n      |     ^\ntest.cpp:5:12: error: \u2018plan\u2019 was not declared in this scope\n    5 |     x[i] = plan[i][0];\n      |            ^~~~\ntest.cpp:6:5: error: \u2018y\u2019 was not declared in this scope\n    6 |     y[i] = plan[i][1];\n      |     ^\ntest.cpp:9:8: error: \u2018x\u2019 was not declared in this scope\n    9 |   sort(x.begin(), x.end());\n      |        ^\ntest.cpp:9:3: error: \u2018sort\u2019 was not declared in this scope; did you mean \u2018short\u2019?\n    9 |   sort(x.begin(), x.end());\n      |   ^~~~\n      |   short\ntest.cpp:10:8: error: \u2018y\u2019 was not declared in this scope\n   10 |   sort(y.begin(), y.end());\n      |        ^\ntest.cpp:12:14: error: \u2018INT_MAX\u2019 was not declared in this scope\n   12 |   int area = INT_MAX;\n      |              ^~~~~~~\ntest.cpp:1:1: note: \u2018INT_MAX\u2019 is defined in header \u2018<climits>\u2019; did you forget to \u2018#include <climits>\u2019?\n  +++ |+#include <climits>\n    1 | int findMinDoorArea(int n, int k, vector<vector<int>>& plan) {\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/82", "completion_id": 0, "test_suite": {"code": "string cutLine(string& s, int k) {\n  vector<string> v(k);\n  string t = \"\";\n  int i = 0;\n  for (int j = 0; j < s.length(); ++j) {\n    v[i] += s[j];\n    if (i == k - 1) {\n      i++;\n    }\n  }\n  sort(v.begin(), v.end());\n  for (string str : v) {\n    t += str;\n  }\n  return t;\n}\n", "testcases": [{"input": "bababa\n1", "output": "ababab"}, {"input": "abacabadabacaba\n4", "output": "aababacabacabad"}, {"input": "z\n1", "output": "z"}, {"input": "bbbbaababbbbabaaaaabaabbaababbbabbabaaabbabbbbaaaa\n10", "output": "aaaaababbbbabaabbbbaaaabbbbabbaaababbabbbabaabbaab"}, {"input": "ebaccagfdgggcbfgeggccfccbccfgbaedaaecafceaaegaef\n25", "output": "aadeabgfccbccfccggegfbcgggdfgaccabeaaecfaceageef"}, {"input": "abbabaabaabaaabbaaabaabbbbbaabbaabbabbabaabbbbbbbbaababaaabbaaaaaaabbbaabaaaaabaabbabbbaabbbaaabbaababbbbaabaabaaaaabbabbabbbbaababbbbabaaaababbabbbbabaabaababbabaaabbabaabaaabbbabbbbaaaabbbbbabbaababaabbabaaaabbbbbabaabaabbababbaaabaabbaaaabbbbbabbabbabbababaaaabbabaaaaabbbaaabbaabababbbaaaabbabbbabbabaaabbbbbbabbababaabbababaabbaaaaaaaabbaaaabbabbbbbbbaabaabbabbaaabaaaaababbbbbbbbbaabaaabaaaababbaabbbaabbbbabaaababbbabbbbbbaabaabbbbbaabaabbaababbaabbbbababaaaabaabbbbaaababaaaabaaaaaabaababaaaa\n100", "output": "aaaaaaaaabbaabababbaabababbabbbbbbaaababbabbbabbaaaabbbababaabbaaabbbaaaaababbaaaabababbabbabbabbbbbaaaabbaabaaabbababbaabaababbbbbaaaababbaababaabbabbbbbaaaabbbbabbbaaabaababbaaababbabaabaababbbbabbabaaaababbbbabaabbbbabbabbaaaaabaabaabbbbabaabbaaabbbaabbbabbaabaaaaabaabbbaaaaaaabbaaababaabbbbbbbbaababbabbaabbaabbbbbaabaaabbaaabaabaababbaaaaaabaaaababaaabbbbaabaaaabababbbbaabbabaabbaabaabbbbbaabaabbbbbbabbbabaaababbbbaabbbaabbabaaaabaaabaabbbbbbbbbabaaaaabaaabbabbaabaabbbbbbbabbaaaabbaaaababaab"}, {"input": "abccjcjfei\n3", "output": "abcccjiefj"}, {"input": "acgbggedcggdedffgddbdbfedaeaffebdbbgacgadfecfegbgefaeeedfbefdebbfbgddadeabdgbbbeedgcgcfadfdedcaeedgdddgabddaaacbddaedefbggggdaafgdfbedbfffffcfbaegedaafffededdfgdfccfgaccedgbcbcagdbcgbeffeddegdedegdgacbcgfadebdaafgdbacdfedggbcdaecbdbcebadebedbgddfcdaggbgaaefebfagfgacgdaddbadccbffabeggedfecfdbeebedgfcacfbegeaeceefecfeafbgbfeegfageddgfccecggfgebdggeeadgabdggagcceefggcbegcdedfdffabeffdfeaabaecccfgagfgbfcddcdeeaccfacaffefcfbegeddfeacfbfdabcceacfacbgbdaaddgggefbffeccbdbgeeddfcbaaddbddgaedegbdffefacc\n250", "output": "aaaaddbagdddgdeeacdedfdafcgcgdeebbbgdbaedaddgbfbbedfebfdeeeafegbgefcefdagcagbbdbeffaeadefbdbddgffdedggcdeggbgcaabcfddeegbdbcceffbfegggddaadbgbcafcaeccbadfbfcaefddegebfcfeffacafccaeedcddcfbgfgagfccceabaaefdffebaffdfdedcgebcggfeeccgaggdbagdaeeggdbegfggceccfgddegafgeefbgbfaefcefeeceaegebfcacfgdebeebdfcefdeggebaffbccdabddadgcagfgafbefeaagbggadcfddgbdebedabecbdbceadcbggdefdcabdgfaadbedafgcbcagdgededgeddeffebgcbdgacbcbgdeccagfccfdgfddedefffaadegeabfcfffffbdebfdgfaadggggbfedeaddbcafeffdbgedeagddbddcc"}, {"input": "aaaabaaabbaaabaabaabbaabababababababababababbbbbb\n10", "output": "aaaaaaabaaabbaabaabaabbababababababababababbbbbbb"}, {"input": "aaaaaaaababaaabaabaabbbbaabababababababbabbbbbbb\n22", "output": "aaaaaaaaaaababaabaabaabbbbabababababababbbbbbbbb"}, {"input": "caacbcbedbaheebgbhebacdchcchfedbfgadbhbdahdg\n3", "output": "aacabdebcbcgdhadbhbdagfbdefhcchcdcabehbgbeeh"}, {"input": "aaiaaichejaafcjcafahabbhgbccjcjchjdeeefjeefiggiijj\n49", "output": "aaaaiaajehciacjcfafahbbbghcccjcjdjheeeeejffggiiijj"}, {"input": "addefggjjklmopqrrstuvwyz\n4", "output": "addefggjjklmopqrrstuvwyz"}, {"input": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaabaaaabaaaabbaabaaaabaaabaaabaaabaaabaaabaaabaaabbaaabbbaaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaababaababaabbaabbaabbaabbaabbaabbaabbbbabbaabbbaabbbaabbbbaababababababababababababababababababababababababababababababababababababababababababababababababababababababababbababbabbabbabbabbabbabbabbabbabbabbabbabbabbabbbabbbabbbabbbabbbabbbbabbbbabbbbabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n100", "output": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaabaaaabaaaabaabbaaabaaabaaabaaabaaabaaabaaabaaabbaaabbbaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaababaababaabbaabbaabbaabbaabbaabbaabbabbbbaabbbaabbbaabbbbabababababababababababababababababababababababababababababababababababababababababababababababababababababababababbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbbabbbabbbabbbabbbabbbbabbbbabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}, {"input": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaabbaaaaabaaaabaaaabbabaaaabaaabaaabaaabaaabaaababaaabbaaabbbaaabbbaaabaabaabaabaabaabaabaabaabaabaabaababaababaabbaabbaabbaabbaabbaabbbaabbbaabbbaababbabbbbaabababababababababababababababababababababababababababababababababababababababababababababababababababababababababbababbababbababbababbbababbabbabbabbabbabbabbabbabbabbabbabbabbbabbbabbbabbbbabbbbbbabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n247", "output": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaabbaaaabaaaabaaaababbaaabaaabaaabaaabaaabaaababaaabbaaabbbaaabbbaabaabaabaabaabaabaabaabaabaabaabaababaababaabbaabbaabbaabbaabbaabbbaabbbaabbbaabbbbabbabababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbababbababbababbababbbabbabbabbabbabbabbabbabbabbabbabbabbabbbabbbabbbabbbbabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"}, {"input": "cbdecfbfhgdhcbaaadhgfgghbfgfeafdfcffhfbhacbccfgcgbegfgbfagcddhhdbdehegdhhcfggcceeffegefheeddchbegehdafehebhbehdbdhfghegbafaabhcbhdeeehgabaacgchfcfcdhfhheeeeeaadbbggbgcdfdhafcfabgheddeghhacfhedbecebdhfhacaefagdebcafdfbahegfaedgfdehcgdfgdbfcbfehdffdfahabdcghdhfhhbfbcffaceaebfffhhbbeddbccaaefefafgfdaabhebdcafacfggfcegafcehbbhccgcfghcefadcegfffcfbfehhhdfdhchhceaefcfadfhhfhgehfhebcfgcfhbafedefadhcbfaefeagchdfdadedaacdhgeecachacfbbaddhccahfcccheghacgdcccadafeecebabgfbbbbeddebgedhcgfffcdbegfafbfa\n3", "output": "aaabchdghfbfcedbcaabagheeedhbchbaafabgehgfhdbdhebhbehefadhegebhcddeehfegeffeeccggfchhdgehedbdhhddcgafbgfgebgcgfccbcahbfhffcfdfaefgfbhggfghdafbfafgebdcfffgchdegbeddebbbbfgbabeceefadacccdgcahgehcccfhacchddabbfcahcaceeghdcaadedadfdhcgaefeafbchdafedefabhfcgfcbehfheghfhhfdafcfeaechhchdfdhhhefbfcfffgecdafechgfcgcchbbhecfagecfggfcafacdbehbaadfgfafefeaaccbddebbhhfffbeaecaffcbfbhhfhdhgcdbahafdffdhefbcfbdgfdgchedfgdeafgehabfdfacbedgafeacahfhdbecebdehfcahhgeddehgbafcfahdfdcgbggbbdaaeeeeehhfhdcfcfhcgc"}, {"input": "aaaaaaaaaaaaaacaaegeaafdheaaggaaebacacbcaccacdcahicadajdaeaeadeadfaifeafafagadbffabbhjegaigahahajecchaihaihacjaihaiaiehiajajaeejajgjagiddhjabbbbbbbbbbbbbdbbjebbcbcgccbieicbdbgdbjdbgjdbebebebebgfifebciebfbfbdfbifbchfdgbggbfhbihbibjfibjbjbjbgjbccccccccececfcfcgjdhcfcgcgcgcdgcdgcjdhgchchchcjjhcicfhjcfghjcddddddddddedededfedefdgdgdfggdgfhdhhdidididjdjdeeeeeeeeeeeeeieefefefeggfejfegegegehgehiejegjejjeffffffffffffffhfifjfjfhjfggggggggggggggggghggiggjghhhhhhhhhhhhjhhihihjhjhjhiiiiiiiiiiiijjjjjjjjjjjjjj\n499", "output": "aaaaaaaaaaaaaaaacaaegeaaehdfaaggabeacacbcaccacdcacihadadjaeaeaedaefiafdafafaffbdagagejhbbagiahahahccejahiahiahiajcaiaiheiajajajeeajgjajhddigbbbbbbbbbbbbbbbdbbejbcbccgcbcieibdbdgbdjbdjgbebebebebefifgbeicbfbfbfdbfibgdfhcbggbhfbhibibifjbjbjbjbjgcccccccccececfcfcfchdjgcgcgcgcgdcgdcghdjchchchchjjcicjhfcjhgfdddddddddddedededefdfedgdgdggfdhfgdhhdidididjdjeeeeeeeeeeeeeeeiefefefefggefjegegegegheihejejgejjfffffffffffffffhfifjfjfjhggggggggggggggggggghggigjhhhhhhhhhhhhhhjhihihjhjhjiiiiiiiiiiiijjjjjjjjjjjjjj"}, {"input": "aaaaaaaaaaabbbbccccccccdddddddddddddeeeeeeefffffffffffffffffgggggggghhhhhhhhhhhiiiiiiiiiijjjjjjjjkkkkkkkkkklllllllllmmmmmmmmmmmnnnnnnnnoooooooooooppppppppppqqqqqqqqqqrrrrrrsssssssssttttttuuuuuuuuuuvvvvvvvwwwwwwwwwwwwwxxxxxxxyyyyyyyyzzzzzzzzzzzzzzzzz\n4", "output": "aaaaaaaaaaabbbbccccccccdddddddddddddeeeeeeefffffffffffffffffgggggggghhhhhhhhhhhiiiiiiiiiijjjjjjjjkkkkkkkkkklllllllllmmmmmmmmmmmnnnnnnnnoooooooooooppppppppppqqqqqqqqqqrrrrrrsssssssssttttttuuuuuuuuuuvvvvvvvwwwwwwwwwwwwwxxxxxxxyyyyyyyyzzzzzzzzzzzzzzzzz"}, {"input": "ebdgjibhhcabbbeafbjjghbheabbibgcbdfcdbgfdbfhiiebhbgfdbfgfgiebcejhbfjhcchgeeijiciidgdhiijej\n5", "output": "achhbijgdbeaebbbaehbhgjjbfbbibgcbdfcdbgfdbfhiiebhbgfdbfgfgiebcejejiihdgdiicijieeghcchjfbhj"}, {"input": "iefjgjghhi\n3", "output": "eifihhgjgj"}, {"input": "ecdffdaaiedfabebaffihaefchbagfhbeccaiffcbeahggiajbhcieijfaheiaiddjahfjafjfgdghbddhccggdcgjfchicjjid\n5", "output": "aadffdceabebafdeiabhcfeahiffaccebhfgdijjcihcfjgcdggcchddbhgdgfjfajfhajddiaiehafjieichbjaigghaebcffi"}, {"input": "jdjgbbaiiafibedceejdaiiddbaifccibfagdiafibbjffaibagebeiahciahbcibagagjhjjgcccddadfdfbfggafiiidhhdieaibhceghggcffgfdhdbeehcifaddeggjjabhfeggfjdcebjcbejhdbcdeechbddfjbjfchhhghcdegjfceiciicfhdjchhjcdefef\n10", "output": "abbgjdjabddiiadjeecdebifaiiabiaffjbbifaidgafbiccfiabicbhaichaiebegaddcccgjjhjgagaeidhhdiiifaggfbfdfdaficheebdhdfgffcgghgechbiajjggeddbcjbecdjfggefhbejhdbcdeechbddfjbjfchhhghcdegjfceiciicfhdjchhjcdefef"}, {"input": "jdjhhdhjbjcdfbgegfbdbjhdgbfbjebigjcddgccecejjjefcdhefjffdbfbjbhijjjfdbbjicgfjdceghcfcgbghechfdcjjgcdjhgghjfbdifgdfbcdbcdhidhhgdhfcejihgbdedbjdgfgjfbigccgjcfchghiheeihehdecbehbddfjbccidifhbcbjigfjcfjbdccbiejcedieiebedfiihieah\n3", "output": "aeihiifdebeieidecjeibccdbjfcjfgijbcbhfidiccbjfddbhebcedhehieehihghcfcjgccgibfjgfgdjbdedbghijecfhdghhdihdcbdcbfdgfidbfjhgghjdcgjjcdfhcehgbgcfchgecdjfgcijbbdfjjjihbjbfbdffjfehdcfejjjececcgddcjgibejbfbgdhjbdbfgegbfdcjbjhdhhjdjh"}], "language": "cpp"}, "prompt": "E. Cutting the Line\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nYou are given a non-empty line s and an integer k. The following operation is performed with this line exactly once:\nA line is split into at most k non-empty substrings, i.e. string s is represented as a concatenation of a set of strings s = t1 + t2 + ... + tm, 1 <= m <= k.\nSome of strings ti are replaced by strings tir, that is, their record from right to left.\nThe lines are concatenated back in the same order, we get string s' = t'1t'2... t'm, where t'i equals ti or tir.\nYour task is to determine the lexicographically smallest string that could be the result of applying the given operation to the string s.\nInput\nThe first line of the input contains string s (1 <= |s| <= 5 000 000), consisting of lowercase English letters. The second line contains integer k (1 <= k <= |s|) - the maximum number of parts in the partition.\nOutput\nIn the single line print the lexicographically minimum string s' which can be obtained as a result of performing the described operation.\n", "generation": "string cutLine(string& s, int k) {\n  vector<string> v(k);\n  string t = \"\";\n  int i = 0;\n  for (int j = 0; j < s.length(); ++j) {\n    v[i] += s[j];\n    if (i == k - 1) {\n      i++;\n    }\n  }\n  sort(v.begin(), v.end());\n  for (string str : v) {\n    t += str;\n  }\n  return t;\n}\n", "result": "failed: compilation error: test.cpp:1:1: error: \u2018string\u2019 does not name a type\n    1 | string cutLine(string& s, int k) {\n      | ^~~~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/83", "completion_id": 0, "test_suite": {"code": "int main() {\n  int n, k;\n  cin >> n;\n  cin >> k;\n\n  vector<int> a(n / k);\n  vector<int> b(n / k);\n  cin >> a[0];\n  for (int i = 1; i < a.size(); i++) {\n    cin >> a[i];\n  }\n  cin >> b[0];\n  for (int i = 1; i < b.size(); i++) {\n    cin >> b[i];\n  }\n\n  long long ans = 0;\n  for (int i = 0; i < a.size(); i++) {\n    long long sum = 0;\n    for (int j = 0; j < k; j++) {\n      int num = b[j] - a[i] + 1;\n      sum += num * num;\n    }\n    ans += sum;\n  }\n\n  cout << ans % (109 + 7) << endl;\n  return 0;\n}\n", "testcases": [{"input": "6 2\n38 56 49\n7 3 4", "output": "8"}, {"input": "8 2\n1 22 3 44\n5 4 3 2", "output": "32400"}, {"input": "2 1\n9 9\n9 9", "output": "1"}, {"input": "2 1\n9 9\n0 9", "output": "1"}, {"input": "4 1\n4 3 2 1\n1 2 3 4", "output": "540"}, {"input": "18 9\n2 3\n0 4", "output": "505000007"}, {"input": "4 4\n1122\n2", "output": "8"}, {"input": "10 5\n8378 11089\n7 5", "output": "99"}, {"input": "10 5\n52057 11807\n0 1", "output": "8"}, {"input": "10 1\n3 1 1 4 8 7 5 6 4 1\n0 0 0 5 5 6 8 8 4 0", "output": "209952"}, {"input": "100 4\n388 2056 122 1525 2912 1465 3066 257 5708 3604 3039 6183 3035 626 1389 5393 3321 3175 2922 2024 3837 437 5836 2376 1599\n6 5 5 2 9 6 8 3 5 0 6 0 1 8 5 3 5 2 3 0 5 6 6 7 3", "output": "652599557"}, {"input": "100 1\n5 3 1 5 6 2 4 8 3 3 1 1 2 8 2 3 8 2 5 2 6 2 3 5 2 1 2 1 2 8 4 3 3 5 1 4 2 2 2 5 8 2 2 6 2 9 2 4 1 8 1 5 5 6 6 1 2 7 3 3 4 2 4 1 2 6 6 4 9 4 3 2 3 8 2 3 1 4 1 4 1 3 5 3 5 5 2 3 4 1 1 8 1 5 6 9 4 2 5 1\n6 0 4 5 3 1 0 7 5 3 9 4 5 4 0 2 1 6 2 2 4 3 1 9 5 9 2 2 6 8 6 5 9 6 4 9 9 7 5 4 5 6 0 3 2 0 8 0 3 9 5 3 8 0 9 3 6 2 9 5 9 3 2 2 2 2 0 8 1 2 9 0 9 8 0 3 2 0 7 9 4 3 7 2 3 1 8 9 8 2 6 0 3 2 9 8 9 2 3 4", "output": "27157528"}, {"input": "100 5\n5302 4362 11965 14930 11312 33797 17413 17850 79562 17981 28002 40852 173 23022 55762 13013 79597 29597 31944 32384\n9 8 7 0 6 6 7 7 5 9 1 3 4 8 7 1 1 6 4 4", "output": "885507108"}, {"input": "1 1\n2\n0", "output": "4"}], "language": "cpp"}, "prompt": "B. Pasha and Phone\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nPasha has recently bought a new phone jPager and started adding his friends' phone numbers there. Each phone number consists of exactly n digits.\nAlso Pasha has a number k and two sequences of length n / k (n is divisible by k) a1, a2, ..., an / k and b1, b2, ..., bn / k. Let's split the phone number into blocks of length k. The first block will be formed by digits from the phone number that are on positions 1, 2,..., k, the second block will be formed by digits from the phone number that are on positions k + 1, k + 2, ..., 2.k and so on. Pasha considers a phone number good, if the i-th block doesn't start from the digit bi and is divisible by ai if represented as an integer.\nTo represent the block of length k as an integer, let's write it out as a sequence c1, c2,...,ck. Then the integer is calculated as the result of the expression c1.10k - 1 + c2.10k - 2 + ... + ck.\nPasha asks you to calculate the number of good phone numbers of length n, for the given k, ai and bi. As this number can be too big, print it modulo 109 + 7.\nInput\nThe first line of the input contains two integers n and k (1 <= n <= 100 000, 1 <= k <= min(n, 9)) - the length of all phone numbers and the length of each block, respectively. It is guaranteed that n is divisible by k.\nThe second line of the input contains n / k space-separated positive integers - sequence a1, a2, ..., an / k (1 <= ai < 10k).\nThe third line of the input contains n / k space-separated positive integers - sequence b1, b2, ..., bn / k (0 <= bi <= 9).\nOutput\nPrint a single integer - the number of good phone numbers of length n modulo 109 + 7.\n", "generation": "int main() {\n  int n, k;\n  cin >> n;\n  cin >> k;\n\n  vector<int> a(n / k);\n  vector<int> b(n / k);\n  cin >> a[0];\n  for (int i = 1; i < a.size(); i++) {\n    cin >> a[i];\n  }\n  cin >> b[0];\n  for (int i = 1; i < b.size(); i++) {\n    cin >> b[i];\n  }\n\n  long long ans = 0;\n  for (int i = 0; i < a.size(); i++) {\n    long long sum = 0;\n    for (int j = 0; j < k; j++) {\n      int num = b[j] - a[i] + 1;\n      sum += num * num;\n    }\n    ans += sum;\n  }\n\n  cout << ans % (109 + 7) << endl;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> n;\n      |   ^~~\ntest.cpp:6:3: error: \u2018vector\u2019 was not declared in this scope\n    6 |   vector<int> a(n / k);\n      |   ^~~~~~\ntest.cpp:6:10: error: expected primary-expression before \u2018int\u2019\n    6 |   vector<int> a(n / k);\n      |          ^~~\ntest.cpp:7:10: error: expected primary-expression before \u2018int\u2019\n    7 |   vector<int> b(n / k);\n      |          ^~~\ntest.cpp:8:10: error: \u2018a\u2019 was not declared in this scope\n    8 |   cin >> a[0];\n      |          ^\ntest.cpp:12:10: error: \u2018b\u2019 was not declared in this scope\n   12 |   cin >> b[0];\n      |          ^\ntest.cpp:27:3: error: \u2018cout\u2019 was not declared in this scope\n   27 |   cout << ans % (109 + 7) << endl;\n      |   ^~~~\ntest.cpp:27:30: error: \u2018endl\u2019 was not declared in this scope\n   27 |   cout << ans % (109 + 7) << endl;\n      |                              ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/84", "completion_id": 0, "test_suite": {"code": "int solve() {\n  int n, m;\n  cin >> n;\n  cin >> m;\n\n  vector<string> v(n);\n  for (int i = 0; i < n; i++) {\n    cin >> v[i];\n  }\n\n  int ans = 0;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (v[i][j] == '1') {\n        ans++;\n      }\n    }\n  }\n\n  cout << ans;\n  return 0;\n}\n", "testcases": [{"input": "2 2\n0 0 0 1\n1 0 1 1", "output": "3"}, {"input": "1 3\n1 1 0 1 0 0", "output": "2"}, {"input": "3 3\n1 1 1 1 1 1\n1 1 0 1 1 0\n1 0 0 0 1 1", "output": "8"}, {"input": "1 5\n1 0 1 1 1 0 1 1 1 1", "output": "5"}, {"input": "100 100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1...", "output": "10000"}, {"input": "1 100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "output": "99"}, {"input": "1 100\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "output": "6"}, {"input": "1 100\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", "output": "0"}, {"input": "2 100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1...", "output": "200"}, {"input": "100 2\n1 1 1 1\n0 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 0 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 0 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 0 1\n1 1 1 1\n1 1 1 1\n1 1 0 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n0 1 1 1\n1 1 1 1\n1 1 1 1\n0 1 1 1\n1 1 1 0\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 0 1\n...", "output": "200"}, {"input": "1 1\n0 0", "output": "0"}, {"input": "1 1\n0 1", "output": "1"}, {"input": "1 1\n1 0", "output": "1"}, {"input": "1 1\n1 1", "output": "1"}], "language": "cpp"}, "prompt": "A. Vitaly and Night\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nOne day Vitaly was going home late at night and wondering: how many people aren't sleeping at that moment? To estimate, Vitaly decided to look which windows are lit in the house he was passing by at that moment.\nVitaly sees a building of n floors and 2.m windows on each floor. On each floor there are m flats numbered from 1 to m, and two consecutive windows correspond to each flat. If we number the windows from 1 to 2.m from left to right, then the j-th flat of the i-th floor has windows 2.j - 1 and 2.j in the corresponding row of windows (as usual, floors are enumerated from the bottom). Vitaly thinks that people in the flat aren't sleeping at that moment if at least one of the windows corresponding to this flat has lights on.\nGiven the information about the windows of the given house, your task is to calculate the number of flats where, according to Vitaly, people aren't sleeping.\nInput\nThe first line of the input contains two integers n and m (1 <= n, m <= 100) - the number of floors in the house and the number of flats on each floor respectively.\nNext n lines describe the floors from top to bottom and contain 2.m characters each. If the i-th window of the given floor has lights on, then the i-th character of this line is '1', otherwise it is '0'.\nOutput\nPrint a single integer - the number of flats that have lights on in at least one window, that is, the flats where, according to Vitaly, people aren't sleeping.\n", "generation": "int solve() {\n  int n, m;\n  cin >> n;\n  cin >> m;\n\n  vector<string> v(n);\n  for (int i = 0; i < n; i++) {\n    cin >> v[i];\n  }\n\n  int ans = 0;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < m; j++) {\n      if (v[i][j] == '1') {\n        ans++;\n      }\n    }\n  }\n\n  cout << ans;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int solve()\u2019:\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> n;\n      |   ^~~\ntest.cpp:6:3: error: \u2018vector\u2019 was not declared in this scope\n    6 |   vector<string> v(n);\n      |   ^~~~~~\ntest.cpp:6:10: error: \u2018string\u2019 was not declared in this scope\n    6 |   vector<string> v(n);\n      |          ^~~~~~\ntest.cpp:6:18: error: \u2018v\u2019 was not declared in this scope\n    6 |   vector<string> v(n);\n      |                  ^\ntest.cpp:20:3: error: \u2018cout\u2019 was not declared in this scope\n   20 |   cout << ans;\n      |   ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/86", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> solve(int n, vector<int> &x) {\n  vector<int> v(n);\n  for(int i = 0; i < n; i++) {\n    v[i] = abs(x[i]) + 1;\n  }\n  sort(v.begin(), v.end());\n  return v;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  vector<int> x(n);\n  for(int i = 0; i < n; i++) {\n    cin >> x[i];\n  }\n  vector<int> d = solve(n, x);\n  cout << d[0] << endl;\n  return 0;\n}\n", "testcases": [{"input": "6\n0 1 3 7 15 31", "output": "7"}, {"input": "2\n73 37", "output": "36"}, {"input": "2\n0 1000000000", "output": "1000000000"}, {"input": "8\n729541013 135019377 88372488 319157478 682081360 558614617 258129110 790518782", "output": "470242129"}, {"input": "2\n0 1", "output": "1"}, {"input": "8\n552283832 997699491 89302459 301640204 288141798 31112026 710831619 862166501", "output": "521171806"}, {"input": "4\n0 500000000 500000001 1000000000", "output": "500000000"}, {"input": "18\n515925896 832652240 279975694 570998878 28122427 209724246 898414431 709461320 358922485 439508829 403574907 358500312 596248410 968234748 187793884 728450713 30350176 528924900", "output": "369950401"}, {"input": "20\n713900269 192811911 592111899 609607891 585084800 601258511 223103775 876894656 751583891 230837577 971499807 312977833 344314550 397998873 558637732 216574673 913028292 762852863 464376621 61315042", "output": "384683838"}, {"input": "10\n805513144 38998401 16228409 266085559 293487744 471510400 138613792 649258082 904651590 244678415", "output": "277259335"}, {"input": "6\n0 166666666 333333333 499999998 666666665 833333330", "output": "499999997"}, {"input": "16\n1 62500001 125000001 187500000 250000000 312500000 375000000 437500001 500000000 562500000 625000000 687500001 750000001 812500002 875000002 937500000", "output": "499999999"}, {"input": "12\n5 83333336 166666669 250000001 333333336 416666670 500000004 583333336 666666667 750000001 833333334 916666671", "output": "499999998"}, {"input": "20\n54 50000046 100000041 150000049 200000061 250000039 300000043 350000054 400000042 450000045 500000076 550000052 600000064 650000065 700000055 750000046 800000044 850000042 900000052 950000054", "output": "499999988"}], "language": "cpp"}, "prompt": "C. Warrior and Archer\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nIn the official contest this problem has a different statement, for which jury's solution was working incorrectly, and for this reason it was excluded from the contest. This mistake have been fixed and the current given problem statement and model solution corresponds to what jury wanted it to be during the contest.\nVova and Lesha are friends. They often meet at Vova's place and compete against each other in a computer game named The Ancient Papyri: Swordsink. Vova always chooses a warrior as his fighter and Leshac chooses an archer. After that they should choose initial positions for their characters and start the fight. A warrior is good at melee combat, so Vova will try to make the distance between fighters as small as possible. An archer prefers to keep the enemy at a distance, so Lesha will try to make the initial distance as large as possible.\nThere are n (n is always even) possible starting positions for characters marked along the Ox axis. The positions are given by their distinct coordinates x1, x2, ..., xn, two characters cannot end up at the same position.\nVova and Lesha take turns banning available positions, Vova moves first. During each turn one of the guys bans exactly one of the remaining positions. Banned positions cannot be used by both Vova and Lesha. They continue to make moves until there are only two possible positions remaining (thus, the total number of moves will be n - 2). After that Vova's character takes the position with the lesser coordinate and Lesha's character takes the position with the bigger coordinate and the guys start fighting.\nVova and Lesha are already tired by the game of choosing positions, as they need to play it before every fight, so they asked you (the developer of the The Ancient Papyri: Swordsink) to write a module that would automatically determine the distance at which the warrior and the archer will start fighting if both Vova and Lesha play optimally.\nInput\nThe first line on the input contains a single integer n (2 <= n <= 200 000, n is even) - the number of positions available initially. The second line contains n distinct integers x1, x2, ..., xn (0 <= xi <= 109), giving the coordinates of the corresponding positions.\nOutput\nPrint the distance between the warrior and the archer at the beginning of the fight, provided that both Vova and Lesha play optimally.\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> solve(int n, vector<int> &x) {\n  vector<int> v(n);\n  for(int i = 0; i < n; i++) {\n    v[i] = abs(x[i]) + 1;\n  }\n  sort(v.begin(), v.end());\n  return v;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  vector<int> x(n);\n  for(int i = 0; i < n; i++) {\n    cin >> x[i];\n  }\n  vector<int> d = solve(n, x);\n  cout << d[0] << endl;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018std::vector<int> solve(int, std::vector<int>&)\u2019:\ntest.cpp:11:3: error: \u2018sort\u2019 was not declared in this scope; did you mean \u2018qsort\u2019?\n   11 |   sort(v.begin(), v.end());\n      |   ^~~~\n      |   qsort\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/87", "completion_id": 0, "test_suite": {"code": "int findMinDoorArea(int n, int k, vector<vector<int>>& plan) {\n  vector<int> x(n);\n  vector<int> y(n);\n  for (int i = 0; i < n; i++) {\n    x[i] = plan[i][0];\n    y[i] = plan[i][1];\n  }\n\n  sort(x.begin(), x.end());\n  sort(y.begin(), y.end());\n\n  int area = INT_MAX;\n  int i = 0;\n  int j = 0;\n  while (i < n && j < n) {\n    int currentArea = (x[j] - x[i]) * (y[j] - y[i]) + 1;\n    if (currentArea < area) {\n      area = currentArea;\n    }\n    i++;\n    j++;\n  }\n\n  return area;\n}\n", "testcases": [{"input": "3 1\n1 1 2 2\n2 2 3 3\n3 3 4 4", "output": "1"}, {"input": "4 1\n1 1 2 2\n1 9 2 10\n9 9 10 10\n9 1 10 2", "output": "64"}, {"input": "3 0\n1 1 2 2\n1 1 1000000000 1000000000\n1 3 8 12", "output": "249999999000000001"}, {"input": "11 8\n9 1 11 5\n2 2 8 12\n3 8 23 10\n2 1 10 5\n7 1 19 5\n1 8 3 10\n1 5 3 9\n1 2 3 4\n1 2 3 4\n4 2 12 16\n8 5 12 9", "output": "4"}, {"input": "20 5\n1 12 21 22\n9 10 15 20\n10 12 12 20\n1 1 25 29\n5 10 21 22\n4 9 16 25\n12 10 14 24\n3 3 19 27\n3 4 23 28\n9 1 11 31\n9 14 17 18\n8 12 14 20\n8 11 18 19\n12 3 14 29\n7 8 13 22\n6 4 16 30\n11 3 13 27\n9 16 15 18\n6 13 14 21\n9 12 15 22", "output": "4"}, {"input": "1 0\n1 1 100 100", "output": "1"}, {"input": "1 0\n1 1 2 2", "output": "1"}, {"input": "1 0\n1 1 4 4", "output": "1"}, {"input": "2 1\n1 1 1000000000 1000000000\n100 200 200 300", "output": "1"}, {"input": "2 1\n1 1 1000000000 2\n1 1 2 1000000000", "output": "1"}, {"input": "2 1\n1 1 999999999 1000000000\n1 1 1000000000 999999999", "output": "1"}, {"input": "1 0\n1 1 1000000000 1000000000", "output": "1"}, {"input": "1 0\n100 300 400 1000", "output": "1"}, {"input": "1 0\n2 2 3 3", "output": "1"}], "language": "cpp"}, "prompt": "E. Edo and Magnets\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nEdo has got a collection of n refrigerator magnets!\nHe decided to buy a refrigerator and hang the magnets on the door. The shop can make the refrigerator with any size of the door that meets the following restrictions: the refrigerator door must be rectangle, and both the length and the width of the door must be positive integers.\nEdo figured out how he wants to place the magnets on the refrigerator. He introduced a system of coordinates on the plane, where each magnet is represented as a rectangle with sides parallel to the coordinate axes.\nNow he wants to remove no more than k magnets (he may choose to keep all of them) and attach all remaining magnets to the refrigerator door, and the area of   the door should be as small as possible. A magnet is considered to be attached to the refrigerator door if its center lies on the door or on its boundary. The relative positions of all the remaining magnets must correspond to the plan.\nLet us explain the last two sentences. Let's suppose we want to hang two magnets on the refrigerator. If the magnet in the plan has coordinates of the lower left corner (x1, y1) and the upper right corner (x2, y2), then its center is located at (, ) (may not be integers). By saying the relative position should correspond to the plan we mean that the only available operation is translation, i.e. the vector connecting the centers of two magnets in the original plan, must be equal to the vector connecting the centers of these two magnets on the refrigerator.\nThe sides of the refrigerator door must also be parallel to coordinate axes.\nInput\nThe first line contains two integers n and k (1 <= n <= 100 000, 0 <= k <= min(10, n - 1)) - the number of magnets that Edo has and the maximum number of magnets Edo may not place on the refrigerator.\nNext n lines describe the initial plan of placing magnets. Each line contains four integers x1, y1, x2, y2 (1 <= x1 < x2 <= 109, 1 <= y1 < y2 <= 109) - the coordinates of the lower left and upper right corners of the current magnet. The magnets can partially overlap or even fully coincide.\nOutput\nPrint a single integer - the minimum area of the door of refrigerator, which can be used to place at least n - k magnets, preserving the relative positions.\n", "generation": "int findMinDoorArea(int n, int k, vector<vector<int>>& plan) {\n  vector<int> x(n);\n  vector<int> y(n);\n  for (int i = 0; i < n; i++) {\n    x[i] = plan[i][0];\n    y[i] = plan[i][1];\n  }\n\n  sort(x.begin(), x.end());\n  sort(y.begin(), y.end());\n\n  int area = INT_MAX;\n  int i = 0;\n  int j = 0;\n  while (i < n && j < n) {\n    int currentArea = (x[j] - x[i]) * (y[j] - y[i]) + 1;\n    if (currentArea < area) {\n      area = currentArea;\n    }\n    i++;\n    j++;\n  }\n\n  return area;\n}\n", "result": "failed: compilation error: test.cpp:1:35: error: \u2018vector\u2019 has not been declared\n    1 | int findMinDoorArea(int n, int k, vector<vector<int>>& plan) {\n      |                                   ^~~~~~\ntest.cpp:1:41: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018<\u2019 token\n    1 | int findMinDoorArea(int n, int k, vector<vector<int>>& plan) {\n      |                                         ^\ntest.cpp: In function \u2018int findMinDoorArea(int, int, int)\u2019:\ntest.cpp:2:3: error: \u2018vector\u2019 was not declared in this scope\n    2 |   vector<int> x(n);\n      |   ^~~~~~\ntest.cpp:2:10: error: expected primary-expression before \u2018int\u2019\n    2 |   vector<int> x(n);\n      |          ^~~\ntest.cpp:3:10: error: expected primary-expression before \u2018int\u2019\n    3 |   vector<int> y(n);\n      |          ^~~\ntest.cpp:5:5: error: \u2018x\u2019 was not declared in this scope\n    5 |     x[i] = plan[i][0];\n      |     ^\ntest.cpp:5:12: error: \u2018plan\u2019 was not declared in this scope\n    5 |     x[i] = plan[i][0];\n      |            ^~~~\ntest.cpp:6:5: error: \u2018y\u2019 was not declared in this scope\n    6 |     y[i] = plan[i][1];\n      |     ^\ntest.cpp:9:8: error: \u2018x\u2019 was not declared in this scope\n    9 |   sort(x.begin(), x.end());\n      |        ^\ntest.cpp:9:3: error: \u2018sort\u2019 was not declared in this scope; did you mean \u2018short\u2019?\n    9 |   sort(x.begin(), x.end());\n      |   ^~~~\n      |   short\ntest.cpp:10:8: error: \u2018y\u2019 was not declared in this scope\n   10 |   sort(y.begin(), y.end());\n      |        ^\ntest.cpp:12:14: error: \u2018INT_MAX\u2019 was not declared in this scope\n   12 |   int area = INT_MAX;\n      |              ^~~~~~~\ntest.cpp:1:1: note: \u2018INT_MAX\u2019 is defined in header \u2018<climits>\u2019; did you forget to \u2018#include <climits>\u2019?\n  +++ |+#include <climits>\n    1 | int findMinDoorArea(int n, int k, vector<vector<int>>& plan) {\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/88", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nbool isRectangle(vector<int> &x, vector<int> &y) {\n  if (x.size() != 2) {\n    return false;\n  }\n  if (y.size() != 2) {\n    return false;\n  }\n  if (x[0] == x[1] || y[0] == y[1]) {\n    return false;\n  }\n  return true;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  vector<int> x(n);\n  vector<int> y(n);\n  for (int i = 0; i < n; i++) {\n    cin >> x[i];\n    cin >> y[i];\n  }\n\n  if (isRectangle(x, y)) {\n    int area = abs(x[0] - x[1]) * abs(y[0] - y[1]);\n    cout << area;\n  } else {\n    cout << -1;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "2\n0 0\n1 1", "output": "1"}, {"input": "1\n1 1", "output": "-1"}, {"input": "1\n-188 17", "output": "-1"}, {"input": "1\n71 -740", "output": "-1"}, {"input": "4\n-56 -858\n-56 -174\n778 -858\n778 -174", "output": "570456"}, {"input": "2\n14 153\n566 -13", "output": "91632"}, {"input": "2\n-559 894\n314 127", "output": "669591"}, {"input": "1\n-227 -825", "output": "-1"}, {"input": "2\n-187 583\n25 13", "output": "120840"}, {"input": "2\n-337 451\n32 -395", "output": "312174"}, {"input": "4\n-64 -509\n-64 960\n634 -509\n634 960", "output": "1025362"}, {"input": "2\n-922 -505\n712 -683", "output": "290852"}, {"input": "2\n-1000 -1000\n-1000 0", "output": "-1"}, {"input": "2\n-1000 -1000\n0 -1000", "output": "-1"}, {"input": "4\n-414 -891\n-414 896\n346 -891\n346 896", "output": "1358120"}, {"input": "2\n56 31\n704 -121", "output": "98496"}, {"input": "4\n-152 198\n-152 366\n458 198\n458 366", "output": "102480"}, {"input": "3\n-890 778\n-418 296\n-890 296", "output": "227504"}, {"input": "4\n852 -184\n852 724\n970 -184\n970 724", "output": "107144"}, {"input": "1\n858 -279", "output": "-1"}, {"input": "2\n-823 358\n446 358", "output": "-1"}, {"input": "2\n-739 -724\n-739 443", "output": "-1"}, {"input": "2\n686 664\n686 -590", "output": "-1"}, {"input": "3\n-679 301\n240 -23\n-679 -23", "output": "297756"}, {"input": "2\n-259 -978\n978 -978", "output": "-1"}, {"input": "1\n627 -250", "output": "-1"}, {"input": "3\n-281 598\n679 -990\n-281 -990", "output": "1524480"}, {"input": "2\n-414 -431\n-377 -688", "output": "9509"}, {"input": "3\n-406 566\n428 426\n-406 426", "output": "116760"}, {"input": "3\n-686 695\n-547 308\n-686 308", "output": "53793"}, {"input": "1\n-164 -730", "output": "-1"}, {"input": "2\n980 -230\n980 592", "output": "-1"}, {"input": "4\n-925 306\n-925 602\n398 306\n398 602", "output": "391608"}, {"input": "3\n576 -659\n917 -739\n576 -739", "output": "27280"}, {"input": "1\n720 -200", "output": "-1"}, {"input": "4\n-796 -330\n-796 758\n171 -330\n171 758", "output": "1052096"}, {"input": "2\n541 611\n-26 611", "output": "-1"}, {"input": "3\n-487 838\n134 691\n-487 691", "output": "91287"}, {"input": "2\n-862 -181\n-525 -181", "output": "-1"}, {"input": "1\n-717 916", "output": "-1"}, {"input": "1\n-841 -121", "output": "-1"}, {"input": "4\n259 153\n259 999\n266 153\n266 999", "output": "5922"}, {"input": "2\n295 710\n295 254", "output": "-1"}, {"input": "4\n137 -184\n137 700\n712 -184\n712 700", "output": "508300"}, {"input": "2\n157 994\n377 136", "output": "188760"}, {"input": "1\n193 304", "output": "-1"}, {"input": "4\n5 -952\n5 292\n553 -952\n553 292", "output": "681712"}, {"input": "2\n-748 697\n671 575", "output": "173118"}, {"input": "2\n-457 82\n260 -662", "output": "533448"}, {"input": "2\n-761 907\n967 907", "output": "-1"}, {"input": "3\n-639 51\n-321 -539\n-639 -539", "output": "187620"}, {"input": "2\n-480 51\n89 -763", "output": "463166"}, {"input": "4\n459 -440\n459 -94\n872 -440\n872 -94", "output": "142898"}, {"input": "2\n380 -849\n68 -849", "output": "-1"}, {"input": "2\n-257 715\n102 715", "output": "-1"}, {"input": "2\n247 -457\n434 -921", "output": "86768"}, {"input": "4\n-474 -894\n-474 -833\n-446 -894\n-446 -833", "output": "1708"}, {"input": "3\n-318 831\n450 31\n-318 31", "output": "614400"}, {"input": "3\n-282 584\n696 488\n-282 488", "output": "93888"}, {"input": "3\n258 937\n395 856\n258 856", "output": "11097"}, {"input": "1\n-271 -499", "output": "-1"}, {"input": "2\n-612 208\n326 -559", "output": "719446"}, {"input": "2\n115 730\n562 -546", "output": "570372"}, {"input": "2\n-386 95\n-386 750", "output": "-1"}, {"input": "3\n0 0\n0 1\n1 0", "output": "1"}, {"input": "3\n0 4\n3 4\n3 1", "output": "9"}, {"input": "3\n1 1\n1 2\n2 1", "output": "1"}, {"input": "3\n1 4\n4 4\n4 1", "output": "9"}, {"input": "3\n1 1\n2 1\n1 2", "output": "1"}, {"input": "3\n0 0\n1 0\n1 1", "output": "1"}, {"input": "3\n0 0\n0 5\n5 0", "output": "25"}, {"input": "3\n0 0\n0 1\n1 1", "output": "1"}, {"input": "4\n0 0\n1 0\n1 1\n0 1", "output": "1"}, {"input": "3\n4 4\n1 4\n4 1", "output": "9"}, {"input": "3\n0 0\n2 0\n2 1", "output": "2"}, {"input": "3\n0 0\n2 0\n0 2", "output": "4"}, {"input": "3\n0 0\n0 1\n5 0", "output": "5"}, {"input": "3\n1 1\n1 3\n3 1", "output": "4"}, {"input": "4\n0 0\n1 0\n0 1\n1 1", "output": "1"}, {"input": "2\n1 0\n2 1", "output": "1"}, {"input": "3\n0 0\n1 0\n0 1", "output": "1"}, {"input": "3\n1 0\n0 0\n0 1", "output": "1"}, {"input": "3\n0 0\n0 5\n5 5", "output": "25"}, {"input": "3\n1 0\n5 0\n5 10", "output": "40"}, {"input": "3\n0 0\n1 0\n1 2", "output": "2"}, {"input": "4\n0 1\n0 0\n1 0\n1 1", "output": "1"}, {"input": "3\n0 0\n2 0\n0 1", "output": "2"}, {"input": "3\n-2 -1\n-1 -1\n-1 -2", "output": "1"}, {"input": "2\n1 0\n0 1", "output": "1"}, {"input": "4\n1 1\n3 3\n3 1\n1 3", "output": "4"}, {"input": "3\n2 1\n1 2\n2 2", "output": "1"}, {"input": "3\n0 0\n0 3\n3 0", "output": "9"}, {"input": "2\n0 3\n3 3", "output": "-1"}, {"input": "4\n2 0\n2 8\n5 8\n5 0", "output": "24"}, {"input": "2\n0 999\n100 250", "output": "74900"}, {"input": "3\n1 1\n1 5\n5 1", "output": "16"}, {"input": "3\n0 1\n0 0\n1 1", "output": "1"}, {"input": "3\n0 0\n10 0\n0 10", "output": "100"}, {"input": "2\n0 0\n-1 -1", "output": "1"}, {"input": "3\n1 5\n2 2\n2 5", "output": "3"}, {"input": "3\n0 0\n0 1\n2 0", "output": "2"}, {"input": "3\n0 1\n1 0\n0 0", "output": "1"}, {"input": "3\n0 0\n0 -1\n1 -1", "output": "1"}, {"input": "3\n0 1\n1 0\n1 1", "output": "1"}, {"input": "3\n3 5\n3 2\n7 2", "output": "12"}, {"input": "3\n1 2\n1 3\n2 2", "output": "1"}, {"input": "3\n5 0\n0 0\n0 5", "output": "25"}, {"input": "3\n1 0\n1 3\n5 0", "output": "12"}, {"input": "3\n0 0\n0 2\n2 0", "output": "4"}, {"input": "3\n1 1\n0 0\n1 0", "output": "1"}, {"input": "3\n1 2\n1 3\n2 3", "output": "1"}, {"input": "4\n0 0\n0 1\n1 1\n1 0", "output": "1"}, {"input": "2\n-3 0\n3 3", "output": "18"}, {"input": "3\n1 1\n0 1\n1 0", "output": "1"}, {"input": "3\n0 0\n5 0\n5 5", "output": "25"}, {"input": "3\n79 79\n79 158\n158 79", "output": "6241"}, {"input": "3\n1 0\n1 -1\n0 0", "output": "1"}, {"input": "3\n1 1\n1 2\n2 2", "output": "1"}, {"input": "3\n0 1\n0 0\n1 0", "output": "1"}, {"input": "3\n2 1\n2 4\n6 1", "output": "12"}, {"input": "3\n5 0\n0 0\n5 5", "output": "25"}], "language": "cpp"}, "prompt": "A. Wilbur and Swimming Pool\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nAfter making bad dives into swimming pools, Wilbur wants to build a swimming pool in the shape of a rectangle in his backyard. He has set up coordinate axes, and he wants the sides of the rectangle to be parallel to them. Of course, the area of the rectangle must be positive. Wilbur had all four vertices of the planned pool written on a paper, until his friend came along and erased some of the vertices.\nNow Wilbur is wondering, if the remaining n vertices of the initial rectangle give enough information to restore the area of the planned swimming pool.\nInput\nThe first line of the input contains a single integer n (1 <= n <= 4) - the number of vertices that were not erased by Wilbur's friend.\nEach of the following n lines contains two integers xi and yi ( - 1000 <= xi, yi <= 1000) -the coordinates of the i-th vertex that remains. Vertices are given in an arbitrary order.\nIt's guaranteed that these points are distinct vertices of some rectangle, that has positive area and which sides are parallel to the coordinate axes.\nOutput\nPrint the area of the initial rectangle if it could be uniquely determined by the points remaining. Otherwise, print  - 1.\n", "generation": "#include <iostream>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nbool isRectangle(vector<int> &x, vector<int> &y) {\n  if (x.size() != 2) {\n    return false;\n  }\n  if (y.size() != 2) {\n    return false;\n  }\n  if (x[0] == x[1] || y[0] == y[1]) {\n    return false;\n  }\n  return true;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  vector<int> x(n);\n  vector<int> y(n);\n  for (int i = 0; i < n; i++) {\n    cin >> x[i];\n    cin >> y[i];\n  }\n\n  if (isRectangle(x, y)) {\n    int area = abs(x[0] - x[1]) * abs(y[0] - y[1]);\n    cout << area;\n  } else {\n    cout << -1;\n  }\n\n  return 0;\n}\n", "result": "failed: wrong answer @ testcase 5", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/89", "completion_id": 0, "test_suite": {"code": "int solve(int n, vector<int> &b) {\n  vector<int> a(n, 0);\n  vector<int> diff(n, 0);\n  for (int i = 0; i < n; i++) {\n    diff[i] = abs(a[i] - b[i]);\n  }\n  sort(diff.begin(), diff.end());\n  int steps = 0;\n  for (int i = 0; i < n; i++) {\n    steps += diff[i];\n  }\n  return steps;\n}\n", "testcases": [{"input": "5\n1 2 3 4 5", "output": "5"}, {"input": "4\n1 2 2 1", "output": "3"}, {"input": "3\n1 2 4", "output": "4"}, {"input": "6\n1 2 3 6 5 4", "output": "8"}, {"input": "10\n2 1 4 3 6 5 8 7 10 9", "output": "19"}, {"input": "7\n12 6 12 13 4 3 2", "output": "36"}, {"input": "15\n15 14 13 1 2 3 12 11 10 4 5 6 9 8 7", "output": "55"}, {"input": "16\n1 2 3 4 13 14 15 16 9 10 11 12 5 6 7 8", "output": "36"}, {"input": "6\n1000 1 2000 1 3000 1", "output": "11995"}, {"input": "1\n0", "output": "0"}, {"input": "5\n1000000000 1 1000000000 1 1000000000", "output": "4999999996"}, {"input": "5\n1000000000 0 1000000000 0 1000000000", "output": "5000000000"}, {"input": "10\n1000000000 0 1000000000 0 1000000000 0 1000000000 0 1000000000 0", "output": "10000000000"}, {"input": "10\n1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000", "output": "19000000000"}, {"input": "7\n0 1000000000 0 1000000000 0 1000000000 0", "output": "6000000000"}, {"input": "4\n1000000000 -1000000000 1000000000 -1000000000", "output": "7000000000"}, {"input": "20\n1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000", "output": "39000000000"}, {"input": "11\n1000000000 0 1000000000 0 1000000000 0 1000000000 0 1000000000 0 1000000000", "output": "11000000000"}, {"input": "5\n1000000000 -1000000000 1000000000 -1000000000 1000000000", "output": "9000000000"}, {"input": "22\n1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000", "output": "43000000000"}], "language": "cpp"}, "prompt": "B. Wilbur and Array\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nWilbur the pig is tinkering with arrays again. He has the array a1, a2, ..., an initially consisting of n zeros. At one step, he can choose any index i and either add 1 to all elements ai, ai + 1, ... , an or subtract 1 from all elements ai, ai + 1, ..., an. His goal is to end up with the array b1, b2, ..., bn.\nOf course, Wilbur wants to achieve this goal in the minimum number of steps and asks you to compute this value.\nInput\nThe first line of the input contains a single integer n (1 <= n <= 200 000) - the length of the array ai. Initially ai = 0 for every position i, so this array is not given in the input.\nThe second line of the input contains n integers b1, b2, ..., bn ( - 109 <= bi <= 109).\nOutput\nPrint the minimum number of steps that Wilbur needs to make in order to achieve ai = bi for all i.\n", "generation": "int solve(int n, vector<int> &b) {\n  vector<int> a(n, 0);\n  vector<int> diff(n, 0);\n  for (int i = 0; i < n; i++) {\n    diff[i] = abs(a[i] - b[i]);\n  }\n  sort(diff.begin(), diff.end());\n  int steps = 0;\n  for (int i = 0; i < n; i++) {\n    steps += diff[i];\n  }\n  return steps;\n}\n", "result": "failed: compilation error: test.cpp:1:18: error: \u2018vector\u2019 has not been declared\n    1 | int solve(int n, vector<int> &b) {\n      |                  ^~~~~~\ntest.cpp:1:24: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018<\u2019 token\n    1 | int solve(int n, vector<int> &b) {\n      |                        ^\ntest.cpp: In function \u2018int solve(int, int)\u2019:\ntest.cpp:2:3: error: \u2018vector\u2019 was not declared in this scope\n    2 |   vector<int> a(n, 0);\n      |   ^~~~~~\ntest.cpp:2:10: error: expected primary-expression before \u2018int\u2019\n    2 |   vector<int> a(n, 0);\n      |          ^~~\ntest.cpp:3:10: error: expected primary-expression before \u2018int\u2019\n    3 |   vector<int> diff(n, 0);\n      |          ^~~\ntest.cpp:5:5: error: \u2018diff\u2019 was not declared in this scope\n    5 |     diff[i] = abs(a[i] - b[i]);\n      |     ^~~~\ntest.cpp:5:19: error: \u2018a\u2019 was not declared in this scope\n    5 |     diff[i] = abs(a[i] - b[i]);\n      |                   ^\ntest.cpp:5:26: error: \u2018b\u2019 was not declared in this scope\n    5 |     diff[i] = abs(a[i] - b[i]);\n      |                          ^\ntest.cpp:5:15: error: \u2018abs\u2019 was not declared in this scope\n    5 |     diff[i] = abs(a[i] - b[i]);\n      |               ^~~\ntest.cpp:7:8: error: \u2018diff\u2019 was not declared in this scope\n    7 |   sort(diff.begin(), diff.end());\n      |        ^~~~\ntest.cpp:7:3: error: \u2018sort\u2019 was not declared in this scope; did you mean \u2018short\u2019?\n    7 |   sort(diff.begin(), diff.end());\n      |   ^~~~\n      |   short\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/90", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool cmp(pair<int, int> a, pair<int, int> b) {\n  return make_pair(-a.first, a.second) < make_pair(-b.first, b.second);\n}\n\nint main() {\n  int n;\n  cin >> n;\n\n  vector<pair<int, int>> points(n);\n  for (int i = 0; i < n; i++) {\n    cin >> points[i].first;\n    cin >> points[i].second;\n  }\n\n  vector<int> w(n);\n  cin >> w;\n\n  sort(points.begin(), points.end(), cmp);\n\n  bool found = false;\n  for (int i = 0; i < n; i++) {\n    if (points[i].first == points[i].second) {\n      found = true;\n      cout << \"YES\" << endl;\n      cout << points[i].first << \" \" << points[i].second << endl;\n    }\n  }\n\n  if (!found) {\n    cout << \"NO\" << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "5\n2 0\n0 0\n1 0\n1 1\n0 1\n0 -1 -2 1 0", "output": "YES\n0 0\n1 0\n2 0\n0 1\n1 1"}, {"input": "3\n1 0\n0 0\n2 0\n0 1 2", "output": "NO"}, {"input": "9\n0 0\n1 0\n2 0\n0 1\n1 1\n2 1\n1 2\n2 2\n0 2\n0 0 0 -1 -1 -2 1 1 2", "output": "NO"}, {"input": "18\n0 0\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\n0 8\n0 9\n0 10\n0 11\n0 12\n0 13\n0 14\n0 15\n0 16\n1 0\n0 1 2 3 4 5 6 7 8 9 -1 10 11 12 13 14 15 16", "output": "YES\n0 0\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\n0 8\n0 9\n1 0\n0 10\n0 11\n0 12\n0 13\n0 14\n0 15\n0 16"}, {"input": "1\n0 0\n0", "output": "YES\n0 0"}, {"input": "37\n0 0\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\n0 8\n0 9\n0 10\n0 11\n0 12\n0 13\n0 14\n0 15\n0 16\n0 17\n0 18\n0 19\n0 20\n0 21\n0 22\n0 23\n0 24\n0 25\n0 26\n0 27\n0 28\n0 29\n0 30\n0 31\n0 32\n0 33\n0 34\n0 35\n1 0\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 -1 26 27 28 29 30 31 32 33 34 35", "output": "YES\n0 0\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\n0 8\n0 9\n0 10\n0 11\n0 12\n0 13\n0 14\n0 15\n0 16\n0 17\n0 18\n0 19\n0 20\n0 21\n0 22\n0 23\n0 24\n0 25\n1 0\n0 26\n0 27\n0 28\n0 29\n0 30\n0 31\n0 32\n0 33\n0 34\n0 35"}, {"input": "31\n0 0\n0 1\n0 2\n0 3\n1 0\n1 1\n2 0\n2 1\n3 0\n4 0\n5 0\n6 0\n7 0\n8 0\n9 0\n10 0\n11 0\n12 0\n13 0\n14 0\n15 0\n16 0\n17 0\n18 0\n19 0\n20 0\n21 0\n22 0\n23 0\n24 0\n25 0\n0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 1 -15 2 -16 -17 -18 3 -19 -20 0 -21 -22 -23 -24 -25 -1", "output": "YES\n0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n8 0\n9 0\n10 0\n11 0\n12 0\n13 0\n14 0\n0 1\n15 0\n0 2\n16 0\n17 0\n18 0\n0 3\n19 0\n20 0\n1 1\n21 0\n22 0\n23 0\n24 0\n25 0\n2 1"}, {"input": "40\n0 0\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\n0 8\n0 9\n0 10\n0 11\n0 12\n1 0\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n8 0\n9 0\n10 0\n11 0\n12 0\n13 0\n14 0\n15 0\n16 0\n17 0\n18 0\n19 0\n20 0\n0 1 2 -1 -2 3 4 -3 5 6 7 8 0 -4 -5 1 -6 -7 -8 -9 -10 -11 9 2 -12 -13 -14 3 10 -15 11 4 -16 -17 -18 -19 5 6 12 -20", "output": "YES\n0 0\n0 1\n0 2\n1 0\n2 0\n0 3\n0 4\n3 0\n0 5\n0 6\n0 7\n0 8\n1 1\n4 0\n5 0\n1 2\n6 0\n7 0\n8 0\n9 0\n10 0\n11 0\n0 9\n1 3\n12 0\n13 0\n14 0\n1 4\n0 10\n15 0\n0 11\n1 5\n16 0\n17 0\n18 0\n19 0\n1 6\n1 7\n0 12\n20 0"}, {"input": "21\n0 0\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\n0 8\n1 0\n1 1\n1 2\n1 3\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n8 0\n9 0\n86174 -26039 -13726 25840 85990 -62633 -29634 -68400 39255 1313 77388 830 -45558 -90862 97867 46376 58592 17103 32820 27220 94751", "output": "NO"}, {"input": "31\n0 0\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\n0 8\n0 9\n1 0\n1 1\n1 2\n1 3\n1 4\n1 5\n2 0\n2 1\n2 2\n3 0\n4 0\n5 0\n6 0\n7 0\n8 0\n9 0\n10 0\n11 0\n12 0\n13 0\n14 0\n-8 1 4 -11 0 -4 -10 3 4 -5 -9 8 7 6 2 -2 -1 9 -3 -14 2 3 -6 0 -7 -1 5 0 -13 -12 1", "output": "NO"}, {"input": "1\n0 0\n-9876", "output": "NO"}, {"input": "16\n0 0\n0 1\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n8 0\n9 0\n10 0\n11 0\n12 0\n13 0\n14 0\n0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 1 -11 -12 -13 -14", "output": "YES\n0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n8 0\n9 0\n10 0\n0 1\n11 0\n12 0\n13 0\n14 0"}, {"input": "5\n1 1\n0 1\n2 0\n1 0\n0 0\n0 -1 -2 1 0", "output": "YES\n0 0\n1 0\n2 0\n0 1\n1 1"}, {"input": "2\n0 0\n1 0\n-1 0", "output": "NO"}], "language": "cpp"}, "prompt": "C. Wilbur and Points\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nWilbur is playing with a set of n points on the coordinate plane. All points have non-negative integer coordinates. Moreover, if some point (x, y) belongs to the set, then all points (x', y'), such that 0 <= x' <= x and 0 <= y' <= y also belong to this set.\nNow Wilbur wants to number the points in the set he has, that is assign them distinct integer numbers from 1 to n. In order to make the numbering aesthetically pleasing, Wilbur imposes the condition that if some point (x, y) gets number i, then all (x',y') from the set, such that x' >= x and y' >= y must be assigned a number not less than i. For example, for a set of four points (0, 0), (0, 1), (1, 0) and (1, 1), there are two aesthetically pleasing numberings. One is 1, 2, 3, 4 and another one is 1, 3, 2, 4.\nWilbur's friend comes along and challenges Wilbur. For any point he defines it's special value as s(x, y) = y - x. Now he gives Wilbur some w1, w2,..., wn, and asks him to find an aesthetically pleasing numbering of the points in the set, such that the point that gets number i has it's special value equal to wi, that is s(xi, yi) = yi - xi = wi.\nNow Wilbur asks you to help him with this challenge.\nInput\nThe first line of the input consists of a single integer n (1 <= n <= 100 000) - the number of points in the set Wilbur is playing with.\nNext follow n lines with points descriptions. Each line contains two integers x and y (0 <= x, y <= 100 000), that give one point in Wilbur's set. It's guaranteed that all points are distinct. Also, it is guaranteed that if some point (x, y) is present in the input, then all points (x', y'), such that 0 <= x' <= x and 0 <= y' <= y, are also present in the input.\nThe last line of the input contains n integers. The i-th of them is wi ( - 100 000 <= wi <= 100 000) - the required special value of the point that gets number i in any aesthetically pleasing numbering.\nOutput\nIf there exists an aesthetically pleasant numbering of points in the set, such that s(xi, yi) = yi - xi = wi, then print \"YES\" on the first line of the output. Otherwise, print \"NO\".\nIf a solution exists, proceed output with n lines. On the i-th of these lines print the point of the set that gets number i. If there are multiple solutions, print any of them.\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool cmp(pair<int, int> a, pair<int, int> b) {\n  return make_pair(-a.first, a.second) < make_pair(-b.first, b.second);\n}\n\nint main() {\n  int n;\n  cin >> n;\n\n  vector<pair<int, int>> points(n);\n  for (int i = 0; i < n; i++) {\n    cin >> points[i].first;\n    cin >> points[i].second;\n  }\n\n  vector<int> w(n);\n  cin >> w;\n\n  sort(points.begin(), points.end(), cmp);\n\n  bool found = false;\n  for (int i = 0; i < n; i++) {\n    if (points[i].first == points[i].second) {\n      found = true;\n      cout << \"YES\" << endl;\n      cout << points[i].first << \" \" << points[i].second << endl;\n    }\n  }\n\n  if (!found) {\n    cout << \"NO\" << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:21:7: error: no match for \u2018operator>>\u2019 (operand types are \u2018std::istream\u2019 {aka \u2018std::basic_istream<char>\u2019} and \u2018std::vector<int>\u2019)\n   21 |   cin >> w;\n      |   ~~~ ^~ ~\n      |   |      |\n      |   |      std::vector<int>\n      |   std::istream {aka std::basic_istream<char>}\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:120:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__istream_type& (*)(std::basic_istream<_CharT, _Traits>::__istream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:120:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__istream_type& (*)(std::basic_istream<char>::__istream_type&)\u2019 {aka \u2018std::basic_istream<char>& (*)(std::basic_istream<char>&)\u2019}\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:124:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__ios_type& (*)(std::basic_istream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>; std::basic_istream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]\u2019\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:124:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__ios_type& (*)(std::basic_istream<char>::__ios_type&)\u2019 {aka \u2018std::basic_ios<char>& (*)(std::basic_ios<char>&)\u2019}\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:131:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:131:30: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::ios_base& (*)(std::ios_base&)\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |                  ~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:168:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(bool&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  168 |       operator>>(bool& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:168:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018bool&\u2019\n  168 |       operator>>(bool& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:172:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(short int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  172 |       operator>>(short& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:172:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short int&\u2019\n  172 |       operator>>(short& __n);\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:175:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(short unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  175 |       operator>>(unsigned short& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:175:34: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short unsigned int&\u2019\n  175 |       operator>>(unsigned short& __n)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:179:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  179 |       operator>>(int& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:179:23: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018int&\u2019\n  179 |       operator>>(int& __n);\n      |                  ~~~~~^~~\n/usr/include/c++/9/istream:182:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  182 |       operator>>(unsigned int& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:182:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018unsigned int&\u2019\n  182 |       operator>>(unsigned int& __n)\n      |                  ~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:186:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  186 |       operator>>(long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:186:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long int&\u2019\n  186 |       operator>>(long& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:190:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  190 |       operator>>(unsigned long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:190:33: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long unsigned int&\u2019\n  190 |       operator>>(unsigned long& __n)\n      |                  ~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:195:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  195 |       operator>>(long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:195:29: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long int&\u2019\n  195 |       operator>>(long long& __n)\n      |                  ~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:199:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:199:38: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long unsigned int&\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |                  ~~~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:214:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(float&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  214 |       operator>>(float& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:214:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018float&\u2019\n  214 |       operator>>(float& __f)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:218:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  218 |       operator>>(double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:218:26: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018double&\u2019\n  218 |       operator>>(double& __f)\n      |                  ~~~~~~~~^~~\n/usr/include/c++/9/istream:222:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  222 |       operator>>(long double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:222:31: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long double&\u2019\n  222 |       operator>>(long double& __f)\n      |                  ~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:235:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(void*&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  235 |       operator>>(void*& __p)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:235:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018void*&\u2019\n  235 |       operator>>(void*& __p)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:259:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]\u2019\n  259 |       operator>>(__streambuf_type* __sb);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:259:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__streambuf_type*\u2019 {aka \u2018std::basic_streambuf<char>*\u2019}\n  259 |       operator>>(__streambuf_type* __sb);\n      |                  ~~~~~~~~~~~~~~~~~~^~~~\nIn file included from /usr/include/c++/9/string:56,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/ostream:38,\n                 from /usr/include/c++/9/iostream:39,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 1466 |     operator>>(basic_istream<_CharT, _Traits>& __in,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note:   template argument deduction/substitution failed:\ntest.cpp:21:10: note:   \u2018std::vector<int>\u2019 is not derived from \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\n   21 |   cin >> w;\n      |          ^\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:931:5: note: candidate: \u2018template<class _CharT, class _Traits> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT&)\u2019\n  931 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:931:5: note:   template argument deduction/substitution failed:\ntest.cpp:21:10: note:   deduced conflicting types for parameter \u2018_CharT\u2019 (\u2018char\u2019 and \u2018std::vector<int>\u2019)\n   21 |   cin >> w;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:756:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char&)\u2019\n  756 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:756:5: note:   template argument deduction/substitution failed:\ntest.cpp:21:10: note:   cannot convert \u2018w\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char&\u2019\n   21 |   cin >> w;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:761:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char&)\u2019\n  761 |     operator>>(basic_istream<char, _Traits>& __in, signed char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:761:5: note:   template argument deduction/substitution failed:\ntest.cpp:21:10: note:   cannot convert \u2018w\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char&\u2019\n   21 |   cin >> w;\n      |          ^\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:963:5: note: candidate: \u2018template<class _CharT2, class _Traits2> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT2*)\u2019\n  963 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:963:5: note:   template argument deduction/substitution failed:\ntest.cpp:21:10: note:   mismatched types \u2018_CharT2*\u2019 and \u2018std::vector<int>\u2019\n   21 |   cin >> w;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:803:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char*)\u2019\n  803 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:803:5: note:   template argument deduction/substitution failed:\ntest.cpp:21:10: note:   cannot convert \u2018w\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char*\u2019\n   21 |   cin >> w;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:808:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char*)\u2019\n  808 |     operator>>(basic_istream<char, _Traits>& __in, signed char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:808:5: note:   template argument deduction/substitution failed:\ntest.cpp:21:10: note:   cannot convert \u2018w\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char*\u2019\n   21 |   cin >> w;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:980:5: note: candidate: \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&)\u2019\n  980 |     operator>>(_Istream&& __is, _Tp&& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:980:5: note:   template argument deduction/substitution failed:\n/usr/include/c++/9/istream: In substitution of \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&) [with _Istream = std::basic_istream<char>&; _Tp = std::vector<int>&]\u2019:\ntest.cpp:21:10:   required from here\n/usr/include/c++/9/istream:980:5: error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false, std::basic_istream<char>&>\u2019\ntest.cpp:23:3: error: \u2018sort\u2019 was not declared in this scope; did you mean \u2018qsort\u2019?\n   23 |   sort(points.begin(), points.end(), cmp);\n      |   ^~~~\n      |   qsort\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/93", "completion_id": 0, "test_suite": {"code": "int findKDivisible(int k, int a, int b) {\n  int ans = (int) (b / k) - (int) (a - 1) / k;\n  return ans;\n}\n", "testcases": [{"input": "1 1 10", "output": "10"}, {"input": "2 -4 4", "output": "5"}, {"input": "1 1 1", "output": "1"}, {"input": "1 0 0", "output": "1"}, {"input": "1 0 1", "output": "2"}, {"input": "1 10181 10182", "output": "2"}, {"input": "1 10182 10183", "output": "2"}, {"input": "1 -191 1011", "output": "1203"}, {"input": "2 0 0", "output": "1"}, {"input": "2 0 1", "output": "1"}, {"input": "2 1 2", "output": "1"}, {"input": "2 2 3", "output": "1"}, {"input": "2 -1 0", "output": "1"}, {"input": "2 -1 1", "output": "1"}, {"input": "2 -7 -6", "output": "1"}, {"input": "2 -7 -5", "output": "1"}, {"input": "2 -6 -6", "output": "1"}, {"input": "2 -6 -4", "output": "2"}, {"input": "2 -6 13", "output": "10"}, {"input": "2 -19171 1911", "output": "10541"}, {"input": "3 123 456", "output": "112"}, {"input": "3 124 456", "output": "111"}, {"input": "3 125 456", "output": "111"}, {"input": "3 381 281911", "output": "93844"}, {"input": "3 381 281912", "output": "93844"}, {"input": "3 381 281913", "output": "93845"}, {"input": "3 382 281911", "output": "93843"}, {"input": "3 382 281912", "output": "93843"}, {"input": "3 382 281913", "output": "93844"}, {"input": "3 383 281911", "output": "93843"}, {"input": "3 383 281912", "output": "93843"}, {"input": "3 383 281913", "output": "93844"}, {"input": "3 -381 281911", "output": "94098"}, {"input": "3 -381 281912", "output": "94098"}, {"input": "3 -381 281913", "output": "94099"}, {"input": "3 -380 281911", "output": "94097"}, {"input": "3 -380 281912", "output": "94097"}, {"input": "3 -380 281913", "output": "94098"}, {"input": "3 -379 281911", "output": "94097"}, {"input": "3 -379 281912", "output": "94097"}, {"input": "3 -379 281913", "output": "94098"}, {"input": "3 -191381 -1911", "output": "63157"}, {"input": "3 -191381 -1910", "output": "63157"}, {"input": "3 -191381 -1909", "output": "63157"}, {"input": "3 -191380 -1911", "output": "63157"}, {"input": "3 -191380 -1910", "output": "63157"}, {"input": "3 -191380 -1909", "output": "63157"}, {"input": "3 -191379 -1911", "output": "63157"}, {"input": "3 -191379 -1910", "output": "63157"}, {"input": "3 -191379 -1909", "output": "63157"}, {"input": "3 -2810171 0", "output": "936724"}, {"input": "3 0 29101", "output": "9701"}, {"input": "3 -2810170 0", "output": "936724"}, {"input": "3 0 29102", "output": "9701"}, {"input": "3 -2810169 0", "output": "936724"}, {"input": "3 0 29103", "output": "9702"}, {"input": "1 -1000000000000000000 1000000000000000000", "output": "2000000000000000001"}, {"input": "2 -1000000000000000000 1000000000000000000", "output": "1000000000000000001"}, {"input": "3 -1000000000000000000 1000000000000000000", "output": "666666666666666667"}, {"input": "4 -1000000000000000000 1000000000000000000", "output": "500000000000000001"}, {"input": "5 -1000000000000000000 1000000000000000000", "output": "400000000000000001"}, {"input": "6 -1000000000000000000 1000000000000000000", "output": "333333333333333333"}, {"input": "7 -1000000000000000000 1000000000000000000", "output": "285714285714285715"}, {"input": "1 -1000000000000000000 -100000000000000000", "output": "900000000000000001"}, {"input": "2 -1000000000000000000 -10000000000000000", "output": "495000000000000001"}, {"input": "3 -1000000000000000000 -10218000000000000", "output": "329927333333333334"}, {"input": "4 -1000000000000000000 -320110181919100", "output": "249919972454520226"}, {"input": "5 -1000000000000000000 -402710171917", "output": "199999919457965617"}, {"input": "6 -1000000000000000000 -6666666666", "output": "166666665555555556"}, {"input": "7 -1000000000000000000 -77777777777778", "output": "142846031746031746"}, {"input": "1000000000000000000 -1000000000000000000 1000000000000000000", "output": "3"}, {"input": "1000000000000000000 0 1000000000000000000", "output": "2"}, {"input": "1000000000000000000 1000000000000000000 1000000000000000000", "output": "1"}, {"input": "100000000000000321 1000000000000000000 1000000000000000000", "output": "0"}, {"input": "100000000000000321 -1000000000000000000 1000000000000000000", "output": "19"}, {"input": "1000000000000000000 0 0", "output": "1"}, {"input": "1000000000000000000 1 1", "output": "0"}, {"input": "1000000000000000000 -1 -1", "output": "0"}, {"input": "1000000000000000000 -2 -1", "output": "0"}, {"input": "142000000000000271 -228118171 -1382811", "output": "0"}, {"input": "1 1 1000000000000000000", "output": "1000000000000000000"}], "language": "cpp"}, "prompt": "A. Divisibility\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nFind the number of k-divisible numbers on the segment [a, b]. In other words you need to find the number of such integer values x that a <= x <= b and x is divisible by k.\nInput\nThe only line contains three space-separated integers k, a and b (1 <= k <= 1018; - 1018 <= a <= b <= 1018).\nOutput\nPrint the required number.\n", "generation": "int findKDivisible(int k, int a, int b) {\n  int ans = (int) (b / k) - (int) (a - 1) / k;\n  return ans;\n}\n", "result": "failed: compilation error: /usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/9/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':\n(.text+0x24): undefined reference to `main'\ncollect2: error: ld returned 1 exit status\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/94", "completion_id": 0, "test_suite": {"code": "int solve(vector<int>& l, vector<int>& r) {\n  vector<int> v(r.size());\n  for(int i = 0; i < r.size(); i++) {\n    v[i] = r[i] - l[i] + 1;\n  }\n  sort(v.begin(), v.end());\n  int ans = 1;\n  int current = v[0];\n  for(int i = 1; i < v.size(); i++) {\n    if(v[i] <= current) {\n      current = max(current, v[i] + 1);\n      ans++;\n    } else {\n      current = v[i] + 1;\n    }\n  }\n  return ans;\n}\n", "testcases": [{"input": "2\n7 11\n4 7", "output": "1"}, {"input": "5\n1 2\n2 3\n3 4\n4 5\n5 6", "output": "3"}, {"input": "6\n4 8\n1 5\n4 7\n2 5\n1 3\n6 8", "output": "2"}, {"input": "1\n1 1", "output": "1"}, {"input": "2\n4 6\n4 8", "output": "1"}, {"input": "3\n22 22\n14 21\n9 25", "output": "2"}, {"input": "4\n20 59\n30 62\n29 45\n29 32", "output": "1"}, {"input": "5\n40 124\n40 117\n67 106\n36 121\n38 102", "output": "1"}, {"input": "6\n124 155\n50 93\n45 120\n54 171\n46 190\n76 179", "output": "2"}, {"input": "7\n94 113\n54 248\n64 325\n280 306\n62 328\n49 341\n90 324", "output": "2"}, {"input": "8\n116 416\n104 472\n84 476\n100 486\n199 329\n169 444\n171 487\n134 441", "output": "1"}, {"input": "9\n90 667\n366 539\n155 462\n266 458\n323 574\n101 298\n90 135\n641 661\n122 472", "output": "3"}, {"input": "10\n195 443\n229 602\n200 948\n229 876\n228 904\n296 656\n189 818\n611 626\n215 714\n403 937", "output": "2"}, {"input": "1\n28 74", "output": "1"}, {"input": "2\n28 92\n2 59", "output": "1"}, {"input": "3\n5 92\n1 100\n39 91", "output": "1"}, {"input": "4\n4 92\n29 43\n13 73\n10 79", "output": "1"}, {"input": "5\n64 86\n61 61\n46 54\n83 94\n19 46", "output": "3"}, {"input": "6\n80 84\n21 24\n44 80\n14 53\n5 10\n61 74", "output": "4"}, {"input": "7\n32 92\n32 86\n13 25\n45 75\n16 65\n1 99\n17 98", "output": "2"}, {"input": "8\n3 59\n22 94\n26 97\n18 85\n7 84\n1 100\n4 100\n26 93", "output": "1"}, {"input": "9\n11 90\n8 95\n62 95\n43 96\n16 84\n3 70\n23 93\n4 96\n11 86", "output": "1"}, {"input": "10\n30 45\n5 8\n51 83\n37 52\n49 75\n28 92\n94 99\n4 13\n61 83\n36 96", "output": "4"}, {"input": "11\n38 92\n16 85\n32 43\n65 84\n63 100\n21 45\n13 92\n29 58\n56 94\n18 83\n50 81", "output": "2"}, {"input": "12\n66 78\n41 97\n55 69\n55 61\n36 64\n14 97\n96 99\n28 58\n44 93\n2 100\n42 88\n1 2", "output": "4"}, {"input": "13\n50 85\n38 65\n5 51\n50 96\n4 92\n23 94\n2 99\n2 84\n1 98\n2 100\n12 100\n21 97\n7 84", "output": "1"}, {"input": "14\n17 92\n7 96\n49 96\n10 99\n7 98\n12 85\n10 52\n2 99\n23 75\n4 98\n7 100\n2 69\n6 99\n20 87", "output": "1"}, {"input": "15\n1 58\n15 21\n53 55\n59 90\n68 71\n29 51\n52 81\n32 52\n38 44\n57 59\n47 60\n27 32\n49 86\n26 94\n44 45", "output": "6"}, {"input": "16\n4 80\n16 46\n15 16\n60 63\n8 54\n18 49\n67 99\n72 80\n1 8\n19 64\n1 54\n46 94\n2 89\n67 78\n21 47\n5 29", "output": "5"}, {"input": "17\n34 42\n31 84\n8 96\n63 88\n11 99\n80 99\n1 96\n11 12\n27 28\n4 30\n1 79\n16 86\n15 86\n13 80\n3 98\n37 89\n59 88", "output": "4"}, {"input": "18\n11 94\n12 85\n25 90\n7 61\n63 88\n6 87\n49 88\n16 76\n12 78\n61 84\n3 84\n20 91\n1 84\n17 100\n43 80\n8 86\n9 98\n35 97", "output": "2"}, {"input": "19\n24 63\n23 86\n5 89\n10 83\n31 92\n8 96\n21 63\n1 83\n2 100\n5 96\n18 98\n9 77\n11 91\n44 95\n1 98\n22 60\n5 98\n22 91\n1 96", "output": "1"}, {"input": "20\n22 77\n13 50\n55 64\n16 52\n67 96\n49 51\n59 95\n2 25\n69 91\n2 24\n4 46\n50 74\n45 63\n39 55\n31 33\n9 33\n6 72\n14 67\n56 98\n69 94", "output": "5"}, {"input": "500000\n180672 280671\n441916 541915\n448663 548662\n58156 158155\n284466 384465\n194984 294983\n43177 143176\n97978 197977\n316991 416990\n170750 270749\n288342 388341\n177043 277042\n433662 533661\n463188 563187\n402100 502099\n166283 266282\n350670 450669\n107980 207979\n417005 517004\n358904 458903\n161700 261699\n267467 367466\n37768 137767\n492699 592698\n459117 559116\n365075 465074\n168596 268595\n396599 496598\n5028 105027\n445252 545251\n182591 282590\n412427 512426\n408912 508911\n340612 440611...", "output": "5"}, {"input": "1\n1 1000000000", "output": "1"}, {"input": "4\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000", "output": "1"}, {"input": "2\n1000000000 1000000000\n1 1", "output": "2"}, {"input": "4\n1 10000\n2 3\n4 5\n6 7", "output": "3"}, {"input": "3\n1 10\n2 4\n6 8", "output": "2"}, {"input": "2\n1 4\n2 3", "output": "1"}, {"input": "3\n1 100\n2 3\n4 5", "output": "2"}, {"input": "4\n1 10\n2 3\n4 5\n6 7", "output": "3"}, {"input": "3\n1 5\n2 3\n4 4", "output": "2"}, {"input": "3\n1 1000\n1 5\n6 1000", "output": "2"}, {"input": "3\n1 10000\n3 5\n7 8", "output": "2"}, {"input": "4\n1 5\n6 15\n8 10\n11 17", "output": "3"}, {"input": "4\n1 3\n6 800\n7 9\n10 11", "output": "3"}, {"input": "5\n1 10\n2 3\n4 5\n6 7\n8 9", "output": "4"}, {"input": "3\n1 5\n1 3\n4 6", "output": "2"}, {"input": "3\n1 10\n2 3\n4 5", "output": "2"}, {"input": "2\n1 3\n2 4", "output": "1"}], "language": "cpp"}, "prompt": "B. Restaurant\ntime limit per test\n4 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nA restaurant received n orders for the rental. Each rental order reserve the restaurant for a continuous period of time, the i-th order is characterized by two time values - the start time li and the finish time ri (li <= ri).\nRestaurant management can accept and reject orders. What is the maximal number of orders the restaurant can accept?\nNo two accepted orders can intersect, i.e. they can't share even a moment of time. If one order ends in the moment other starts, they can't be accepted both.\nInput\nThe first line contains integer number n (1 <= n <= 5.105) - number of orders. The following n lines contain integer values li and ri each (1 <= li <= ri <= 109).\nOutput\nPrint the maximal number of orders that can be accepted.\n", "generation": "int solve(vector<int>& l, vector<int>& r) {\n  vector<int> v(r.size());\n  for(int i = 0; i < r.size(); i++) {\n    v[i] = r[i] - l[i] + 1;\n  }\n  sort(v.begin(), v.end());\n  int ans = 1;\n  int current = v[0];\n  for(int i = 1; i < v.size(); i++) {\n    if(v[i] <= current) {\n      current = max(current, v[i] + 1);\n      ans++;\n    } else {\n      current = v[i] + 1;\n    }\n  }\n  return ans;\n}\n", "result": "failed: compilation error: test.cpp:1:11: error: \u2018vector\u2019 was not declared in this scope\n    1 | int solve(vector<int>& l, vector<int>& r) {\n      |           ^~~~~~\ntest.cpp:1:18: error: expected primary-expression before \u2018int\u2019\n    1 | int solve(vector<int>& l, vector<int>& r) {\n      |                  ^~~\ntest.cpp:1:27: error: \u2018vector\u2019 was not declared in this scope\n    1 | int solve(vector<int>& l, vector<int>& r) {\n      |                           ^~~~~~\ntest.cpp:1:34: error: expected primary-expression before \u2018int\u2019\n    1 | int solve(vector<int>& l, vector<int>& r) {\n      |                                  ^~~\ntest.cpp:1:41: error: expression list treated as compound expression in initializer [-fpermissive]\n    1 | int solve(vector<int>& l, vector<int>& r) {\n      |                                         ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/95", "completion_id": 0, "test_suite": {"code": "int findNumberOfIncreasingSubsequences(int n, int k, vector<int> &arr) {\n  vector<int> dp(n + 1, 0);\n  dp[0] = 1;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j <= k; j++) {\n      if (dp[j] > 0) {\n        if (arr[i] > arr[j]) {\n          dp[i + 1] = max(dp[i + 1], dp[j] + 1);\n        }\n      }\n    }\n  }\n  return dp[n + 1];\n}\n", "testcases": [{"input": "5 2\n1\n2\n3\n5\n4", "output": "7"}, {"input": "1 0\n1", "output": "1"}, {"input": "2 1\n1\n2", "output": "1"}, {"input": "2 1\n2\n1", "output": "0"}, {"input": "3 2\n1\n2\n3", "output": "1"}, {"input": "3 1\n1\n3\n2", "output": "2"}, {"input": "3 1\n2\n1\n3", "output": "2"}, {"input": "3 1\n2\n3\n1", "output": "1"}, {"input": "3 1\n3\n1\n2", "output": "1"}, {"input": "3 2\n3\n2\n1", "output": "0"}, {"input": "10 2\n6\n10\n9\n7\n1\n2\n8\n5\n4\n3", "output": "5"}, {"input": "100000 3\n100000\n99999\n99998\n99997\n99996\n99995\n99994\n99993\n99992\n99991\n99990\n99989\n99988\n99987\n99986\n99985\n99984\n99983\n99982\n99981\n99980\n99979\n99978\n99977\n99976\n99975\n99974\n99973\n99972\n99971\n99970\n99969\n99968\n99967\n99966\n99965\n99964\n99963\n99962\n99961\n99960\n99959\n99958\n99957\n99956\n99955\n99954\n99953\n99952\n99951\n99950\n99949\n99948\n99947\n99946\n99945\n99944\n99943\n99942\n99941\n99940\n99939\n99938\n99937\n99936\n99935\n99934\n99933\n99932\n99931\n99930\n999...", "output": "0"}, {"input": "100 7\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100", "output": "186087894300"}], "language": "cpp"}, "prompt": "C. Subsequences\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nFor the given sequence with n different elements find the number of increasing subsequences with k + 1 elements. It is guaranteed that the answer is not greater than 8.1018.\nInput\nFirst line contain two integer values n and k (1 <= n <= 105, 0 <= k <= 10) - the length of sequence and the number of elements in increasing subsequences.\nNext n lines contains one integer ai (1 <= ai <= n) each - elements of sequence. All values ai are different.\nOutput\nPrint one integer - the answer to the problem.\n", "generation": "int findNumberOfIncreasingSubsequences(int n, int k, vector<int> &arr) {\n  vector<int> dp(n + 1, 0);\n  dp[0] = 1;\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j <= k; j++) {\n      if (dp[j] > 0) {\n        if (arr[i] > arr[j]) {\n          dp[i + 1] = max(dp[i + 1], dp[j] + 1);\n        }\n      }\n    }\n  }\n  return dp[n + 1];\n}\n", "result": "failed: compilation error: test.cpp:1:54: error: \u2018vector\u2019 has not been declared\n    1 | int findNumberOfIncreasingSubsequences(int n, int k, vector<int> &arr) {\n      |                                                      ^~~~~~\ntest.cpp:1:60: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018<\u2019 token\n    1 | int findNumberOfIncreasingSubsequences(int n, int k, vector<int> &arr) {\n      |                                                            ^\ntest.cpp: In function \u2018int findNumberOfIncreasingSubsequences(int, int, int)\u2019:\ntest.cpp:2:3: error: \u2018vector\u2019 was not declared in this scope\n    2 |   vector<int> dp(n + 1, 0);\n      |   ^~~~~~\ntest.cpp:2:10: error: expected primary-expression before \u2018int\u2019\n    2 |   vector<int> dp(n + 1, 0);\n      |          ^~~\ntest.cpp:3:3: error: \u2018dp\u2019 was not declared in this scope\n    3 |   dp[0] = 1;\n      |   ^~\ntest.cpp:7:13: error: \u2018arr\u2019 was not declared in this scope\n    7 |         if (arr[i] > arr[j]) {\n      |             ^~~\ntest.cpp:8:23: error: \u2018max\u2019 was not declared in this scope\n    8 |           dp[i + 1] = max(dp[i + 1], dp[j] + 1);\n      |                       ^~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/96", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nvoid solve() {\n  int n;\n  cin >> n;\n  long long sum = 0;\n  for (int i = 1; i <= n; i++) {\n    sum += i - 2 * pow(2, int(log2(i)) + pow(2, int(log2(i))) * -1;\n  }\n  cout << sum << endl;\n}\n\nint main() {\n  int t;\n  cin >> t;\n  for (int i = 0; i < t; i++) {\n    solve();\n  }\n  return 0;\n}\n", "testcases": [{"input": "2\n4\n1000000000", "output": "-4\n499999998352516354"}, {"input": "10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", "output": "-1\n-3\n0\n-4\n1\n7\n14\n6\n15\n25"}, {"input": "10\n10\n9\n47\n33\n99\n83\n62\n1\n100\n53", "output": "25\n15\n1002\n435\n4696\n3232\n1827\n-1\n4796\n1305"}, {"input": "1\n16", "output": "74"}, {"input": "13\n1\n19\n31\n19\n19\n92\n74\n69\n32\n32\n91\n42\n73", "output": "-1\n128\n434\n128\n128\n4024\n2521\n2161\n402\n402\n3932\n777\n2447"}, {"input": "1\n16383", "output": "134176770"}, {"input": "16\n100100\n100100\n100100\n100100\n100100\n100100\n100100\n100100\n100100\n100100\n100100\n100100\n100100\n100100\n100100\n100100", "output": "5009792908\n5009792908\n5009792908\n5009792908\n5009792908\n5009792908\n5009792908\n5009792908\n5009792908\n5009792908\n5009792908\n5009792908\n5009792908\n5009792908\n5009792908\n5009792908"}, {"input": "1\n414234", "output": "85794061921"}, {"input": "1\n414232", "output": "85793233454"}, {"input": "3\n414231\n414231\n414231", "output": "85792819222\n85792819222\n85792819222"}, {"input": "1\n121", "output": "7127"}], "language": "cpp"}, "prompt": "A. Tricky Sum\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nIn this problem you are to calculate the sum of all integers from 1 to n, but you should take all powers of two with minus in the sum.\nFor example, for n = 4 the sum is equal to  - 1 - 2 + 3 - 4 =  - 4, because 1, 2 and 4 are 20, 21 and 22 respectively.\nCalculate the answer for t values of n.\nInput\nThe first line of the input contains a single integer t (1 <= t <= 100) - the number of values of n to be processed.\nEach of next t lines contains a single integer n (1 <= n <= 109).\nOutput\nPrint the requested sum for each of t integers n given in the input.\n", "generation": "#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nvoid solve() {\n  int n;\n  cin >> n;\n  long long sum = 0;\n  for (int i = 1; i <= n; i++) {\n    sum += i - 2 * pow(2, int(log2(i)) + pow(2, int(log2(i))) * -1;\n  }\n  cout << sum << endl;\n}\n\nint main() {\n  int t;\n  cin >> t;\n  for (int i = 0; i < t; i++) {\n    solve();\n  }\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018void solve()\u2019:\ntest.cpp:11:31: error: \u2018log2\u2019 was not declared in this scope\n   11 |     sum += i - 2 * pow(2, int(log2(i)) + pow(2, int(log2(i))) * -1;\n      |                               ^~~~\ntest.cpp:11:42: error: \u2018pow\u2019 was not declared in this scope\n   11 |     sum += i - 2 * pow(2, int(log2(i)) + pow(2, int(log2(i))) * -1;\n      |                                          ^~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/97", "completion_id": 0, "test_suite": {"code": "int solve(int n, int m, int k, vector<vector<char>>& g, vector<int> x, vector<int> y) {\n  vector<vector<int>> dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n  vector<int> ans(k);\n  for (int i = 0; i < k; i++) {\n    int xx = x[i] + dir[0][0];\n    int yy = y[i] + dir[1][0];\n    int cnt = 0;\n    for (int d = 0; d < 4; d++) {\n      int x_ = xx + dir[d][0];\n      int y_ = yy + dir[d][1];\n      if (x_ >= 1 && x_ <= n && y_ >= 1 && y_ <= m && g[x_][y_] == '.') {\n        cnt++;\n      }\n    }\n    ans[i] = cnt;\n  }\n  return ans;\n}\n", "testcases": [{"input": "5 6 3\n******\n*..*.*\n******\n*....*\n******\n2 2\n2 5\n4 3", "output": "6\n4\n10"}, {"input": "4 4 1\n****\n*..*\n*.**\n****\n3 2", "output": "8"}, {"input": "3 3 1\n***\n*.*\n***\n2 2", "output": "4"}, {"input": "5 5 10\n*****\n*...*\n*..**\n*.***\n*****\n2 4\n4 2\n2 2\n2 3\n2 2\n2 2\n2 4\n3 2\n2 2\n2 2", "output": "12\n12\n12\n12\n12\n12\n12\n12\n12\n12"}, {"input": "10 3 10\n***\n*.*\n*.*\n***\n***\n*.*\n*.*\n*.*\n*.*\n***\n2 2\n2 2\n2 2\n2 2\n8 2\n2 2\n2 2\n7 2\n8 2\n6 2", "output": "6\n6\n6\n6\n10\n6\n6\n10\n10\n10"}, {"input": "3 10 10\n**********\n***.*.*..*\n**********\n2 6\n2 6\n2 9\n2 9\n2 4\n2 9\n2 6\n2 6\n2 4\n2 6", "output": "4\n4\n6\n6\n4\n6\n4\n4\n4\n4"}, {"input": "10 10 50\n**********\n*......***\n***..**..*\n***....***\n**..***..*\n**..**.*.*\n*****..***\n*.***..***\n*..****.**\n**********\n5 9\n5 9\n7 7\n6 4\n6 7\n8 7\n6 7\n9 2\n3 9\n9 2\n4 7\n4 6\n2 7\n9 2\n7 7\n5 8\n8 7\n8 6\n7 7\n5 9\n8 7\n3 8\n3 8\n5 9\n9 8\n9 3\n8 7\n5 9\n9 2\n9 8\n9 3\n3 8\n9 2\n8 6\n2 4\n6 9\n6 3\n9 8\n3 9\n9 8\n4 5\n8 6\n3 8\n5 9\n8 7\n5 8\n6 9\n8 2\n3 9\n3 9", "output": "8\n8\n10\n28\n10\n10\n10\n8\n6\n8\n28\n28\n28\n8\n10\n8\n10\n10\n10\n8\n10\n6\n6\n8\n4\n8\n10\n8\n8\n4\n8\n6\n8\n10\n28\n8\n28\n4\n6\n4\n28\n10\n6\n8\n10\n8\n8\n8\n6\n6"}, {"input": "5 5 21\n*****\n*.***\n*****\n*****\n*****\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2", "output": "4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4\n4"}], "language": "cpp"}, "prompt": "D. Igor In the Museum\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nIgor is in the museum and he wants to see as many pictures as possible.\nMuseum can be represented as a rectangular field of n * m cells. Each cell is either empty or impassable. Empty cells are marked with '.', impassable cells are marked with '*'. Every two adjacent cells of different types (one empty and one impassable) are divided by a wall containing one picture.\nAt the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one.\nFor several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.\nInput\nFirst line of the input contains three integers n, m and k (3 <= n, m <= 1000, 1 <= k <= min(n.m, 100 000)) - the museum dimensions and the number of starting positions to process.\nEach of the next n lines contains m symbols '.', '*' - the description of the museum. It is guaranteed that all border cells are impassable, so Igor can't go out from the museum.\nEach of the last k lines contains two integers x and y (1 <= x <= n, 1 <= y <= m) - the row and the column of one of Igor's starting positions respectively. Rows are numbered from top to bottom, columns - from left to right. It is guaranteed that all starting positions are empty cells.\nOutput\nPrint k integers - the maximum number of pictures, that Igor can see if he starts in corresponding position.\n", "generation": "int solve(int n, int m, int k, vector<vector<char>>& g, vector<int> x, vector<int> y) {\n  vector<vector<int>> dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n  vector<int> ans(k);\n  for (int i = 0; i < k; i++) {\n    int xx = x[i] + dir[0][0];\n    int yy = y[i] + dir[1][0];\n    int cnt = 0;\n    for (int d = 0; d < 4; d++) {\n      int x_ = xx + dir[d][0];\n      int y_ = yy + dir[d][1];\n      if (x_ >= 1 && x_ <= n && y_ >= 1 && y_ <= m && g[x_][y_] == '.') {\n        cnt++;\n      }\n    }\n    ans[i] = cnt;\n  }\n  return ans;\n}\n", "result": "failed: compilation error: test.cpp:1:32: error: \u2018vector\u2019 has not been declared\n    1 | int solve(int n, int m, int k, vector<vector<char>>& g, vector<int> x, vector<int> y) {\n      |                                ^~~~~~\ntest.cpp:1:38: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018<\u2019 token\n    1 | int solve(int n, int m, int k, vector<vector<char>>& g, vector<int> x, vector<int> y) {\n      |                                      ^\ntest.cpp: In function \u2018int solve(int, int, int, int)\u2019:\ntest.cpp:2:3: error: \u2018vector\u2019 was not declared in this scope\n    2 |   vector<vector<int>> dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n      |   ^~~~~~\ntest.cpp:2:17: error: expected primary-expression before \u2018int\u2019\n    2 |   vector<vector<int>> dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n      |                 ^~~\ntest.cpp:3:10: error: expected primary-expression before \u2018int\u2019\n    3 |   vector<int> ans(k);\n      |          ^~~\ntest.cpp:5:14: error: \u2018x\u2019 was not declared in this scope; did you mean \u2018xx\u2019?\n    5 |     int xx = x[i] + dir[0][0];\n      |              ^\n      |              xx\ntest.cpp:5:21: error: \u2018dir\u2019 was not declared in this scope\n    5 |     int xx = x[i] + dir[0][0];\n      |                     ^~~\ntest.cpp:6:14: error: \u2018y\u2019 was not declared in this scope; did you mean \u2018yy\u2019?\n    6 |     int yy = y[i] + dir[1][0];\n      |              ^\n      |              yy\ntest.cpp:11:55: error: \u2018g\u2019 was not declared in this scope\n   11 |       if (x_ >= 1 && x_ <= n && y_ >= 1 && y_ <= m && g[x_][y_] == '.') {\n      |                                                       ^\ntest.cpp:15:5: error: \u2018ans\u2019 was not declared in this scope\n   15 |     ans[i] = cnt;\n      |     ^~~\ntest.cpp:17:10: error: \u2018ans\u2019 was not declared in this scope\n   17 |   return ans;\n      |          ^~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/98", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n  int t;\n  cin >> t;\n\n  for (int i = 0; i < t; i++) {\n    int n, m, k;\n    cin >> n;\n    cin >> m;\n    cin >> k;\n\n    int area = n * m;\n    int minCost = INT_MAX;\n\n    if (k <= area) {\n      int minBreak = min((n - 1) * m + m * (k - 1), n * (m - 1) + k - 1);\n      minCost = minBreak;\n    } else {\n      minCost = area - k + k - 1;\n    }\n\n    cout << minCost << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "4\n2 2 1\n2 2 3\n2 2 2\n2 2 4", "output": "5\n5\n4\n0"}], "language": "cpp"}, "prompt": "E. Chocolate Bar\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nYou have a rectangular chocolate bar consisting of n * m single squares. You want to eat exactly k squares, so you may need to break the chocolate bar.\nIn one move you can break any single rectangular piece of chocolate in two rectangular pieces. You can break only by lines between squares: horizontally or vertically. The cost of breaking is equal to square of the break length.\nFor example, if you have a chocolate bar consisting of 2 * 3 unit squares then you can break it horizontally and get two 1 * 3 pieces (the cost of such breaking is 32 = 9), or you can break it vertically in two ways and get two pieces: 2 * 1 and 2 * 2 (the cost of such breaking is 22 = 4).\nFor several given values n, m and k find the minimum total cost of breaking. You can eat exactly k squares of chocolate if after all operations of breaking there is a set of rectangular pieces of chocolate with the total size equal to k squares. The remaining n.m - k squares are not necessarily form a single rectangular piece.\nInput\nThe first line of the input contains a single integer t (1 <= t <= 40910) - the number of values n, m and k to process.\nEach of the next t lines contains three integers n, m and k (1 <= n, m <= 30, 1 <= k <= min(n.m, 50)) - the dimensions of the chocolate bar and the number of squares you want to eat respectively.\nOutput\nFor each n, m and k print the minimum total cost needed to break the chocolate bar, in order to make it possible to eat exactly k squares.\n", "generation": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n  int t;\n  cin >> t;\n\n  for (int i = 0; i < t; i++) {\n    int n, m, k;\n    cin >> n;\n    cin >> m;\n    cin >> k;\n\n    int area = n * m;\n    int minCost = INT_MAX;\n\n    if (k <= area) {\n      int minBreak = min((n - 1) * m + m * (k - 1), n * (m - 1) + k - 1);\n      minCost = minBreak;\n    } else {\n      minCost = area - k + k - 1;\n    }\n\n    cout << minCost << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:17:19: error: \u2018INT_MAX\u2019 was not declared in this scope\n   17 |     int minCost = INT_MAX;\n      |                   ^~~~~~~\ntest.cpp:3:1: note: \u2018INT_MAX\u2019 is defined in header \u2018<climits>\u2019; did you forget to \u2018#include <climits>\u2019?\n    2 | #include <algorithm>\n  +++ |+#include <climits>\n    3 | \n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/102", "completion_id": 0, "test_suite": {"code": "int solve(int d1, int d2, int d3) {\n  return d1 + d2 + d3 - 2 * min(d1, d2) + min(d1, d2);\n}\n", "testcases": [{"input": "10 20 30", "output": "60"}, {"input": "1 1 5", "output": "4"}, {"input": "100 33 34", "output": "134"}, {"input": "777 777 777", "output": "2331"}, {"input": "2 2 8", "output": "8"}, {"input": "12 34 56", "output": "92"}, {"input": "789 101112 131415", "output": "203802"}, {"input": "27485716 99999999 35182", "output": "55041796"}, {"input": "1 293548 5", "output": "12"}, {"input": "12059 259855 5874875", "output": "543828"}, {"input": "46981 105809 585858", "output": "305580"}, {"input": "9889 1221 2442", "output": "7326"}, {"input": "100500 200600 300700", "output": "601800"}, {"input": "318476 318476 318476", "output": "955428"}, {"input": "23985 3353 75633", "output": "54676"}, {"input": "120 1298 2222", "output": "2836"}, {"input": "98437 23487 666672", "output": "243848"}, {"input": "100000000 100000000 100000000", "output": "300000000"}, {"input": "2 5 2", "output": "8"}, {"input": "1 1000 1", "output": "4"}, {"input": "1 100000000 1", "output": "4"}], "language": "cpp"}, "prompt": "A. Patrick and Shopping\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nToday Patrick waits for a visit from his friend Spongebob. To prepare for the visit, Patrick needs to buy some goodies in two stores located near his house. There is a d1 meter long road between his house and the first shop and a d2 meter long road between his house and the second shop. Also, there is a road of length d3 directly connecting these two shops to each other. Help Patrick calculate the minimum distance that he needs to walk in order to go to both shops and return to his house.\nPatrick always starts at his house. He should visit both shops moving only along the three existing roads and return back to his house. He doesn't mind visiting the same shop or passing the same road multiple times. The only goal is to minimize the total distance traveled.\nInput\nThe first line of the input contains three integers d1, d2, d3 (1 <= d1, d2, d3 <= 108) - the lengths of the paths.\nd1 is the length of the path connecting Patrick's house and the first shop;\nd2 is the length of the path connecting Patrick's house and the second shop;\nd3 is the length of the path connecting both shops.\nOutput\nPrint the minimum distance that Patrick will have to walk in order to visit both shops and return to his house.\n", "generation": "int solve(int d1, int d2, int d3) {\n  return d1 + d2 + d3 - 2 * min(d1, d2) + min(d1, d2);\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int solve(int, int, int)\u2019:\ntest.cpp:2:29: error: \u2018min\u2019 was not declared in this scope\n    2 |   return d1 + d2 + d3 - 2 * min(d1, d2) + min(d1, d2);\n      |                             ^~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/103", "completion_id": 0, "test_suite": {"code": "int solve(int n, vector<int> &h) {\n  vector<int> dp(n, 0);\n  dp[0] = 1;\n  for(int i = 1; i < n; i++) {\n    dp[i] = dp[i - 1] + 1;\n    for(int j = 0; j < i; j++) {\n      if(h[j] <= h[i]) {\n        dp[i] = max(dp[i], dp[j] + 1);\n      }\n    }\n  }\n  return dp[n - 1];\n}\n", "testcases": [{"input": "3\n1 2 3", "output": "3"}, {"input": "4\n2 1 3 2", "output": "2"}, {"input": "17\n1 45 22 39 28 23 23 100 500 778 777 778 1001 1002 1005 1003 1005", "output": "10"}, {"input": "500\n82 100 97 79 84 32 3 92 74 41 32 83 54 3 88 32 46 98 79 39 10 80 35 45 59 76 35 92 74 78 83 3 73 66 98 20 92 66 82 38 93 13 19 34 34 99 28 28 87 82 11 20 95 75 72 3 52 62 32 83 86 81 29 102 86 35 52 69 78 34 29 97 43 68 67 10 83 48 76 95 87 72 50 73 82 63 5 45 79 77 12 84 47 12 97 7 59 99 16 8 18 68 78 84 63 40 40 46 14 72 16 76 28 90 29 5 45 92 9 15 18 39 64 14 98 75 58 69 66 68 65 75 18 75 82 10 10 67 10 32 6 80 47 71 80 19 69 5 17 38 4 72 44 72 60 96 26 29 50 75 33 9 64 43 29 98 44 14 58 22 95 6 48...", "output": "1"}, {"input": "101\n1 50 170 148 214 153 132 234 181 188 180 225 226 200 197 122 181 168 87 220 223 160 235 94 257 145 199 235 102 146 119 60 109 134 209 260 210 191 180 271 236 195 155 169 166 143 246 102 208 137 278 269 156 251 198 165 111 198 151 213 256 121 276 163 179 285 104 99 139 122 188 184 215 242 244 115 304 259 135 149 104 72 303 291 124 237 112 165 183 168 71 139 85 131 137 107 120 267 235 337 69", "output": "3"}, {"input": "10\n1 2 2 2 2 2 2 2 2 1", "output": "2"}, {"input": "25\n1 2 3 4 4 4 4 4 4 4 2 3 5 5 7 9 8 5 10 12 15 12 100500 800600 228228228", "output": "12"}, {"input": "10\n17 18 19 19 18 17 100 500 100 100", "output": "4"}, {"input": "100000\n884 839 780 508 625 765 988 346 933 106 387 718 513 557 56 754 419 535 443 106 993 789 86 871 702 902 441 336 98 278 306 733 330 405 658 993 744 11 452 522 627 430 703 970 472 212 473 46 841 209 893 792 549 192 955 346 705 488 817 152 116 123 576 87 833 224 542 877 916 621 593 498 438 102 337 383 875 19 300 334 255 492 569 720 242 83 214 155 523 831 77 105 287 351 603 109 456 514 357 870 765 452 337 20 677 205 10 460 915 264 973 361 827 54 445 702 362 704 994 795 739 897 613 924 144 139 429 522 258...", "output": "1"}, {"input": "10\n1 1 1 1 5 5 1 1 1 1", "output": "5"}, {"input": "20\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "output": "20"}, {"input": "1\n1", "output": "1"}, {"input": "5\n1 5 3 5 2", "output": "2"}, {"input": "10\n1 1 1 1 2 2 2 2 4 3", "output": "9"}, {"input": "20\n1 2 2 2 5 6 6 6 7 7 8 9 15 15 16 16 17 18 19 19", "output": "20"}, {"input": "99889\n3520412 7265555 1972065 2431777 3185694 2227008 6829177 3124699 4529014 2343274 6387259 4030589 4843735 8575068 8069315 7043289 7956282 1779371 1919822 3512955 749847 3079317 8823568 597395 9721018 9660888 5323556 4258666 2897003 8066966 40631 560618 8945731 4605417 59486 3991196 5289673 4727976 9750472 6936433 8220678 9996039 4084559 4028759 7728353 1472212 5846041 1048696 4589284 7825635 2742845 5137820 7220002 1453482 5590676 6399060 1027634 1525958 6711783 1214425 4231792 322401 3294630 3125021 ...", "output": "1"}, {"input": "4\n2 2 1 1", "output": "1"}], "language": "cpp"}, "prompt": "C. Day at the Beach\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nOne day Squidward, Spongebob and Patrick decided to go to the beach. Unfortunately, the weather was bad, so the friends were unable to ride waves. However, they decided to spent their time building sand castles.\nAt the end of the day there were n castles built by friends. Castles are numbered from 1 to n, and the height of the i-th castle is equal to hi. When friends were about to leave, Squidward noticed, that castles are not ordered by their height, and this looks ugly. Now friends are going to reorder the castles in a way to obtain that condition hi <= hi + 1 holds for all i from 1 to n - 1.\nSquidward suggested the following process of sorting castles:\nCastles are split into blocks - groups of consecutive castles. Therefore the block from i to j will include castles i, i + 1, ..., j. A block may consist of a single castle.\nThe partitioning is chosen in such a way that every castle is a part of exactly one block.\nEach block is sorted independently from other blocks, that is the sequence hi, hi + 1, ..., hj becomes sorted.\nThe partitioning should satisfy the condition that after each block is sorted, the sequence hi becomes sorted too. This may always be achieved by saying that the whole sequence is a single block.\nEven Patrick understands that increasing the number of blocks in partitioning will ease the sorting process. Now friends ask you to count the maximum possible number of blocks in a partitioning that satisfies all the above requirements.\nInput\nThe first line of the input contains a single integer n (1 <= n <= 100 000) - the number of castles Spongebob, Patrick and Squidward made from sand during the day.\nThe next line contains n integers hi (1 <= hi <= 109). The i-th of these integers corresponds to the height of the i-th castle.\nOutput\nPrint the maximum possible number of blocks in a valid partitioning.\n", "generation": "int solve(int n, vector<int> &h) {\n  vector<int> dp(n, 0);\n  dp[0] = 1;\n  for(int i = 1; i < n; i++) {\n    dp[i] = dp[i - 1] + 1;\n    for(int j = 0; j < i; j++) {\n      if(h[j] <= h[i]) {\n        dp[i] = max(dp[i], dp[j] + 1);\n      }\n    }\n  }\n  return dp[n - 1];\n}\n", "result": "failed: compilation error: test.cpp:1:18: error: \u2018vector\u2019 has not been declared\n    1 | int solve(int n, vector<int> &h) {\n      |                  ^~~~~~\ntest.cpp:1:24: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018<\u2019 token\n    1 | int solve(int n, vector<int> &h) {\n      |                        ^\ntest.cpp: In function \u2018int solve(int, int)\u2019:\ntest.cpp:2:3: error: \u2018vector\u2019 was not declared in this scope\n    2 |   vector<int> dp(n, 0);\n      |   ^~~~~~\ntest.cpp:2:10: error: expected primary-expression before \u2018int\u2019\n    2 |   vector<int> dp(n, 0);\n      |          ^~~\ntest.cpp:3:3: error: \u2018dp\u2019 was not declared in this scope\n    3 |   dp[0] = 1;\n      |   ^~\ntest.cpp:7:10: error: \u2018h\u2019 was not declared in this scope\n    7 |       if(h[j] <= h[i]) {\n      |          ^\ntest.cpp:8:17: error: \u2018max\u2019 was not declared in this scope\n    8 |         dp[i] = max(dp[i], dp[j] + 1);\n      |                 ^~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/104", "completion_id": 0, "test_suite": {"code": "int solve() {\n  int n, m, q;\n  cin >> n;\n  cin >> m;\n  cin >> q;\n\n  vector<int> g[n];\n  vector<int> p(n);\n  vector<int> level(n);\n  vector<vector<int>> ans(n);\n\n  for (int i = 0; i < m; i++) {\n    int u, v;\n    cin >> u;\n    cin >> v;\n    g[u].push_back(v);\n  }\n\n  dfs(1, -1, 0);\n\n  for (int i = 0; i < q; i++) {\n    int a, b, c;\n    cin >> a;\n    cin >> b;\n    cin >> c;\n    if (level[a] + level[b] - level[c] != 0) {\n      ans[c] = 0;\n    } else {\n      ans[c] = 1;\n    }\n  }\n\n  int total = 0;\n  for (int i = 1; i <= n; i++) {\n    total += ans[i];\n  }\n\n  cout << total;\n  return 0;\n}\n", "testcases": [{"input": "4 0 0", "output": "16"}, {"input": "4 0 1\n3 4 2", "output": "1"}, {"input": "3 1 0\n1 2", "output": "2"}, {"input": "3 0 2\n2 3 2\n2 3 1", "output": "0"}, {"input": "4 1 2\n1 2\n2 2 2\n3 4 2", "output": "1"}, {"input": "6 2 1\n2 1\n3 6\n5 5 2", "output": "0"}, {"input": "10 0 0", "output": "100000000"}, {"input": "13 0 0", "output": "1792160394037"}, {"input": "9 0 0", "output": "4782969"}, {"input": "8 0 0", "output": "262144"}, {"input": "5 0 0", "output": "125"}, {"input": "1 0 0", "output": "1"}, {"input": "7 0 0", "output": "16807"}, {"input": "11 0 0", "output": "2357947691"}, {"input": "12 0 0", "output": "61917364224"}, {"input": "6 1 0\n3 5", "output": "432"}, {"input": "6 3 2\n1 2\n2 3\n3 4\n1 2 1\n2 3 2", "output": "24"}, {"input": "13 4 15\n1 2\n8 3\n6 4\n10 5\n1 2 1\n2 3 1\n3 4 1\n5 7 2\n8 4 10\n5 7 5\n5 5 5\n7 5 7\n1 1 1\n2 2 1\n13 2 1\n2 13 1\n2 2 2\n4 8 9\n1 1 1", "output": "0"}, {"input": "4 0 2\n1 2 3\n3 2 1", "output": "0"}, {"input": "4 1 0\n3 4", "output": "8"}, {"input": "4 3 0\n1 2\n2 3\n3 4", "output": "1"}, {"input": "5 4 2\n1 2\n2 3\n2 4\n2 5\n1 2 1\n3 4 1", "output": "0"}, {"input": "5 4 2\n1 2\n2 3\n2 4\n2 5\n1 2 1\n3 5 2", "output": "1"}, {"input": "5 2 2\n4 5\n5 1\n3 4 5\n2 2 2", "output": "5"}, {"input": "10 2 3\n1 2\n8 4\n2 3 1\n5 6 8\n4 3 1", "output": "18560"}, {"input": "7 2 3\n1 2\n7 4\n2 3 1\n5 6 7\n4 3 1", "output": "8"}, {"input": "5 2 2\n1 2\n3 5\n2 5 1\n3 2 1", "output": "10"}, {"input": "7 2 4\n1 2\n3 6\n3 2 2\n6 2 2\n7 3 1\n1 1 1", "output": "130"}, {"input": "10 1 10\n5 10\n3 7 1\n5 6 2\n6 9 4\n10 10 10\n9 10 9\n1 5 1\n1 2 1\n1 7 1\n1 9 1\n1 10 1", "output": "0"}, {"input": "9 1 8\n5 9\n3 7 1\n5 6 2\n9 9 9\n1 5 1\n1 2 1\n1 7 1\n1 9 1\n1 8 1", "output": "5526"}, {"input": "9 3 5\n2 1\n1 7\n3 5\n7 5 1\n8 9 9\n8 8 8\n3 6 4\n1 1 1", "output": "88"}, {"input": "7 2 2\n1 5\n1 4\n3 2 2\n6 3 7", "output": "6"}, {"input": "8 1 4\n8 4\n3 7 1\n8 5 8\n4 3 7\n6 1 5", "output": "0"}, {"input": "7 3 3\n7 3\n4 7\n5 7\n7 5 5\n2 7 5\n2 1 3", "output": "0"}, {"input": "8 3 5\n4 8\n6 7\n3 8\n4 6 4\n7 6 7\n2 2 2\n6 1 1\n4 4 4", "output": "410"}, {"input": "9 4 5\n1 3\n8 2\n7 4\n8 9\n2 8 8\n8 8 8\n2 3 1\n3 4 1\n7 3 1", "output": "2512"}, {"input": "6 2 4\n3 4\n3 6\n3 4 4\n2 3 1\n5 4 1\n4 2 1", "output": "3"}, {"input": "7 1 4\n5 2\n5 4 2\n6 2 1\n4 6 1\n4 5 2", "output": "83"}, {"input": "8 5 8\n2 6\n2 8\n3 8\n8 5\n1 4\n5 6 2\n6 5 2\n8 7 4\n6 7 4\n7 3 4\n5 7 4\n7 5 4\n7 6 4", "output": "1"}, {"input": "8 4 3\n5 1\n4 3\n3 8\n7 4\n7 8 4\n7 6 5\n7 3 4", "output": "9"}, {"input": "8 2 5\n5 2\n3 7\n2 6 5\n6 8 5\n4 8 5\n4 2 5\n8 6 5", "output": "184"}, {"input": "6 4 3\n3 5\n1 5\n2 4\n2 5\n3 6 5\n2 3 5\n3 4 5", "output": "3"}, {"input": "13 8 8\n1 12\n9 8\n8 3\n11 4\n11 12\n10 6\n3 7\n3 2\n2 6 11\n5 10 11\n13 7 11\n5 2 11\n10 2 11\n8 5 11\n6 5 11\n13 3 11", "output": "270"}, {"input": "5 2 1\n1 5\n3 1\n5 4 1", "output": "10"}, {"input": "13 4 22\n12 11\n9 10\n10 3\n11 2\n8 12 3\n8 13 3\n8 2 3\n2 8 3\n7 9 3\n10 8 3\n4 12 3\n12 2 11\n12 8 3\n9 4 3\n12 4 3\n7 10 3\n12 5 3\n13 4 3\n8 11 3\n7 11 3\n11 7 3\n7 13 3\n8 9 3\n7 2 3\n7 5 3\n9 8 3", "output": "23287"}, {"input": "8 3 2\n7 4\n5 8\n7 3\n8 2 5\n6 8 5", "output": "153"}, {"input": "13 3 45\n7 3\n4 9\n2 11\n8 7 10\n13 4 10\n3 11 2\n7 8 10\n4 2 10\n8 12 10\n4 3 10\n12 3 2\n5 3 10\n11 7 2\n7 11 2\n12 13 2\n12 8 10\n13 9 10\n4 13 10\n13 11 2\n13 12 2\n2 9 10\n8 6 10\n2 8 10\n5 7 10\n4 7 10\n7 12 2\n6 12 2\n13 5 10\n3 5 10\n8 9 4\n8 3 10\n11 8 10\n11 3 2\n8 13 10\n11 4 10\n11 13 2\n7 9 10\n13 8 10\n9 8 4\n5 12 10\n12 4 10\n8 2 10\n3 12 2\n5 11 10\n5 2 10\n9 13 10\n5 8 4\n6 5 10", "output": "216"}, {"input": "8 5 0\n3 1\n4 7\n8 4\n2 1\n2 5", "output": "96"}, {"input": "8 4 1\n6 3\n8 6\n8 5\n7 2\n3 5 6", "output": "128"}, {"input": "9 4 6\n1 4\n8 4\n4 7\n7 9\n6 1 1\n3 5 1\n7 3 1\n8 3 1\n8 4 4\n2 1 1", "output": "505"}, {"input": "5 2 10\n5 4\n2 1\n1 3 1\n3 1 1\n5 4 4\n3 2 2\n3 3 3\n2 1 1\n4 3 4\n1 2 1\n5 5 5\n5 5 5", "output": "2"}, {"input": "11 4 14\n3 7\n1 6\n8 4\n7 5\n6 4 1\n10 3 1\n6 11 1\n11 4 1\n8 1 1\n6 3 1\n11 1 1\n6 4 1\n2 2 2\n11 2 1\n11 7 1\n3 4 5\n11 3 1\n7 4 5", "output": "1238"}, {"input": "7 3 9\n2 3\n2 5\n6 7\n4 4 4\n3 5 2\n5 4 1\n1 7 1\n5 6 2\n5 1 1\n4 4 4\n2 7 2\n1 7 1", "output": "4"}, {"input": "4 1 9\n1 2\n2 3 2\n2 1 1\n3 4 2\n2 3 2\n1 4 1\n1 2 1\n1 3 1\n2 3 2\n4 4 4", "output": "1"}, {"input": "10 4 40\n7 2\n3 7\n2 8\n8 1\n4 4 4\n5 7 7\n8 3 8\n4 2 2\n2 1 1\n4 3 3\n3 3 3\n1 10 1\n1 4 1\n2 2 2\n4 8 8\n1 4 1\n6 1 1\n1 6 1\n7 4 7\n5 2 2\n9 6 7\n1 6 1\n7 9 7\n1 8 1\n4 4 4\n3 5 3\n5 3 3\n5 2 2\n10 9 7\n8 10 8\n7 7 7\n10 10 10\n7 7 7\n5 8 8\n5 4 3\n3 8 8\n10 2 2\n2 10 2\n4 8 8\n10 2 2\n1 10 1\n7 4 7\n2 3 2\n2 2 2", "output": "65"}, {"input": "8 4 55\n8 4\n2 7\n3 4\n7 1\n1 5 1\n4 2 2\n6 2 1\n2 7 7\n5 5 5\n5 8 2\n7 2 7\n2 3 2\n6 6 6\n1 5 1\n7 2 7\n5 8 2\n3 7 7\n8 5 2\n6 2 1\n7 2 7\n8 6 1\n6 5 1\n7 2 7\n1 4 1\n3 3 3\n8 3 4\n7 1 1\n4 5 2\n8 2 2\n4 7 7\n6 5 1\n1 2 1\n5 1 1\n2 1 1\n4 2 2\n7 7 7\n3 2 2\n6 8 1\n6 7 1\n8 8 8\n1 7 1\n5 4 2\n2 3 2\n7 5 7\n4 4 4\n4 6 1\n7 4 7\n6 7 1\n6 4 1\n1 2 1\n4 7 7\n1 8 1\n4 7 7\n6 3 1\n2 4 2\n4 6 1\n7 2 7\n2 7 7\n7 5 7", "output": "1"}, {"input": "8 5 27\n2 7\n8 2\n1 4\n6 1\n8 5\n2 6 1\n8 2 8\n1 3 1\n2 6 1\n2 3 2\n6 5 1\n8 4 4\n5 8 5\n7 1 1\n7 8 8\n7 2 2\n1 8 1\n4 7 4\n6 6 6\n3 5 5\n2 4 4\n6 7 1\n4 4 4\n7 5 5\n3 4 4\n1 4 1\n4 3 4\n2 4 4\n5 3 5\n1 1 1\n4 1 1\n5 6 1", "output": "2"}, {"input": "7 3 22\n5 1\n7 1\n3 5\n3 4 3\n4 4 4\n1 1 1\n5 2 5\n6 2 2\n6 7 1\n7 1 1\n7 7 7\n2 1 1\n4 6 2\n1 1 1\n4 7 1\n3 1 1\n4 1 1\n6 2 2\n4 1 1\n1 5 1\n3 5 5\n3 3 3\n2 4 2\n1 5 1\n6 2 2", "output": "1"}, {"input": "11 2 52\n9 1\n11 1\n10 2 1\n1 11 1\n3 2 1\n9 6 1\n7 7 7\n1 10 1\n3 3 3\n7 8 1\n7 3 3\n5 2 1\n2 7 1\n7 11 1\n5 6 1\n2 8 1\n1 4 1\n5 11 1\n5 4 1\n11 8 1\n9 4 1\n1 9 1\n10 8 1\n4 3 3\n2 7 1\n10 10 10\n6 10 1\n6 6 6\n10 3 1\n10 9 1\n11 5 1\n11 5 1\n11 1 1\n7 2 1\n8 10 1\n8 1 1\n4 6 1\n3 5 1\n11 7 1\n5 10 1\n1 9 1\n9 5 9\n2 3 1\n11 3 1\n4 1 1\n10 5 1\n7 4 3\n11 7 1\n6 7 1\n11 3 1\n2 10 1\n5 5 5\n8 11 1\n5 10 1", "output": "50"}, {"input": "12 0 57\n9 6 6\n11 7 6\n11 10 6\n12 12 12\n10 1 1\n8 5 5\n9 6 6\n8 4 4\n8 2 6\n1 2 1\n9 10 10\n2 2 2\n7 7 7\n11 2 11\n10 5 5\n1 3 1\n7 9 6\n8 9 10\n11 12 6\n9 5 5\n2 4 4\n11 3 6\n2 2 2\n10 11 6\n5 3 5\n6 8 6\n11 3 6\n10 7 6\n5 2 6\n1 9 1\n6 2 6\n6 6 6\n2 9 6\n12 3 3\n10 3 10\n6 5 6\n3 1 1\n9 11 6\n1 10 1\n8 10 10\n4 2 4\n10 1 1\n7 5 6\n10 8 10\n6 2 6\n12 9 10\n10 11 6\n5 1 1\n7 6 6\n7 9 6\n7 1 1\n4 9 4\n5 2 6\n2 12 6\n4 1 1\n12 7 6\n7 8 6", "output": "5"}, {"input": "11 0 51\n10 10 10\n9 8 1\n11 6 1\n3 8 1\n11 8 11\n1 8 1\n6 2 1\n7 2 2\n6 1 1\n10 2 10\n1 3 1\n6 7 1\n4 4 4\n9 8 1\n10 4 10\n4 11 11\n5 10 10\n7 9 1\n2 1 1\n6 4 1\n8 4 8\n5 10 10\n8 6 1\n4 6 1\n5 8 2\n10 4 10\n8 4 8\n3 11 1\n1 1 1\n3 4 1\n2 10 10\n6 8 1\n7 11 11\n11 7 11\n10 7 10\n1 5 1\n5 11 11\n9 9 9\n10 3 1\n2 1 1\n1 6 1\n8 3 1\n4 6 1\n5 4 2\n8 1 1\n5 4 2\n5 2 2\n6 2 1\n9 1 1\n3 4 1\n5 5 5", "output": "224"}, {"input": "12 0 59\n5 4 4\n9 6 9\n9 10 9\n3 7 3\n5 6 9\n3 9 9\n1 1 1\n11 1 1\n11 4 11\n9 7 9\n10 11 11\n10 9 9\n7 3 3\n2 5 9\n7 4 4\n3 11 11\n5 7 9\n7 3 3\n6 3 9\n9 1 1\n1 2 1\n1 7 1\n4 11 11\n4 10 4\n2 11 11\n7 5 9\n2 2 2\n6 11 11\n9 9 9\n10 4 4\n8 7 3\n3 7 3\n10 1 1\n4 1 1\n2 8 9\n8 9 9\n3 2 9\n8 8 8\n2 10 9\n2 3 9\n8 8 8\n6 5 9\n3 9 9\n5 5 5\n11 5 11\n6 5 9\n3 11 11\n1 8 1\n2 2 2\n9 11 11\n7 8 3\n5 9 9\n7 2 9\n9 10 9\n1 8 1\n11 2 11\n5 1 1\n3 11 11\n6 1 1", "output": "631"}, {"input": "9 0 44\n3 1 1\n6 9 3\n1 3 1\n9 7 9\n5 2 5\n6 7 3\n2 1 1\n7 9 9\n5 1 1\n6 3 3\n2 9 3\n6 2 6\n6 1 1\n5 9 5\n7 1 1\n2 6 6\n4 6 5\n7 3 3\n2 1 1\n5 9 5\n5 6 5\n7 9 9\n1 5 1\n5 8 8\n5 5 5\n5 2 5\n4 9 5\n6 6 6\n9 6 3\n5 6 5\n4 2 5\n4 2 5\n5 5 5\n7 8 8\n6 1 1\n9 6 3\n2 4 5\n1 6 1\n6 6 6\n7 2 3\n8 6 8\n4 1 1\n4 9 5\n6 2 6", "output": "1"}, {"input": "4 1 15\n3 4\n2 4 2\n1 3 1\n4 2 2\n2 1 1\n1 3 1\n2 3 2\n2 4 2\n3 3 3\n2 4 2\n1 2 1\n4 4 4\n2 4 2\n4 1 1\n3 3 3\n4 4 4", "output": "2"}, {"input": "3 1 3\n1 3\n2 3 1\n3 2 1\n1 3 1", "output": "1"}, {"input": "11 5 79\n7 3\n11 9\n10 8\n1 2\n4 2\n11 7 11\n5 6 6\n5 11 11\n5 8 11\n5 6 6\n11 7 11\n5 7 5\n1 6 1\n6 10 11\n1 8 1\n8 2 1\n3 1 1\n10 6 11\n10 3 11\n7 4 1\n11 1 1\n2 10 1\n1 6 1\n1 6 1\n9 2 1\n11 4 1\n1 1 1\n11 6 11\n3 11 11\n7 2 1\n5 9 11\n8 5 11\n4 2 2\n11 10 11\n7 9 11\n8 11 11\n1 8 1\n9 9 9\n5 2 1\n11 6 11\n2 10 1\n3 3 3\n6 1 1\n9 6 11\n7 9 11\n6 4 1\n8 1 1\n6 5 6\n3 2 1\n2 1 1\n5 7 5\n2 11 1\n5 7 5\n6 11 11\n5 7 5\n7 6 6\n3 6 6\n3 3 3\n4 7 1\n3 5 5\n8 7 11\n11 2 1\n1 4 1\n2 3 1\n9 8 9\n9 10 9\n2 7 1\n1 ...", "output": "4"}, {"input": "2 1 1\n1 2\n1 2 1", "output": "1"}, {"input": "13 0 1\n1 2 2", "output": "0"}, {"input": "13 0 3\n2 3 4\n2 3 4\n5 7 8", "output": "1407889077"}, {"input": "10 3 37\n9 2\n7 4\n6 8\n2 5 4\n2 6 2\n10 3 7\n4 1 1\n5 6 4\n2 2 2\n2 6 2\n5 2 4\n3 5 4\n5 2 4\n6 8 6\n1 5 1\n9 10 7\n4 5 4\n7 8 7\n8 4 4\n1 10 1\n2 9 2\n9 4 4\n8 4 4\n4 1 1\n10 3 7\n7 10 7\n8 4 4\n8 7 7\n4 1 1\n4 4 4\n2 1 1\n7 8 7\n2 9 2\n3 8 3\n7 10 7\n2 7 7\n2 8 2\n7 6 7\n4 9 4\n9 5 4", "output": "8"}, {"input": "13 7 8\n1 13\n8 1\n10 6\n12 11\n2 10\n5 7\n8 9\n12 12 12\n2 1 1\n8 9 8\n8 4 8\n9 9 9\n4 1 1\n7 8 8\n9 1 1", "output": "515880"}, {"input": "8 4 19\n3 8\n2 6\n5 2\n6 4\n8 5 5\n4 1 1\n1 1 1\n7 6 2\n8 8 8\n6 6 6\n8 6 2\n5 6 5\n8 4 2\n4 7 2\n8 8 8\n7 7 7\n8 3 3\n8 6 2\n7 7 7\n4 5 5\n8 4 2\n8 6 2\n5 3 5", "output": "4"}, {"input": "5 1 23\n3 1\n4 1 1\n3 1 1\n3 4 1\n4 2 2\n3 3 3\n4 1 1\n1 3 1\n4 4 4\n2 5 2\n2 1 1\n2 1 1\n5 2 2\n5 2 2\n1 4 1\n5 2 2\n5 3 1\n2 5 2\n1 5 1\n1 1 1\n3 5 1\n5 2 2\n2 4 2\n2 5 2", "output": "3"}, {"input": "5 3 6\n2 5\n4 2\n5 3\n3 3 3\n1 3 1\n4 5 5\n2 1 1\n1 4 1\n2 1 1", "output": "2"}, {"input": "11 7 31\n8 7\n6 4\n8 11\n9 2\n5 11\n1 3\n10 5\n2 11 1\n8 3 1\n7 9 1\n8 5 8\n5 6 6\n2 6 1\n7 1 1\n9 3 3\n6 10 6\n2 2 2\n2 2 2\n5 6 6\n1 4 1\n3 10 1\n7 4 4\n2 2 2\n6 11 6\n2 4 1\n8 10 8\n2 3 3\n8 8 8\n7 7 7\n2 8 1\n7 1 1\n9 1 1\n10 2 1\n2 7 1\n7 6 6\n5 8 8\n1 11 1\n10 3 1", "output": "8"}, {"input": "9 2 22\n6 2\n5 6\n5 4 6\n8 5 1\n2 7 2\n3 5 6\n2 6 6\n9 4 1\n8 3 1\n4 5 6\n6 3 6\n2 5 6\n9 3 1\n8 8 8\n5 6 6\n6 8 1\n6 4 6\n4 8 1\n5 2 6\n7 6 6\n3 5 6\n7 3 7\n9 4 1\n7 9 1", "output": "18"}, {"input": "13 0 2\n5 7 3\n8 2 1", "output": "9221185835"}, {"input": "8 4 63\n8 2\n6 2\n3 4\n5 6\n6 5 6\n2 6 2\n2 2 2\n4 2 2\n5 3 2\n6 1 1\n4 3 4\n4 3 4\n4 1 1\n6 8 2\n8 2 2\n2 3 2\n1 3 1\n1 4 1\n7 5 2\n2 8 2\n4 2 2\n2 3 2\n1 6 1\n3 5 2\n8 3 8\n5 2 2\n8 6 2\n3 3 3\n8 3 8\n8 8 8\n8 7 8\n4 5 2\n5 6 6\n8 7 8\n3 4 4\n7 8 8\n3 7 8\n8 8 8\n5 4 2\n4 6 2\n6 2 2\n2 5 2\n8 6 2\n8 4 8\n6 2 2\n4 2 2\n2 4 2\n1 8 1\n2 8 2\n5 3 2\n6 6 6\n7 4 8\n5 3 2\n6 3 2\n6 6 6\n1 6 1\n3 6 2\n2 5 2\n1 5 1\n4 4 4\n1 2 1\n2 4 2\n6 8 2\n4 5 2\n1 8 1\n3 5 2\n3 1 1", "output": "1"}, {"input": "8 3 3\n7 8\n7 3\n2 7\n8 3 3\n2 1 1\n5 5 5", "output": "512"}, {"input": "13 1 2\n5 13\n13 4 5\n2 8 1", "output": "4767471810"}, {"input": "6 1 24\n3 2\n3 5 3\n1 6 1\n6 2 2\n4 3 1\n2 6 2\n3 6 3\n5 3 3\n4 6 1\n4 1 1\n2 1 1\n5 2 2\n4 5 1\n5 6 5\n6 1 1\n4 4 4\n6 6 6\n6 1 1\n5 1 1\n4 5 1\n6 5 5\n4 1 1\n6 2 2\n2 5 2\n5 2 2", "output": "2"}, {"input": "10 6 25\n9 6\n5 1\n5 9\n5 8\n8 4\n8 3\n8 1 1\n2 5 5\n6 8 5\n5 1 1\n2 7 1\n9 10 5\n1 7 1\n8 5 5\n6 1 1\n3 2 5\n5 9 5\n5 9 5\n7 9 1\n3 4 8\n7 8 1\n9 8 5\n4 6 5\n6 1 1\n9 9 9\n3 8 8\n5 9 5\n7 4 1\n1 3 1\n5 4 5\n4 10 8", "output": "6"}, {"input": "9 5 52\n6 2\n8 5\n9 5\n9 2\n3 1\n2 8 2\n2 6 6\n4 9 6\n6 5 6\n5 7 2\n5 1 1\n4 8 6\n8 2 2\n4 5 6\n5 2 2\n1 1 1\n8 9 9\n3 2 1\n7 6 6\n2 9 2\n9 8 9\n1 2 1\n8 8 8\n9 7 2\n8 9 9\n5 3 1\n3 2 1\n8 9 9\n2 5 2\n3 6 1\n5 3 1\n2 6 6\n8 8 8\n5 5 5\n9 4 6\n9 9 9\n4 3 1\n6 8 6\n4 4 4\n8 1 1\n8 5 5\n1 3 1\n4 4 4\n4 7 6\n1 6 1\n8 2 2\n6 7 6\n8 8 8\n2 4 6\n1 4 1\n8 8 8\n9 3 1\n3 1 1\n5 4 6\n9 2 2\n7 8 2\n2 8 2", "output": "1"}, {"input": "12 3 18\n10 4\n5 8\n5 2\n6 5 10\n2 11 10\n10 12 10\n2 11 10\n11 3 10\n10 6 10\n7 6 10\n2 9 10\n5 9 10\n10 2 10\n12 7 12\n11 3 10\n1 11 1\n10 2 10\n5 2 2\n3 1 1\n9 12 9\n2 8 2", "output": "444"}, {"input": "11 6 19\n6 5\n10 4\n9 8\n1 7\n3 11\n1 2\n5 7 1\n7 10 1\n10 11 2\n1 9 1\n4 6 1\n8 6 1\n7 7 7\n2 6 1\n5 3 1\n3 6 1\n4 11 2\n1 3 1\n2 6 1\n1 5 1\n6 8 1\n4 8 8\n10 8 8\n4 2 2\n10 2 2", "output": "24"}, {"input": "11 4 70\n6 9\n1 11\n2 6\n11 8\n11 10 11\n11 6 11\n4 8 11\n9 5 1\n9 9 9\n1 8 1\n9 2 9\n1 2 1\n9 5 1\n10 5 1\n4 8 11\n10 3 3\n5 1 1\n3 8 11\n8 6 11\n8 1 1\n4 9 9\n5 8 1\n9 2 9\n10 9 9\n7 6 1\n1 9 1\n6 2 6\n9 6 9\n9 9 9\n10 11 11\n2 9 9\n4 10 6\n5 3 1\n11 10 11\n2 10 6\n11 5 1\n4 7 1\n6 1 1\n4 2 6\n8 3 11\n8 4 11\n11 2 11\n3 6 3\n4 11 11\n8 10 11\n2 4 6\n9 4 9\n5 11 1\n4 4 4\n3 4 3\n6 9 9\n4 4 4\n11 4 11\n11 2 11\n3 2 3\n10 10 10\n5 6 1\n10 6 6\n4 2 6\n8 9 11\n7 8 1\n5 1 1\n2 8 11\n5 10 1\n10 10 10\n1 11 1\n9...", "output": "3"}, {"input": "9 6 30\n6 8\n7 1\n9 5\n5 2\n3 5\n4 9\n3 5 3\n3 5 3\n5 5 5\n4 3 3\n3 3 3\n6 5 6\n4 1 1\n2 3 3\n3 4 3\n5 2 5\n3 3 3\n5 1 1\n5 2 5\n8 2 8\n1 3 1\n8 4 8\n3 6 6\n8 2 8\n7 1 1\n5 9 5\n7 9 7\n5 8 8\n1 3 1\n2 7 7\n6 8 8\n5 7 7\n8 2 8\n6 3 6\n1 8 1\n7 2 7", "output": "1"}, {"input": "6 3 4\n5 1\n1 2\n6 1\n6 1 1\n5 5 5\n2 5 1\n2 3 1", "output": "18"}, {"input": "10 6 42\n5 9\n6 9\n8 7\n2 1\n3 6\n4 7\n5 7 5\n9 5 5\n2 10 1\n7 6 5\n2 10 1\n4 8 7\n1 4 1\n4 8 7\n3 2 1\n6 9 9\n5 8 5\n8 5 5\n4 3 5\n8 5 5\n5 4 5\n1 3 1\n6 3 6\n3 6 6\n1 9 1\n10 8 10\n8 10 10\n7 7 7\n6 7 5\n5 10 10\n1 10 1\n2 10 1\n10 10 10\n7 7 7\n3 5 5\n10 6 10\n8 5 5\n2 7 1\n3 5 5\n9 1 1\n7 4 7\n10 8 10\n4 4 4\n9 5 5\n4 3 5\n8 1 1\n4 1 1\n9 5 5", "output": "1"}, {"input": "3 2 6\n3 2\n2 1\n1 2 1\n2 3 2\n3 3 3\n1 1 1\n2 2 2\n1 3 1", "output": "1"}, {"input": "6 1 13\n2 5\n4 1 1\n2 1 1\n4 5 2\n5 6 5\n6 4 2\n2 4 2\n3 3 3\n2 6 2\n5 3 5\n6 6 6\n1 4 1\n6 3 6\n5 4 2", "output": "1"}, {"input": "9 5 47\n4 3\n4 5\n6 3\n8 6\n9 2\n4 3 3\n5 5 5\n9 4 9\n7 5 7\n7 1 1\n9 8 9\n6 5 3\n1 8 1\n9 5 9\n3 7 7\n6 1 1\n4 2 9\n8 4 3\n3 9 9\n5 6 3\n1 1 1\n2 3 9\n8 5 3\n3 2 9\n8 5 3\n6 2 9\n3 6 3\n2 8 9\n1 7 1\n7 7 7\n6 6 6\n5 1 1\n8 5 3\n9 6 9\n8 7 7\n4 2 9\n5 6 3\n6 4 3\n8 3 3\n1 3 1\n1 7 1\n1 1 1\n1 1 1\n8 6 6\n3 5 3\n6 5 3\n7 8 7\n7 3 7\n1 8 1\n6 2 9\n3 8 3\n1 7 1", "output": "2"}, {"input": "9 5 40\n1 9\n9 2\n7 5\n1 3\n8 1\n9 8 1\n5 5 5\n9 9 9\n7 8 1\n1 9 1\n4 5 9\n6 8 1\n8 1 1\n5 4 9\n6 3 1\n7 9 9\n7 6 9\n9 3 1\n9 3 1\n5 4 9\n5 6 9\n9 2 9\n7 8 1\n7 7 7\n9 1 1\n2 4 2\n3 1 1\n6 4 2\n8 9 1\n5 2 9\n4 4 4\n3 8 1\n2 6 2\n5 9 9\n9 5 9\n8 9 1\n4 1 1\n8 4 1\n6 2 2\n1 1 1\n8 9 1\n9 7 9\n3 3 3\n4 8 1\n1 2 1", "output": "2"}, {"input": "6 2 26\n4 2\n3 6\n5 5 5\n6 4 1\n1 4 1\n2 6 1\n1 1 1\n3 3 3\n2 1 1\n2 5 1\n6 1 1\n4 2 4\n1 4 1\n4 5 1\n2 1 1\n4 6 1\n3 5 1\n1 5 1\n1 1 1\n4 6 1\n6 6 6\n4 1 1\n2 3 1\n4 6 1\n3 4 1\n5 5 5\n6 2 1\n6 2 1", "output": "2"}, {"input": "10 9 0\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10", "output": "1"}, {"input": "5 4 5\n1 2\n2 3\n3 4\n4 5\n1 2 1\n2 3 2\n3 4 3\n4 5 4\n1 5 1", "output": "1"}, {"input": "5 0 2\n1 2 1\n5 1 2", "output": "0"}, {"input": "5 3 0\n1 3\n3 4\n4 2", "output": "4"}, {"input": "9 7 0\n1 6\n5 7\n3 8\n3 9\n1 5\n8 1\n3 4", "output": "8"}, {"input": "12 3 0\n11 8\n10 11\n4 3", "output": "214990848"}, {"input": "7 2 0\n4 5\n7 2", "output": "1372"}, {"input": "2 0 0", "output": "1"}, {"input": "9 3 0\n7 4\n5 3\n4 3", "output": "26244"}, {"input": "11 6 0\n4 7\n6 5\n10 3\n5 1\n8 2\n7 3", "output": "31944"}, {"input": "6 3 26\n6 5\n6 3\n6 4\n6 1 1\n6 5 5\n4 1 1\n3 2 2\n2 4 2\n1 4 1\n1 4 1\n2 4 2\n4 1 1\n2 4 2\n4 2 2\n4 4 4\n3 1 1\n6 6 6\n3 1 1\n5 1 1\n4 1 1\n6 5 5\n6 1 1\n4 4 4\n6 1 1\n5 6 5\n5 1 1\n2 3 2\n5 5 5\n2 5 2", "output": "1"}, {"input": "11 2 57\n5 1\n11 8\n2 5 5\n4 3 5\n11 5 5\n2 10 5\n5 11 5\n7 10 7\n7 8 7\n4 11 8\n5 11 5\n4 10 10\n1 10 1\n4 1 1\n11 9 7\n11 7 7\n10 3 5\n8 5 5\n6 8 6\n9 7 7\n1 10 1\n10 1 1\n8 4 8\n11 4 8\n11 7 7\n2 10 5\n10 4 10\n11 9 7\n10 8 8\n1 4 1\n2 11 5\n8 3 5\n4 4 4\n8 2 5\n1 9 1\n2 1 1\n8 2 5\n4 8 8\n2 6 5\n2 3 5\n1 1 1\n4 4 4\n9 2 5\n10 7 7\n3 7 5\n9 11 7\n8 5 5\n1 5 1\n3 2 5\n9 8 7\n8 9 7\n5 2 5\n7 8 7\n6 2 5\n10 6 6\n8 3 5\n11 5 5\n11 4 8\n3 8 5", "output": "2"}, {"input": "9 2 67\n1 7\n2 5\n7 7 7\n5 5 5\n4 3 2\n6 5 2\n2 7 1\n5 7 1\n1 7 1\n1 3 1\n5 8 1\n8 6 1\n9 8 1\n7 1 1\n6 2 2\n2 7 1\n2 5 2\n7 4 1\n2 3 2\n3 4 2\n7 8 1\n3 2 2\n4 3 2\n8 5 1\n6 2 2\n4 2 2\n7 1 1\n3 9 2\n1 5 1\n1 6 1\n4 5 2\n3 2 2\n4 1 1\n1 8 1\n2 7 1\n4 1 1\n2 4 2\n6 3 2\n8 4 1\n3 5 5\n6 8 1\n4 1 1\n6 6 6\n4 5 2\n7 2 1\n1 4 1\n6 2 2\n3 9 2\n1 1 1\n2 4 2\n4 4 4\n8 9 1\n9 7 1\n5 1 1\n9 5 2\n1 8 1\n3 7 1\n3 9 2\n2 4 2\n4 2 2\n5 3 5\n8 3 1\n3 8 1\n9 2 2\n5 1 1\n2 2 2\n2 5 2\n9 1 1\n5 1 1", "output": "16"}, {"input": "10 2 37\n6 8\n3 4\n6 7 4\n1 2 1\n8 6 6\n3 6 3\n8 3 3\n8 10 10\n1 2 1\n3 6 3\n8 9 6\n4 4 4\n10 3 3\n9 5 4\n3 4 3\n9 9 9\n3 8 3\n1 2 1\n2 2 2\n5 10 4\n10 8 10\n6 6 6\n2 3 3\n5 4 4\n1 4 1\n2 9 4\n2 10 4\n6 4 4\n4 10 4\n9 3 3\n5 2 2\n4 5 4\n9 5 4\n3 4 3\n5 7 4\n9 3 3\n9 9 9\n1 9 1\n8 8 8", "output": "1"}, {"input": "11 0 13\n10 8 8\n5 3 6\n6 7 6\n5 5 5\n8 3 8\n3 10 6\n7 4 7\n6 10 6\n8 4 8\n2 5 5\n3 10 6\n7 4 7\n3 7 6", "output": "38236"}, {"input": "12 2 26\n8 2\n11 7\n7 7 7\n9 12 9\n9 6 4\n1 11 1\n5 12 9\n9 4 4\n4 8 4\n9 10 9\n7 10 4\n7 10 4\n7 10 4\n10 12 9\n3 11 11\n8 7 7\n10 1 1\n1 9 1\n11 9 4\n6 2 8\n1 6 1\n5 3 4\n2 5 4\n10 8 4\n1 1 1\n6 10 4\n2 3 8\n1 7 1", "output": "18"}, {"input": "9 0 45\n8 1 1\n4 7 4\n4 8 4\n7 8 4\n6 9 9\n1 1 1\n6 4 4\n2 4 4\n2 2 2\n6 4 4\n8 6 6\n8 1 1\n2 7 4\n1 9 1\n8 6 6\n2 9 9\n6 9 9\n5 1 1\n5 8 5\n4 1 1\n6 3 4\n7 2 4\n5 3 5\n3 5 5\n6 9 9\n9 3 4\n9 9 9\n4 1 1\n2 9 9\n4 4 4\n1 6 1\n3 7 7\n1 3 1\n1 8 1\n9 8 9\n7 4 4\n7 1 1\n7 6 4\n6 8 6\n8 9 9\n7 2 4\n7 1 1\n7 8 4\n6 5 5\n4 1 1", "output": "5"}, {"input": "12 2 54\n12 5\n9 12\n7 5 9\n11 6 6\n11 7 11\n11 6 6\n8 8 8\n1 9 1\n11 9 11\n8 9 8\n2 4 6\n12 2 6\n12 10 6\n11 4 11\n1 5 1\n11 1 1\n9 8 8\n6 6 6\n4 10 6\n3 6 6\n4 4 4\n4 12 12\n4 3 6\n7 2 6\n5 1 1\n2 7 6\n10 12 6\n1 2 1\n9 8 8\n4 8 8\n7 6 6\n4 8 8\n1 12 1\n2 10 10\n1 12 1\n3 10 10\n6 3 6\n7 10 6\n8 10 6\n11 7 11\n11 12 11\n9 4 9\n10 5 6\n11 8 11\n2 2 2\n2 11 6\n4 11 11\n5 9 9\n7 8 8\n1 2 1\n10 1 1\n2 8 6\n4 9 9\n3 7 6\n9 3 6\n4 3 6", "output": "6"}, {"input": "11 0 15\n5 4 9\n8 11 11\n6 10 1\n2 6 6\n8 5 6\n10 3 1\n4 5 9\n9 1 1\n9 9 9\n5 7 7\n10 11 1\n5 6 6\n8 10 1\n10 10 10\n1 1 1", "output": "2511"}, {"input": "12 0 46\n11 10 12\n8 3 8\n2 3 6\n6 2 6\n5 8 5\n5 10 5\n11 7 3\n11 7 3\n2 2 2\n10 10 10\n3 4 3\n3 4 3\n6 9 9\n2 4 6\n3 4 3\n7 8 8\n9 6 9\n9 1 1\n2 9 9\n5 12 5\n1 11 1\n4 6 6\n6 7 6\n1 8 1\n6 4 6\n10 9 9\n11 12 12\n3 9 9\n2 6 6\n6 5 5\n8 2 8\n7 6 6\n2 9 9\n5 4 5\n6 10 6\n1 4 1\n7 4 4\n8 11 8\n10 3 3\n11 1 1\n4 10 3\n10 6 6\n1 2 1\n9 2 9\n4 1 1\n7 8 8", "output": "3"}, {"input": "12 2 7\n3 10\n5 1\n3 9 3\n9 7 10\n5 1 1\n1 11 1\n6 1 1\n2 12 12\n10 8 1", "output": "805032"}, {"input": "10 1 40\n6 10\n1 7 1\n9 8 3\n1 9 1\n9 5 1\n7 1 1\n10 1 1\n10 3 10\n2 1 1\n4 9 4\n6 2 2\n3 7 3\n4 7 4\n1 9 1\n2 4 4\n8 8 8\n3 2 2\n5 1 1\n10 7 10\n1 5 1\n1 2 1\n8 1 1\n7 10 10\n2 9 2\n2 1 1\n5 6 1\n6 6 6\n2 10 2\n8 7 3\n8 10 10\n4 5 1\n4 2 4\n3 3 3\n3 6 6\n3 9 3\n5 7 1\n9 4 4\n4 7 4\n7 4 4\n9 8 3\n8 2 2", "output": "6"}, {"input": "5 1 2\n1 2\n2 3 2\n3 4 2", "output": "6"}, {"input": "5 0 5\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5", "output": "125"}, {"input": "13 1 0\n4 13", "output": "275716983698"}, {"input": "13 0 1\n5 13 7", "output": "57998697607"}, {"input": "12 5 10\n1 2\n8 3\n6 4\n11 12\n10 5\n1 2 1\n2 3 1\n3 4 1\n5 7 2\n8 4 10\n5 7 5\n5 5 5\n7 5 7\n1 1 1\n2 2 1", "output": "0"}, {"input": "10 5 3\n1 2\n1 3\n2 4\n2 5\n4 7\n8 9 1\n2 7 2\n7 9 1", "output": "1342"}, {"input": "13 1 1\n1 2\n1 2 1", "output": "275716983698"}, {"input": "6 0 0", "output": "1296"}, {"input": "8 4 1\n1 7\n8 3\n5 6\n6 4\n2 7 7", "output": "384"}, {"input": "5 1 2\n3 5\n3 5 5\n2 5 5", "output": "12"}, {"input": "3 0 1\n2 3 3", "output": "1"}, {"input": "6 4 2\n1 2\n2 4\n4 6\n3 5\n1 1 1\n4 6 6", "output": "0"}, {"input": "10 0 5\n5 5 4\n6 6 5\n7 7 6\n8 8 9\n10 10 10", "output": "0"}, {"input": "13 1 4\n10 7\n1 10 1\n2 5 3\n5 5 5\n7 4 10", "output": "712594244"}, {"input": "13 0 100\n4 13 11\n10 1 13\n1 13 9\n9 11 9\n8 7 2\n5 8 2\n3 2 10\n12 10 2\n9 6 8\n2 6 6\n5 9 12\n6 12 8\n8 10 10\n10 9 10\n1 3 13\n13 8 2\n4 7 2\n12 12 8\n13 9 13\n13 2 7\n10 7 3\n6 1 10\n2 12 1\n12 7 10\n7 1 12\n13 2 2\n8 12 1\n2 12 5\n10 12 13\n8 9 13\n11 8 13\n8 4 6\n8 4 6\n2 3 13\n7 4 1\n12 8 6\n2 8 13\n4 4 2\n9 3 13\n9 9 11\n12 1 8\n4 2 4\n1 6 11\n4 10 8\n6 6 13\n6 8 1\n7 2 10\n11 2 1\n6 11 3\n2 12 11\n5 4 2\n9 11 13\n10 11 4\n6 5 13\n2 12 4\n10 9 4\n10 11 13\n3 4 11\n6 2 13\n2 3 8\n8 4 3\n7 3 6\n5 3 ...", "output": "0"}, {"input": "13 12 100\n8 10\n11 3\n4 12\n1 10\n4 13\n9 10\n4 9\n3 2\n3 6\n6 9\n1 7\n7 5\n2 10 10\n2 9 9\n2 8 10\n2 7 1\n2 6 6\n2 5 1\n2 4 9\n2 3 3\n2 2 2\n2 1 1\n3 10 10\n3 9 9\n3 8 10\n3 7 1\n3 6 6\n3 5 1\n3 4 9\n3 3 3\n3 2 3\n3 1 1\n4 10 10\n4 9 9\n4 8 10\n4 7 1\n4 6 9\n4 5 1\n4 4 4\n4 3 9\n4 2 9\n4 1 1\n5 10 1\n5 9 1\n5 8 1\n5 7 7\n5 6 1\n5 5 5\n5 4 1\n5 3 1\n5 2 1\n5 1 1\n6 10 10\n6 9 9\n6 8 10\n6 7 1\n6 6 6\n6 5 1\n6 4 9\n6 3 6\n6 2 6\n6 1 1\n7 10 1\n7 9 1\n7 8 1\n7 7 7\n7 6 1\n7 5 7\n7 4 1\n7 3 1\n7 2 1\n7 1 1\n...", "output": "1"}, {"input": "4 1 2\n1 2\n2 3 2\n3 4 2", "output": "1"}], "language": "cpp"}, "prompt": "E. Sandy and Nuts\ntime limit per test\n3 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nRooted tree is a connected graph without any simple cycles with one vertex selected as a root. In this problem the vertex number 1 will always serve as a root.\nLowest common ancestor of two vertices u and v is the farthest from the root vertex that lies on both the path from u to the root and on path from v to the root. We will denote it as LCA(u, v).\nSandy had a rooted tree consisting of n vertices that she used to store her nuts. Unfortunately, the underwater storm broke her tree and she doesn't remember all it's edges. She only managed to restore m edges of the initial tree and q triples ai, bi and ci, for which she supposes LCA(ai, bi) = ci.\nHelp Sandy count the number of trees of size n with vertex 1 as a root, that match all the information she remembered. If she made a mess and there are no such trees then print 0. Two rooted trees are considered to be distinct if there exists an edge that occur in one of them and doesn't occur in the other one.\nInput\nThe first line of the input contains three integers n, m and q (1 <= n <= 13, 0 <= m < n, 0 <= q <= 100) - the number of vertices, the number of edges and LCA triples remembered by Sandy respectively.\nEach of the next m lines contains two integers ui and vi (1 <= ui, vi <= n, ui != vi) - the numbers of vertices connected by the i-th edge. It's guaranteed that this set of edges is a subset of edges of some tree.\nThe last q lines contain the triplets of numbers ai, bi, ci (1 <= ai, bi, ci <= n). Each of these triples define LCA(ai, bi) = ci. It's not guaranteed that there exists a tree that satisfy all the given LCA conditions.\nOutput\nPrint a single integer - the number of trees of size n that satisfy all the conditions.\n", "generation": "int solve() {\n  int n, m, q;\n  cin >> n;\n  cin >> m;\n  cin >> q;\n\n  vector<int> g[n];\n  vector<int> p(n);\n  vector<int> level(n);\n  vector<vector<int>> ans(n);\n\n  for (int i = 0; i < m; i++) {\n    int u, v;\n    cin >> u;\n    cin >> v;\n    g[u].push_back(v);\n  }\n\n  dfs(1, -1, 0);\n\n  for (int i = 0; i < q; i++) {\n    int a, b, c;\n    cin >> a;\n    cin >> b;\n    cin >> c;\n    if (level[a] + level[b] - level[c] != 0) {\n      ans[c] = 0;\n    } else {\n      ans[c] = 1;\n    }\n  }\n\n  int total = 0;\n  for (int i = 1; i <= n; i++) {\n    total += ans[i];\n  }\n\n  cout << total;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int solve()\u2019:\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> n;\n      |   ^~~\ntest.cpp:7:3: error: \u2018vector\u2019 was not declared in this scope\n    7 |   vector<int> g[n];\n      |   ^~~~~~\ntest.cpp:7:10: error: expected primary-expression before \u2018int\u2019\n    7 |   vector<int> g[n];\n      |          ^~~\ntest.cpp:8:10: error: expected primary-expression before \u2018int\u2019\n    8 |   vector<int> p(n);\n      |          ^~~\ntest.cpp:9:10: error: expected primary-expression before \u2018int\u2019\n    9 |   vector<int> level(n);\n      |          ^~~\ntest.cpp:10:17: error: expected primary-expression before \u2018int\u2019\n   10 |   vector<vector<int>> ans(n);\n      |                 ^~~\ntest.cpp:16:5: error: \u2018g\u2019 was not declared in this scope\n   16 |     g[u].push_back(v);\n      |     ^\ntest.cpp:19:3: error: \u2018dfs\u2019 was not declared in this scope\n   19 |   dfs(1, -1, 0);\n      |   ^~~\ntest.cpp:26:9: error: \u2018level\u2019 was not declared in this scope\n   26 |     if (level[a] + level[b] - level[c] != 0) {\n      |         ^~~~~\ntest.cpp:27:7: error: \u2018ans\u2019 was not declared in this scope\n   27 |       ans[c] = 0;\n      |       ^~~\ntest.cpp:29:7: error: \u2018ans\u2019 was not declared in this scope\n   29 |       ans[c] = 1;\n      |       ^~~\ntest.cpp:35:14: error: \u2018ans\u2019 was not declared in this scope\n   35 |     total += ans[i];\n      |              ^~~\ntest.cpp:38:3: error: \u2018cout\u2019 was not declared in this scope\n   38 |   cout << total;\n      |   ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/105", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool isPossible(int n, int m, vector<int> &f, vector<int> &b) {\n  vector<int> a(n);\n  for (int i = 0; i < m; i++) {\n    bool found = false;\n    for (int j = 0; j < n; j++) {\n      if (a[j] == f[i] && b[i] == a[j]) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      return false;\n    }\n  }\n  return true;\n}\n\nint main() {\n  int n, m;\n  cin >> n;\n  cin >> m;\n\n  vector<int> f(n);\n  for (int i = 0; i < n; i++) {\n    cin >> f[i];\n  }\n\n  vector<int> b(m);\n  for (int i = 0; i < m; i++) {\n    cin >> b[i];\n  }\n\n  if (isPossible(n, m, f, b)) {\n    cout << \"Possible\" << endl;\n    for (int i = 0; i < m; i++) {\n      cin >> a[i];\n    }\n  } else if (isAmbiguous(n, m, f, b)) {\n    cout << \"Ambiguity\" << endl;\n  } else {\n    cout << \"Impossible\" << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "3 3\n3 2 1\n1 2 3", "output": "Possible\n3 2 1"}, {"input": "3 3\n1 1 1\n1 1 1", "output": "Ambiguity"}, {"input": "3 3\n1 2 1\n3 3 3", "output": "Impossible"}, {"input": "30777 28905\n30777 30776 30775 30774 30773 30772 30771 30770 30769 30768 30767 30766 30765 30764 30763 30762 30761 30760 30759 30758 30757 30756 30755 30754 30753 30752 30751 30750 30749 30748 30747 30746 30745 30744 30743 30742 30741 30740 30739 30738 30737 30736 30735 30734 30733 30732 30731 30730 30729 30728 30727 30726 30725 30724 30723 30722 30721 30720 30719 30718 30717 30716 30715 30714 30713 30712 30711 30710 30709 30708 30707 30706 30705 30704 30703 30702 30701 30700 30699 30698 30697 30696 30695 ...", "output": "Ambiguity"}, {"input": "2 100\n2 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2", "output": "Possible\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"}, {"input": "7259 28\n732 1745 153 3402 6561 1981 5050 573 2389 1937 2827 4848 724 2330 1982 2642 4264 2937 2025 368 2949 6018 3376 6063 3086 3507 6033 5850 1468 6577 2314 3523 2162 1252 236 628 1879 4407 2800 2844 822 5600 4931 3593 1874 1044 6470 2463 2831 6501 848 6343 3980 6669 2261 2643 6780 6655 1237 2999 5718 3716 550 2463 3633 1055 61 3937 1482 5238 4718 1705 1613 663 1991 637 3370 406 914 2230 6788 1083 3927 7049 971 4701 4858 6995 516 6800 4231 5954 7138 1789 2650 669 1381 2351 2344 6526 1590 1516 5767 3707 1...", "output": "Ambiguity"}, {"input": "9237 221\n5345 4255 7543 4264 5156 3049 412 7800 7990 9074 3592 2149 6940 1267 4887 6306 9036 4071 6396 3834 1910 1027 4127 1907 2980 6398 7659 1064 1668 1943 3499 5760 4613 4060 1485 2938 2590 4261 8533 872 1528 5222 1415 204 8997 5917 4069 6767 1870 2477 8282 3288 1013 5718 7100 3808 8343 4729 2670 3490 6899 420 1893 1949 4522 1482 3917 784 7437 209 3087 1953 1573 1869 1130 5964 1064 143 7176 1651 6117 999 1943 1885 2490 8984 5450 183 4494 2606 394 2971 4405 4228 9197 4252 4351 8946 4194 4147 4752 5995 7...", "output": "Ambiguity"}, {"input": "100000 100000\n11013 23394 19437 20054 41 24568 16227 18569 2834 27896 16497 14709 5965 31117 7205 25153 10357 26034 12831 25948 21323 16117 13892 20836 11529 17018 15031 21319 17652 16450 5637 21416 23601 17325 31135 900 20441 9534 19598 7189 26960 27039 7778 22006 2258 4581 18027 23433 24142 16660 812 14998 9336 23270 11789 6452 4634 32712 22352 12781 30122 2598 24134 23325 12066 28904 22979 7579 31756 13117 25807 7835 18908 12695 9118 24787 643 6135 5315 8413 1857 15722 672 20701 19899 7379 10529 30563 ...", "output": "Ambiguity"}, {"input": "100000 100000\n15303 18485 16140 918 637 2342 28731 31289 19773 13611 32416 29174 28291 25631 13490 5429 2472 1094 32441 14829 3161 15851 20450 615 23624 14919 23955 31557 3361 20901 9468 23234 12992 25796 28399 17723 9121 25981 17905 15087 16280 21157 4753 4867 3778 11061 20984 10185 19643 7336 6850 6209 13329 28837 25612 17120 7673 32222 17102 23953 19009 8248 4460 20218 25478 31788 13703 11520 5031 4461 30745 1165 15481 24779 9153 20112 10429 10583 23899 13894 18767 200 27348 5305 21152 19229 23612 1779...", "output": "Ambiguity"}, {"input": "100000 12\n6 5 1 9 1 9 3 2 5 6 7 4 5 3 1 1 9 9 3 8 6 5 9 5 3 1 3 5 3 5 2 8 9 10 3 2 6 2 7 10 7 2 3 9 10 2 1 6 2 4 7 7 5 4 3 2 3 3 8 8 1 5 6 10 1 4 3 10 7 6 1 4 4 9 10 10 9 5 9 7 10 7 6 3 2 8 4 5 4 7 4 2 1 9 4 9 4 7 9 8 10 7 7 2 6 7 10 8 3 1 10 3 7 1 7 4 2 5 7 4 2 8 9 6 8 9 7 8 2 7 5 6 6 10 6 9 1 6 8 10 7 7 6 7 2 8 6 10 5 8 2 1 10 10 10 4 7 7 3 4 5 8 2 9 10 8 9 4 10 8 6 2 6 1 7 1 2 9 4 7 3 1 5 1 2 7 3 5 7 3 7 5 3 3 9 5 1 2 8 7 6 6 9 9 3 1 2 10 4 4 10 8 1 5 2 6 6 4 9 1 1 2 3 8 3 6 6 1 6 5 3 1 1 6 9 7 2 4 10 ...", "output": "Ambiguity"}, {"input": "5 6\n5 2 4 3 5\n1 2 3 4 4 5", "output": "Impossible"}, {"input": "7 10\n1 2 2 1 3 7 5\n1 2 1 2 3 7 5 4 4 4", "output": "Impossible"}, {"input": "100000 50000\n60805 30033 95781 86796 70843 69873 51813 93953 29630 98998 44296 19815 92875 29585 27100 70515 19426 96633 6966 35291 73833 31239 8203 74269 137 97530 99575 15481 3343 53013 48953 81 19629 86140 7413 63952 82358 91195 29969 1312 89093 65663 3640 72658 7639 47738 79994 68571 89228 83235 21962 73393 22826 3668 44191 58162 97658 61450 88371 46493 11689 37129 62375 23350 65096 28918 53789 58823 32269 10651 42077 6554 43376 36966 5264 68096 32975 14089 79304 30701 78282 53660 11190 29497 61959 93...", "output": "Ambiguity"}, {"input": "70000 1000\n52408 52539 41169 15824 46228 18234 28056 33459 34405 60502 11838 50621 51505 56299 21198 49932 58069 4538 42707 48226 28095 41942 22528 58693 482 13368 51993 68191 62277 40812 19831 49246 14852 41794 19689 20117 19518 3790 29053 45210 22181 20119 10651 66550 19969 45996 14426 12040 67485 33162 8121 68050 2601 50135 23176 38618 36774 42059 58204 64203 53661 63346 26462 19426 1609 45195 16845 28945 36504 32188 8775 65583 60589 15195 64852 34037 30289 61414 18140 63890 54430 22796 30091 23161 801...", "output": "Ambiguity"}, {"input": "1 1\n1\n1", "output": "Possible\n1"}, {"input": "1 10\n1\n1 1 1 1 1 1 1 1 1 1", "output": "Possible\n1 1 1 1 1 1 1 1 1 1"}, {"input": "10 1\n1 2 3 4 5 6 1 8 9 10\n7", "output": "Impossible"}, {"input": "3 3\n2 2 2\n2 3 3", "output": "Impossible"}, {"input": "4 4\n1 1 1 4\n1 1 1 3", "output": "Impossible"}, {"input": "3 3\n1 1 2\n1 2 3", "output": "Impossible"}, {"input": "3 3\n2 2 1\n2 3 1", "output": "Impossible"}, {"input": "3 2\n1 1 3\n1 2", "output": "Impossible"}, {"input": "3 3\n1 1 1\n1 2 2", "output": "Impossible"}, {"input": "3 1\n1 1 2\n2", "output": "Possible\n3"}, {"input": "3 3\n1 1 1\n1 1 2", "output": "Impossible"}, {"input": "5 5\n1 1 5 5 5\n1 2 3 4 5", "output": "Impossible"}, {"input": "2 2\n1 1\n1 2", "output": "Impossible"}, {"input": "3 3\n1 1 2\n1 1 3", "output": "Impossible"}, {"input": "3 2\n1 1 2\n1 3", "output": "Impossible"}, {"input": "4 10\n1 2 3 3\n1 2 1 2 1 2 1 2 3 3", "output": "Ambiguity"}, {"input": "3 3\n1 2 1\n2 2 2", "output": "Possible\n2 2 2"}, {"input": "4 2\n4 3 2 3\n4 4", "output": "Possible\n1 1"}], "language": "cpp"}, "prompt": "B. Spongebob and Joke\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nWhile Patrick was gone shopping, Spongebob decided to play a little trick on his friend. The naughty Sponge browsed through Patrick's personal stuff and found a sequence a1, a2, ..., am of length m, consisting of integers from 1 to n, not necessarily distinct. Then he picked some sequence f1, f2, ..., fn of length n and for each number ai got number bi = fai. To finish the prank he erased the initial sequence ai.\nIt's hard to express how sad Patrick was when he returned home from shopping! We will just say that Spongebob immediately got really sorry about what he has done and he is now trying to restore the original sequence. Help him do this or determine that this is impossible.\nInput\nThe first line of the input contains two integers n and m (1 <= n, m <= 100 000) - the lengths of sequences fi and bi respectively.\nThe second line contains n integers, determining sequence f1, f2, ..., fn (1 <= fi <= n).\nThe last line contains m integers, determining sequence b1, b2, ..., bm (1 <= bi <= n).\nOutput\nPrint \"Possible\" if there is exactly one sequence ai, such that bi = fai for all i from 1 to m. Then print m integers a1, a2, ..., am.\nIf there are multiple suitable sequences ai, print \"Ambiguity\".\nIf Spongebob has made a mistake in his calculations and no suitable sequence ai exists, print \"Impossible\".\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool isPossible(int n, int m, vector<int> &f, vector<int> &b) {\n  vector<int> a(n);\n  for (int i = 0; i < m; i++) {\n    bool found = false;\n    for (int j = 0; j < n; j++) {\n      if (a[j] == f[i] && b[i] == a[j]) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      return false;\n    }\n  }\n  return true;\n}\n\nint main() {\n  int n, m;\n  cin >> n;\n  cin >> m;\n\n  vector<int> f(n);\n  for (int i = 0; i < n; i++) {\n    cin >> f[i];\n  }\n\n  vector<int> b(m);\n  for (int i = 0; i < m; i++) {\n    cin >> b[i];\n  }\n\n  if (isPossible(n, m, f, b)) {\n    cout << \"Possible\" << endl;\n    for (int i = 0; i < m; i++) {\n      cin >> a[i];\n    }\n  } else if (isAmbiguous(n, m, f, b)) {\n    cout << \"Ambiguity\" << endl;\n  } else {\n    cout << \"Impossible\" << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:41:14: error: \u2018a\u2019 was not declared in this scope\n   41 |       cin >> a[i];\n      |              ^\ntest.cpp:43:14: error: \u2018isAmbiguous\u2019 was not declared in this scope\n   43 |   } else if (isAmbiguous(n, m, f, b)) {\n      |              ^~~~~~~~~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/106", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nvoid solve() {\n  int x;\n  cin >> x;\n\n  int k = 0;\n  for (int n = 1; n * n <= x; n++) {\n    for (int m = 1; m * n <= x; m++) {\n      int numSquares = n * n + m * m - n * m;\n      if (numSquares == x) {\n        k++;\n      }\n    }\n  }\n\n  cout << k << endl;\n  for (int i = 0; i < k; i++) {\n    cout << n << \" \" << m << endl;\n  }\n}\n\nint main() {\n  solve();\n  return 0;\n}\n", "testcases": [{"input": "26", "output": "6\n1 26\n2 9\n3 5\n5 3\n9 2\n26 1"}, {"input": "2", "output": "2\n1 2\n2 1"}, {"input": "8", "output": "4\n1 8\n2 3\n3 2\n8 1"}, {"input": "1", "output": "1\n1 1"}, {"input": "5005", "output": "12\n1 5005\n5 335\n6 240\n10 94\n13 59\n14 52\n52 14\n59 13\n94 10\n240 6\n335 5\n5005 1"}, {"input": "17284", "output": "2\n1 17284\n17284 1"}, {"input": "151618", "output": "2\n1 151618\n151618 1"}, {"input": "360700", "output": "8\n1 360700\n4 36071\n5 24048\n24 1210\n1210 24\n24048 5\n36071 4\n360700 1"}, {"input": "500500500", "output": "8\n1 500500500\n4 50050051\n8 13902794\n9 11122236\n11122236 9\n13902794 8\n50050051 4\n500500500 1"}, {"input": "200200", "output": "26\n1 200200\n4 20021\n5 13348\n6 9535\n7 7152\n10 3643\n13 2204\n14 1911\n15 1673\n24 675\n25 624\n55 148\n77 92\n92 77\n148 55\n624 25\n675 24\n1673 15\n1911 14\n2204 13\n3643 10\n7152 7\n9535 6\n13348 5\n20021 4\n200200 1"}, {"input": "800800", "output": "32\n1 800800\n4 80081\n5 53388\n6 38135\n7 28602\n10 14563\n13 8804\n14 7631\n15 6678\n24 2677\n25 2472\n32 1527\n55 538\n64 406\n77 292\n104 181\n181 104\n292 77\n406 64\n538 55\n1527 32\n2472 25\n2677 24\n6678 15\n7631 14\n8804 13\n14563 10\n28602 7\n38135 6\n53388 5\n80081 4\n800800 1"}, {"input": "200000800200", "output": "4\n1 200000800200\n4 20000080021\n20000080021 4\n200000800200 1"}, {"input": "999999999999999999", "output": "6\n1 999999999999999999\n13 10989010989010993\n37 1422475106685645\n1422475106685645 37\n10989010989010993 13\n999999999999999999 1"}, {"input": "128593726482159", "output": "2\n1 128593726482159\n128593726482159 1"}, {"input": "50044422", "output": "2\n1 50044422\n50044422 1"}, {"input": "18", "output": "2\n1 18\n18 1"}, {"input": "30", "output": "3\n1 30\n4 4\n30 1"}, {"input": "20", "output": "6\n1 20\n2 7\n3 4\n4 3\n7 2\n20 1"}, {"input": "649708734844", "output": "2\n1 649708734844\n649708734844 1"}, {"input": "649030984", "output": "8\n1 649030984\n6 30906239\n7 23179680\n41 753824\n753824 41\n23179680 7\n30906239 6\n649030984 1"}, {"input": "333333333", "output": "2\n1 333333333\n333333333 1"}, {"input": "5050505060", "output": "8\n1 5050505060\n2 1683501687\n3 841750844\n4 505050507\n505050507 4\n841750844 3\n1683501687 2\n5050505060 1"}, {"input": "1000000000000000000", "output": "10\n1 1000000000000000000\n4 100000000000000001\n5 66666666666666668\n15 8333333333333338\n24 3333333333333341\n3333333333333341 24\n8333333333333338 15\n66666666666666668 5\n100000000000000001 4\n1000000000000000000 1"}, {"input": "18270000000000", "output": "10\n1 18270000000000\n4 1827000000001\n7 652500000002\n27 48333333342\n28 45000000009\n45000000009 28\n48333333342 27\n652500000002 7\n1827000000001 4\n18270000000000 1"}, {"input": "10102030405090000", "output": "16\n1 10102030405090000\n4 1010203040509001\n5 673468693672668\n15 84183586709088\n24 33673434683641\n25 31083170477208\n40 12319549274513\n499 80978199806\n80978199806 499\n12319549274513 40\n31083170477208 25\n33673434683641 24\n84183586709088 15\n673468693672668 5\n1010203040509001 4\n10102030405090000 1"}, {"input": "50004000222222228", "output": "10\n1 50004000222222228\n7 1785857150793653\n8 1389000006172842\n13 549494507936512\n117 7243807072648\n7243807072648 117\n549494507936512 13\n1389000006172842 8\n1785857150793653 7\n50004000222222228 1"}, {"input": "9000004000200000", "output": "8\n1 9000004000200000\n4 900000400020001\n8 250000111116669\n9 200000088893336\n200000088893336 9\n250000111116669 8\n900000400020001 4\n9000004000200000 1"}, {"input": "147456000000000", "output": "4\n1 147456000000000\n4 14745600000001\n14745600000001 4\n147456000000000 1"}, {"input": "80000010000020000", "output": "12\n1 80000010000020000\n2 26666670000006667\n3 13333335000003334\n4 8000001000002001\n10 1454545636364003\n11 1212121363636670\n1212121363636670 11\n1454545636364003 10\n8000001000002001 4\n13333335000003334 3\n26666670000006667 2\n80000010000020000 1"}, {"input": "8888", "output": "8\n1 8888\n2 2963\n3 1482\n11 138\n138 11\n1482 3\n2963 2\n8888 1"}, {"input": "22003000000000000", "output": "10\n1 22003000000000000\n4 2200300000000001\n5 1466866666666668\n15 183358333333338\n24 73343333333341\n73343333333341 24\n183358333333338 15\n1466866666666668 5\n2200300000000001 4\n22003000000000000 1"}, {"input": "40040", "output": "24\n1 40040\n2 13347\n3 6674\n4 4005\n7 1432\n10 731\n11 610\n12 517\n13 444\n20 197\n21 180\n39 64\n64 39\n180 21\n197 20\n444 13\n517 12\n610 11\n731 10\n1432 7\n4005 4\n6674 3\n13347 2\n40040 1"}, {"input": "1000000400", "output": "20\n1 1000000400\n2 333333467\n3 166666734\n4 100000041\n7 35714302\n19 5263166\n20 4761913\n56 626585\n75 350902\n399 12664\n12664 399\n350902 75\n626585 56\n4761913 20\n5263166 19\n35714302 7\n100000041 4\n166666734 3\n333333467 2\n1000000400 1"}, {"input": "5000004100", "output": "30\n1 5000004100\n4 500000411\n5 333333608\n6 238095435\n7 178571577\n13 54945104\n14 47619091\n24 16666688\n25 15384636\n49 4081652\n52 3628467\n104 915786\n105 898508\n195 261708\n636 24895\n24895 636\n261708 195\n898508 105\n915786 104\n3628467 52\n4081652 49\n15384636 25\n16666688 24\n47619091 14\n54945104 13\n178571577 7\n238095435 6\n333333608 5\n500000411 4\n5000004100 1"}, {"input": "90006000426440", "output": "30\n1 90006000426440\n2 30002000142147\n3 15001000071074\n4 9000600042645\n7 3214500015232\n16 661808826670\n20 428600002037\n34 151270588963\n48 76535714664\n84 25211764853\n111 14479729835\n119 12605882452\n147 8274131362\n628 455712949\n784 292493438\n292493438 784\n455712949 628\n8274131362 147\n12605882452 119\n14479729835 111\n25211764853 84\n76535714664 48\n151270588963 34\n428600002037 20\n661808826670 16\n3214500015232 7\n9000600042645 4\n15001000071074 3\n30002000142147 2\n90006000426440 1"}, {"input": "6466460", "output": "46\n1 6466460\n2 2155487\n3 1077744\n4 646647\n7 230947\n10 117575\n11 97980\n12 82907\n13 71064\n19 34040\n20 30799\n21 28000\n34 10879\n38 8739\n39 8303\n55 4217\n56 4070\n65 3036\n76 2235\n84 1839\n119 945\n209 364\n220 339\n339 220\n364 209\n945 119\n1839 84\n2235 76\n3036 65\n4070 56\n4217 55\n8303 39\n8739 38\n10879 34\n28000 21\n30799 20\n34040 19\n71064 13\n82907 12\n97980 11\n117575 10\n230947 7\n646647 4\n1077744 3\n2155487 2\n6466460 1"}, {"input": "30009980", "output": "28\n1 30009980\n2 10003327\n3 5001664\n4 3000999\n7 1071787\n10 545639\n11 454700\n12 384747\n13 329784\n20 142911\n21 129920\n39 38487\n55 19505\n65 14012\n14012 65\n19505 55\n38487 39\n129920 21\n142911 20\n329784 13\n384747 12\n454700 11\n545639 10\n1071787 7\n3000999 4\n5001664 3\n10003327 2\n30009980 1"}, {"input": "800008300", "output": "28\n1 800008300\n4 80000831\n5 53333888\n6 38095635\n7 28571727\n13 8791304\n14 7619131\n19 4210576\n24 2666702\n25 2461572\n49 653084\n104 146556\n195 41928\n455 7863\n7863 455\n41928 195\n146556 104\n653084 49\n2461572 25\n2666702 24\n4210576 19\n7619131 14\n8791304 13\n28571727 7\n38095635 6\n53333888 5\n80000831 4\n800008300 1"}, {"input": "808007200", "output": "34\n1 808007200\n4 80800721\n5 53867148\n6 38476535\n7 28857402\n10 14691043\n13 8879204\n14 7695311\n15 6733398\n24 2693365\n25 2486184\n32 1530327\n55 524698\n64 388486\n77 269092\n104 148021\n175 52526\n52526 175\n148021 104\n269092 77\n388486 64\n524698 55\n1530327 32\n2486184 25\n2693365 24\n6733398 15\n7695311 14\n8879204 13\n14691043 10\n28857402 7\n38476535 6\n53867148 5\n80800721 4\n808007200 1"}, {"input": "900601520", "output": "34\n1 900601520\n2 300200507\n3 150100254\n4 90060153\n7 32164342\n12 11546177\n13 9896724\n16 6622075\n19 4740014\n20 4288585\n34 1513627\n38 1215399\n39 1154630\n56 564305\n84 252297\n119 126174\n272 24347\n24347 272\n126174 119\n252297 84\n564305 56\n1154630 39\n1215399 38\n1513627 34\n4288585 20\n4740014 19\n6622075 16\n9896724 13\n11546177 12\n32164342 7\n90060153 4\n150100254 3\n300200507 2\n900601520 1"}, {"input": "500600123456789", "output": "4\n1 500600123456789\n2 166866707818930\n166866707818930 2\n500600123456789 1"}, {"input": "4729310003500000", "output": "10\n1 4729310003500000\n4 472931000350001\n5 315287333566668\n15 39410916695838\n24 15764366678341\n15764366678341 24\n39410916695838 15\n315287333566668 5\n472931000350001 4\n4729310003500000 1"}, {"input": "590084357100000000", "output": "20\n1 590084357100000000\n4 59008435710000001\n7 21074441325000002\n8 16391232141666669\n9 13112985713333336\n35 936641836666678\n49 481701516000016\n63 292700573958354\n224 23416045916741\n39374 761239791\n761239791 39374\n23416045916741 224\n292700573958354 63\n481701516000016 49\n936641836666678 35\n13112985713333336 9\n16391232141666669 8\n21074441325000002 7\n59008435710000001 4\n590084357100000000 1"}, {"input": "2937500926541895", "output": "2\n1 2937500926541895\n2937500926541895 1"}, {"input": "400000089000000000", "output": "10\n1 400000089000000000\n4 40000008900000001\n16 2941177125000005\n17 2614379666666672\n127 49212609375042\n49212609375042 127\n2614379666666672 17\n2941177125000005 16\n40000008900000001 4\n400000089000000000 1"}, {"input": "5", "output": "3\n1 5\n2 2\n5 1"}, {"input": "200800200", "output": "4\n1 200800200\n4 20080021\n20080021 4\n200800200 1"}, {"input": "999999853754584125", "output": "5\n1 999999853754584125\n45 966183433579323\n1442249 1442249\n966183433579323 45\n999999853754584125 1"}, {"input": "114335783345000", "output": "13\n1 114335783345000\n2 38111927781667\n3 19055963890834\n4 11433578334501\n7 4083420833752\n20 544456111173\n70000 70000\n544456111173 20\n4083420833752 7\n11433578334501 4\n19055963890834 3\n38111927781667 2\n114335783345000 1"}, {"input": "333343833443500385", "output": "7\n1 333343833443500385\n2 111114611147833462\n10 6060796971700010\n1000010 1000010\n6060796971700010 10\n111114611147833462 2\n333343833443500385 1"}, {"input": "333336333342000008", "output": "8\n1 333336333342000008\n2 111112111114000003\n3 55556055557000002\n1000002 1000003\n1000003 1000002\n55556055557000002 3\n111112111114000003 2\n333336333342000008 1"}, {"input": "41679167500", "output": "11\n1 41679167500\n4 4167916751\n5 2778611168\n24 138930566\n1095 69823\n5000 5000\n69823 1095\n138930566 24\n2778611168 5\n4167916751 4\n41679167500 1"}, {"input": "333357833933504900", "output": "15\n1 333357833933504900\n2 111119277977834967\n3 55559638988917484\n4 33335783393350491\n12 4273818383762887\n25 1025716412103100\n39 427381838376301\n1000024 1000024\n427381838376301 39\n1025716412103100 25\n4273818383762887 12\n33335783393350491 4\n55559638988917484 3\n111119277977834967 2\n333357833933504900 1"}, {"input": "2666686666700000", "output": "13\n1 2666686666700000\n2 888895555566667\n3 444447777783334\n4 266668666670001\n7 95238809525002\n20 12698507936673\n200000 200000\n12698507936673 20\n95238809525002 7\n266668666670001 4\n444447777783334 3\n888895555566667 2\n2666686666700000 1"}, {"input": "334344854787443885", "output": "15\n1 334344854787443885\n2 111448284929147962\n10 6078997359771710\n21 1447380323755175\n34 561924125693194\n101 64908727390335\n15554 2763842842\n1001010 1001010\n2763842842 15554\n64908727390335 101\n561924125693194 34\n1447380323755175 21\n6078997359771710 10\n111448284929147962 2\n334344854787443885 1"}, {"input": "979139840681508275", "output": "19\n1 979139840681508275\n2 326379946893836092\n10 17802542557845608\n21 4238700609010865\n29 2250896185474741\n109 163326078512381\n145 92502582964763\n174 64311319585050\n218 41017964923264\n1432150 1432150\n41017964923264 218\n64311319585050 174\n92502582964763 145\n163326078512381 109\n2250896185474741 29\n4238700609010865 21\n17802542557845608 10\n326379946893836092 2\n979139840681508275 1"}, {"input": "914669606669700001", "output": "3\n1 914669606669700001\n1400001 1400001\n914669606669700001 1"}, {"input": "333334833335500001", "output": "5\n1 333334833335500001\n2 111111611111833334\n1000001 1000001\n111111611111833334 2\n333334833335500001 1"}, {"input": "732334178333550000", "output": "11\n1 732334178333550000\n4 73233417833355001\n25 2253335933334008\n31 1476480198253135\n124 94494732688241\n1300000 1300000\n94494732688241 124\n1476480198253135 31\n2253335933334008 25\n73233417833355001 4\n732334178333550000 1"}, {"input": "14", "output": "5\n1 14\n2 5\n3 3\n5 2\n14 1"}, {"input": "576000720000200000", "output": "21\n1 576000720000200000\n2 192000240000066667\n3 96000120000033334\n4 57600072000020001\n10 10472740363640003\n11 8727283636366670\n43 608880253700014\n128 69767529069834\n472 5160002150157\n1375 608880254158\n1200000 1200000\n608880254158 1375\n5160002150157 472\n69767529069834 128\n608880253700014 43\n8727283636366670 11\n10472740363640003 10\n57600072000020001 4\n96000120000033334 3\n192000240000066667 2\n576000720000200000 1"}, {"input": "3456346346334634", "output": "2\n1 3456346346334634\n3456346346334634 1"}], "language": "cpp"}, "prompt": "D. Spongebob and Squares\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nSpongebob is already tired trying to reason his weird actions and calculations, so he simply asked you to find all pairs of n and m, such that there are exactly x distinct squares in the table consisting of n rows and m columns. For example, in a 3 * 5 table there are 15 squares with side one, 8 squares with side two and 3 squares with side three. The total number of distinct squares in a 3 * 5 table is 15 + 8 + 3 = 26.\nInput\nThe first line of the input contains a single integer x (1 <= x <= 1018) - the number of squares inside the tables Spongebob is interested in.\nOutput\nFirst print a single integer k - the number of tables with exactly x distinct squares inside.\nThen print k pairs of integers describing the tables. Print the pairs in the order of increasing n, and in case of equality - in the order of increasing m.\n", "generation": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nvoid solve() {\n  int x;\n  cin >> x;\n\n  int k = 0;\n  for (int n = 1; n * n <= x; n++) {\n    for (int m = 1; m * n <= x; m++) {\n      int numSquares = n * n + m * m - n * m;\n      if (numSquares == x) {\n        k++;\n      }\n    }\n  }\n\n  cout << k << endl;\n  for (int i = 0; i < k; i++) {\n    cout << n << \" \" << m << endl;\n  }\n}\n\nint main() {\n  solve();\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018void solve()\u2019:\ntest.cpp:22:13: error: \u2018n\u2019 was not declared in this scope\n   22 |     cout << n << \" \" << m << endl;\n      |             ^\ntest.cpp:22:25: error: \u2018m\u2019 was not declared in this scope\n   22 |     cout << n << \" \" << m << endl;\n      |                         ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/107", "completion_id": 0, "test_suite": {"code": "int solve(int n, int m, vector<vector<int>>& g) {\n  vector<vector<int>> dist(n, vector<int>(n, INT_MAX));\n  dist[1][0] = 0;\n\n  for (int i = 0; i < m; i++) {\n    int u = g[i][0];\n    int v = g[i][1];\n    dist[v][0] = min(dist[v][0], dist[u][0] + 1);\n  }\n\n  for (int i = 1; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      dist[j][i] = min(dist[j][i], dist[j][0] + 1);\n    }\n  }\n\n  if (dist[n][0] == INT_MAX) {\n    return -1;\n  }\n\n  return dist[n][0];\n}\n", "testcases": [{"input": "4 2\n1 3\n3 4", "output": "2"}, {"input": "4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4", "output": "-1"}, {"input": "5 5\n4 2\n3 5\n4 5\n5 1\n1 2", "output": "3"}, {"input": "5 4\n1 2\n3 2\n3 4\n5 4", "output": "4"}, {"input": "3 1\n1 2", "output": "-1"}, {"input": "2 1\n1 2", "output": "-1"}, {"input": "2 0", "output": "-1"}, {"input": "20 0", "output": "-1"}, {"input": "381 0", "output": "-1"}, {"input": "3 3\n1 2\n2 3\n3 1", "output": "-1"}, {"input": "3 0", "output": "-1"}, {"input": "3 1\n1 3", "output": "2"}, {"input": "3 2\n2 3\n3 1", "output": "-1"}, {"input": "4 1\n1 4", "output": "2"}, {"input": "4 5\n1 3\n2 1\n3 4\n4 2\n2 3", "output": "2"}, {"input": "20 1\n20 1", "output": "2"}, {"input": "21 1\n21 1", "output": "2"}, {"input": "100 1\n100 1", "output": "2"}, {"input": "400 1\n1 400", "output": "2"}, {"input": "5 5\n2 5\n1 2\n1 4\n1 3\n3 2", "output": "2"}], "language": "cpp"}, "prompt": "A. The Two Routes\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nIn Absurdistan, there are n towns (numbered 1 through n) and m bidirectional railways. There is also an absurdly simple road network - for each pair of different towns x and y, there is a bidirectional road between towns x and y if and only if there is no railway between them. Travelling to a different town using one railway or one road always takes exactly one hour.\nA train and a bus leave town 1 at the same time. They both have the same destination, town n, and don't make any stops on the way (but they can wait in town n). The train can move only along railways and the bus can move only along roads.\nYou've been asked to plan out routes for the vehicles; each route can use any road/railway multiple times. One of the most important aspects to consider is safety - in order to avoid accidents at railway crossings, the train and the bus must not arrive at the same town (except town n) simultaneously.\nUnder these constraints, what is the minimum number of hours needed for both vehicles to reach town n (the maximum of arrival times of the bus and the train)? Note, that bus and train are not required to arrive to the town n at the same moment of time, but are allowed to do so.\nInput\nThe first line of the input contains two integers n and m (2 <= n <= 400, 0 <= m <= n(n - 1) / 2) - the number of towns and the number of railways respectively.\nEach of the next m lines contains two integers u and v, denoting a railway between towns u and v (1 <= u, v <= n, u != v).\nYou may assume that there is at most one railway connecting any two towns.\nOutput\nOutput one integer - the smallest possible time of the later vehicle's arrival in town n. If it's impossible for at least one of the vehicles to reach town n, output  - 1.\n", "generation": "int solve(int n, int m, vector<vector<int>>& g) {\n  vector<vector<int>> dist(n, vector<int>(n, INT_MAX));\n  dist[1][0] = 0;\n\n  for (int i = 0; i < m; i++) {\n    int u = g[i][0];\n    int v = g[i][1];\n    dist[v][0] = min(dist[v][0], dist[u][0] + 1);\n  }\n\n  for (int i = 1; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      dist[j][i] = min(dist[j][i], dist[j][0] + 1);\n    }\n  }\n\n  if (dist[n][0] == INT_MAX) {\n    return -1;\n  }\n\n  return dist[n][0];\n}\n", "result": "failed: compilation error: test.cpp:1:25: error: \u2018vector\u2019 has not been declared\n    1 | int solve(int n, int m, vector<vector<int>>& g) {\n      |                         ^~~~~~\ntest.cpp:1:31: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018<\u2019 token\n    1 | int solve(int n, int m, vector<vector<int>>& g) {\n      |                               ^\ntest.cpp: In function \u2018int solve(int, int, int)\u2019:\ntest.cpp:2:3: error: \u2018vector\u2019 was not declared in this scope\n    2 |   vector<vector<int>> dist(n, vector<int>(n, INT_MAX));\n      |   ^~~~~~\ntest.cpp:2:17: error: expected primary-expression before \u2018int\u2019\n    2 |   vector<vector<int>> dist(n, vector<int>(n, INT_MAX));\n      |                 ^~~\ntest.cpp:3:3: error: \u2018dist\u2019 was not declared in this scope\n    3 |   dist[1][0] = 0;\n      |   ^~~~\ntest.cpp:6:13: error: \u2018g\u2019 was not declared in this scope\n    6 |     int u = g[i][0];\n      |             ^\ntest.cpp:8:18: error: \u2018min\u2019 was not declared in this scope\n    8 |     dist[v][0] = min(dist[v][0], dist[u][0] + 1);\n      |                  ^~~\ntest.cpp:13:20: error: \u2018min\u2019 was not declared in this scope\n   13 |       dist[j][i] = min(dist[j][i], dist[j][0] + 1);\n      |                    ^~~\ntest.cpp:17:21: error: \u2018INT_MAX\u2019 was not declared in this scope\n   17 |   if (dist[n][0] == INT_MAX) {\n      |                     ^~~~~~~\ntest.cpp:1:1: note: \u2018INT_MAX\u2019 is defined in header \u2018<climits>\u2019; did you forget to \u2018#include <climits>\u2019?\n  +++ |+#include <climits>\n    1 | int solve(int n, int m, vector<vector<int>>& g) {\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/109", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> calculateLipschitzConstant(vector<int> &h) {\n  vector<int> k(h.size());\n  k[0] = 0;\n  for(int i = 1; i < h.size(); i++) {\n    k[i] = k[i-1] + 1;\n    for(int j = 0; j < i; j++) {\n      if(abs(h[i] - h[j]) <= k[i] - k[j]) {\n        k[i] = min(k[i], k[j] + 1);\n      }\n    }\n  }\n  return k;\n}\n\nint main() {\n  int n, q;\n  cin >> n;\n  cin >> q;\n\n  vector<int> h(n);\n  cin >> h;\n\n  vector<int> k = calculateLipschitzConstant(h);\n\n  for(int i = 0; i < q; i++) {\n    int l, r;\n    cin >> l;\n    cin >> r;\n    cout << k[r] - k[l-1] << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "10 4\n1 5 2 9 1 3 4 2 1 7\n2 4\n3 8\n7 10\n1 9", "output": "17\n82\n23\n210"}, {"input": "7 6\n5 7 7 4 6 6 2\n1 2\n2 3\n2 6\n1 7\n4 7\n3 5", "output": "2\n0\n22\n59\n16\n8"}, {"input": "2 2\n0 0\n1 2\n1 2", "output": "0\n0"}, {"input": "2 2\n0 100000000\n1 2\n1 2", "output": "100000000\n100000000"}, {"input": "4 6\n1 2 3 2\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4", "output": "1\n3\n6\n1\n3\n1"}, {"input": "3 6\n10 20 30\n1 2\n1 3\n2 3\n1 2\n2 3\n1 3", "output": "10\n30\n10\n10\n10\n30"}, {"input": "3 6\n48261735 26888803 75904937\n1 2\n1 3\n2 3\n1 2\n2 3\n1 3", "output": "21372932\n119405200\n49016134\n21372932\n49016134\n119405200"}, {"input": "3 6\n100000000 99999999 0\n1 2\n1 3\n2 3\n1 2\n2 3\n1 3", "output": "1\n199999999\n99999999\n1\n99999999\n199999999"}, {"input": "100000 100\noutput": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"}, {"input": "2 2\n100000000 0\n1 2\n1 2", "output": "100000000\n100000000"}], "language": "cpp"}, "prompt": "B. Lipshitz Sequence\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nA function  is called Lipschitz continuous if there is a real constant K such that the inequality |f(x) - f(y)| <= K.|x - y| holds for all . We'll deal with a more... discrete version of this term.\nFor an array , we define it's Lipschitz constant  as follows:\nif n < 2,\nif n >= 2,  over all 1 <= i < j <= n\nIn other words,  is the smallest non-negative integer such that |h[i] - h[j]| <= L.|i - j| holds for all 1 <= i, j <= n.\nYou are given an array  of size n and q queries of the form [l, r]. For each query, consider the subarray ; determine the sum of Lipschitz constants of all subarrays of .\nInput\nThe first line of the input contains two space-separated integers n and q (2 <= n <= 100 000 and 1 <= q <= 100) - the number of elements in array  and the number of queries respectively.\nThe second line contains n space-separated integers  ().\nThe following q lines describe queries. The i-th of those lines contains two space-separated integers li and ri (1 <= li < ri <= n).\nOutput\nPrint the answers to all queries in the order in which they are given in the input. For the i-th query, print one line containing a single integer - the sum of Lipschitz constants of all subarrays of .\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> calculateLipschitzConstant(vector<int> &h) {\n  vector<int> k(h.size());\n  k[0] = 0;\n  for(int i = 1; i < h.size(); i++) {\n    k[i] = k[i-1] + 1;\n    for(int j = 0; j < i; j++) {\n      if(abs(h[i] - h[j]) <= k[i] - k[j]) {\n        k[i] = min(k[i], k[j] + 1);\n      }\n    }\n  }\n  return k;\n}\n\nint main() {\n  int n, q;\n  cin >> n;\n  cin >> q;\n\n  vector<int> h(n);\n  cin >> h;\n\n  vector<int> k = calculateLipschitzConstant(h);\n\n  for(int i = 0; i < q; i++) {\n    int l, r;\n    cin >> l;\n    cin >> r;\n    cout << k[r] - k[l-1] << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:26:7: error: no match for \u2018operator>>\u2019 (operand types are \u2018std::istream\u2019 {aka \u2018std::basic_istream<char>\u2019} and \u2018std::vector<int>\u2019)\n   26 |   cin >> h;\n      |   ~~~ ^~ ~\n      |   |      |\n      |   |      std::vector<int>\n      |   std::istream {aka std::basic_istream<char>}\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:120:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__istream_type& (*)(std::basic_istream<_CharT, _Traits>::__istream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:120:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__istream_type& (*)(std::basic_istream<char>::__istream_type&)\u2019 {aka \u2018std::basic_istream<char>& (*)(std::basic_istream<char>&)\u2019}\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:124:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__ios_type& (*)(std::basic_istream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>; std::basic_istream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]\u2019\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:124:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__ios_type& (*)(std::basic_istream<char>::__ios_type&)\u2019 {aka \u2018std::basic_ios<char>& (*)(std::basic_ios<char>&)\u2019}\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:131:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:131:30: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::ios_base& (*)(std::ios_base&)\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |                  ~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:168:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(bool&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  168 |       operator>>(bool& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:168:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018bool&\u2019\n  168 |       operator>>(bool& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:172:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(short int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  172 |       operator>>(short& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:172:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short int&\u2019\n  172 |       operator>>(short& __n);\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:175:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(short unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  175 |       operator>>(unsigned short& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:175:34: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short unsigned int&\u2019\n  175 |       operator>>(unsigned short& __n)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:179:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  179 |       operator>>(int& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:179:23: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018int&\u2019\n  179 |       operator>>(int& __n);\n      |                  ~~~~~^~~\n/usr/include/c++/9/istream:182:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  182 |       operator>>(unsigned int& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:182:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018unsigned int&\u2019\n  182 |       operator>>(unsigned int& __n)\n      |                  ~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:186:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  186 |       operator>>(long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:186:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long int&\u2019\n  186 |       operator>>(long& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:190:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  190 |       operator>>(unsigned long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:190:33: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long unsigned int&\u2019\n  190 |       operator>>(unsigned long& __n)\n      |                  ~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:195:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  195 |       operator>>(long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:195:29: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long int&\u2019\n  195 |       operator>>(long long& __n)\n      |                  ~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:199:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:199:38: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long unsigned int&\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |                  ~~~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:214:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(float&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  214 |       operator>>(float& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:214:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018float&\u2019\n  214 |       operator>>(float& __f)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:218:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  218 |       operator>>(double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:218:26: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018double&\u2019\n  218 |       operator>>(double& __f)\n      |                  ~~~~~~~~^~~\n/usr/include/c++/9/istream:222:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  222 |       operator>>(long double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:222:31: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long double&\u2019\n  222 |       operator>>(long double& __f)\n      |                  ~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:235:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(void*&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  235 |       operator>>(void*& __p)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:235:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018void*&\u2019\n  235 |       operator>>(void*& __p)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:259:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]\u2019\n  259 |       operator>>(__streambuf_type* __sb);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:259:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__streambuf_type*\u2019 {aka \u2018std::basic_streambuf<char>*\u2019}\n  259 |       operator>>(__streambuf_type* __sb);\n      |                  ~~~~~~~~~~~~~~~~~~^~~~\nIn file included from /usr/include/c++/9/string:56,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/ostream:38,\n                 from /usr/include/c++/9/iostream:39,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 1466 |     operator>>(basic_istream<_CharT, _Traits>& __in,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note:   template argument deduction/substitution failed:\ntest.cpp:26:10: note:   \u2018std::vector<int>\u2019 is not derived from \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\n   26 |   cin >> h;\n      |          ^\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:931:5: note: candidate: \u2018template<class _CharT, class _Traits> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT&)\u2019\n  931 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:931:5: note:   template argument deduction/substitution failed:\ntest.cpp:26:10: note:   deduced conflicting types for parameter \u2018_CharT\u2019 (\u2018char\u2019 and \u2018std::vector<int>\u2019)\n   26 |   cin >> h;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:756:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char&)\u2019\n  756 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:756:5: note:   template argument deduction/substitution failed:\ntest.cpp:26:10: note:   cannot convert \u2018h\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char&\u2019\n   26 |   cin >> h;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:761:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char&)\u2019\n  761 |     operator>>(basic_istream<char, _Traits>& __in, signed char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:761:5: note:   template argument deduction/substitution failed:\ntest.cpp:26:10: note:   cannot convert \u2018h\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char&\u2019\n   26 |   cin >> h;\n      |          ^\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:963:5: note: candidate: \u2018template<class _CharT2, class _Traits2> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT2*)\u2019\n  963 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:963:5: note:   template argument deduction/substitution failed:\ntest.cpp:26:10: note:   mismatched types \u2018_CharT2*\u2019 and \u2018std::vector<int>\u2019\n   26 |   cin >> h;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:803:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char*)\u2019\n  803 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:803:5: note:   template argument deduction/substitution failed:\ntest.cpp:26:10: note:   cannot convert \u2018h\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char*\u2019\n   26 |   cin >> h;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:808:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char*)\u2019\n  808 |     operator>>(basic_istream<char, _Traits>& __in, signed char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:808:5: note:   template argument deduction/substitution failed:\ntest.cpp:26:10: note:   cannot convert \u2018h\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char*\u2019\n   26 |   cin >> h;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:980:5: note: candidate: \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&)\u2019\n  980 |     operator>>(_Istream&& __is, _Tp&& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:980:5: note:   template argument deduction/substitution failed:\n/usr/include/c++/9/istream: In substitution of \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&) [with _Istream = std::basic_istream<char>&; _Tp = std::vector<int>&]\u2019:\ntest.cpp:26:10:   required from here\n/usr/include/c++/9/istream:980:5: error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false, std::basic_istream<char>&>\u2019\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/110", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> dfs(int v, vector<vector<int>>& g, vector<int>& vis, vector<string>& str) {\n  vector<int> res(str.size(), 0);\n  vis[v] = true;\n  for(int i = 0; i < g[v].size(); i++) {\n    if(!vis[g[v][i]]) {\n      vector<int> sub = dfs(g[v][i], g, vis, str);\n      for(int i = 0; i < sub.size(); i++) {\n        res[i] = max(res[i], sub[i] + 1);\n      }\n    }\n  }\n  return res;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  vector<int> ci(n);\n  cin >> ci;\n  string s(n);\n  cin >> s;\n\n  vector<vector<int>> g(n);\n  for(int i = 0; i < n - 1; i++) {\n    int u, v;\n    cin >> u;\n    cin >> v;\n    g[u].push_back(v);\n  }\n\n  vector<string> str(n);\n  str[0] = s;\n\n  vector<int> vis(n, false);\n  vector<int> ans = dfs(1, g, vis, str);\n\n  for(int i = 0; i < n; i++) {\n    cout << ans[i] << \" \";\n  }\n  cout << endl;\n\n  int cnt = 0;\n  for(int i = 0; i < n; i++) {\n    if(ans[i] == ci[i]) {\n      cnt++;\n    }\n  }\n  cout << cnt;\n  return 0;\n}\n", "testcases": [{"input": "10\n1 2 7 20 20 30 40 50 50 50\ncacabbcddd\n1 2\n6 8\n7 2\n6 2\n5 4\n5 9\n3 10\n2 5\n2 3", "output": "51\n3"}, {"input": "6\n0 2 4 1 1 1\nraaaba\n1 2\n2 3\n2 4\n2 5\n3 6", "output": "6\n2"}, {"input": "16\n186427765 186427335 186426882 186427151 186427355 186427547 186427780 186426890 186426952 186427412 186426996 186427780 186427370 186426915 186426997 186427778\njogkjtcexuevqevc\n16 13\n1 15\n9 10\n2 15\n7 9\n15 9\n8 2\n12 9\n11 6\n11 16\n14 5\n4 15\n14 15\n3 13\n13 1", "output": "186427781\n4"}, {"input": "1\n1000000000\na", "output": "1000000001\n1"}, {"input": "1\n0\nz", "output": "1\n1"}, {"input": "2\n1 2\naa\n1 2", "output": "3\n2"}, {"input": "2\n1 2\nab\n1 2", "output": "3\n2"}], "language": "cpp"}, "prompt": "D. Acyclic Organic Compounds\ntime limit per test\n3 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nYou are given a tree T with n vertices (numbered 1 through n) and a letter in each vertex. The tree is rooted at vertex 1.\nLet's look at the subtree Tv of some vertex v. It is possible to read a string along each simple path starting at v and ending at some vertex in Tv (possibly v itself). Let's denote the number of distinct strings which can be read this way as .\nAlso, there's a number cv assigned to each vertex v. We are interested in vertices with the maximum value of .\nYou should compute two statistics: the maximum value of  and the number of vertices v with the maximum .\nInput\nThe first line of the input contains one integer n (1 <= n <= 300 000) - the number of vertices of the tree.\nThe second line contains n space-separated integers ci (0 <= ci <= 109).\nThe third line contains a string s consisting of n lowercase English letters - the i-th character of this string is the letter in vertex i.\nThe following n - 1 lines describe the tree T. Each of them contains two space-separated integers u and v (1 <= u, v <= n) indicating an edge between vertices u and v.\nIt's guaranteed that the input will describe a tree.\nOutput\nPrint two lines.\nOn the first line, print  over all 1 <= i <= n.\nOn the second line, print the number of vertices v for which .\n", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> dfs(int v, vector<vector<int>>& g, vector<int>& vis, vector<string>& str) {\n  vector<int> res(str.size(), 0);\n  vis[v] = true;\n  for(int i = 0; i < g[v].size(); i++) {\n    if(!vis[g[v][i]]) {\n      vector<int> sub = dfs(g[v][i], g, vis, str);\n      for(int i = 0; i < sub.size(); i++) {\n        res[i] = max(res[i], sub[i] + 1);\n      }\n    }\n  }\n  return res;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  vector<int> ci(n);\n  cin >> ci;\n  string s(n);\n  cin >> s;\n\n  vector<vector<int>> g(n);\n  for(int i = 0; i < n - 1; i++) {\n    int u, v;\n    cin >> u;\n    cin >> v;\n    g[u].push_back(v);\n  }\n\n  vector<string> str(n);\n  str[0] = s;\n\n  vector<int> vis(n, false);\n  vector<int> ans = dfs(1, g, vis, str);\n\n  for(int i = 0; i < n; i++) {\n    cout << ans[i] << \" \";\n  }\n  cout << endl;\n\n  int cnt = 0;\n  for(int i = 0; i < n; i++) {\n    if(ans[i] == ci[i]) {\n      cnt++;\n    }\n  }\n  cout << cnt;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:25:7: error: no match for \u2018operator>>\u2019 (operand types are \u2018std::istream\u2019 {aka \u2018std::basic_istream<char>\u2019} and \u2018std::vector<int>\u2019)\n   25 |   cin >> ci;\n      |   ~~~ ^~ ~~\n      |   |      |\n      |   |      std::vector<int>\n      |   std::istream {aka std::basic_istream<char>}\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:120:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__istream_type& (*)(std::basic_istream<_CharT, _Traits>::__istream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:120:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__istream_type& (*)(std::basic_istream<char>::__istream_type&)\u2019 {aka \u2018std::basic_istream<char>& (*)(std::basic_istream<char>&)\u2019}\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:124:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__ios_type& (*)(std::basic_istream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>; std::basic_istream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]\u2019\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:124:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__ios_type& (*)(std::basic_istream<char>::__ios_type&)\u2019 {aka \u2018std::basic_ios<char>& (*)(std::basic_ios<char>&)\u2019}\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:131:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:131:30: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::ios_base& (*)(std::ios_base&)\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |                  ~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:168:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(bool&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  168 |       operator>>(bool& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:168:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018bool&\u2019\n  168 |       operator>>(bool& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:172:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(short int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  172 |       operator>>(short& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:172:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short int&\u2019\n  172 |       operator>>(short& __n);\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:175:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(short unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  175 |       operator>>(unsigned short& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:175:34: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short unsigned int&\u2019\n  175 |       operator>>(unsigned short& __n)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:179:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  179 |       operator>>(int& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:179:23: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018int&\u2019\n  179 |       operator>>(int& __n);\n      |                  ~~~~~^~~\n/usr/include/c++/9/istream:182:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  182 |       operator>>(unsigned int& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:182:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018unsigned int&\u2019\n  182 |       operator>>(unsigned int& __n)\n      |                  ~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:186:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  186 |       operator>>(long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:186:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long int&\u2019\n  186 |       operator>>(long& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:190:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  190 |       operator>>(unsigned long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:190:33: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long unsigned int&\u2019\n  190 |       operator>>(unsigned long& __n)\n      |                  ~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:195:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  195 |       operator>>(long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:195:29: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long int&\u2019\n  195 |       operator>>(long long& __n)\n      |                  ~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:199:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:199:38: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long unsigned int&\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |                  ~~~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:214:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(float&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  214 |       operator>>(float& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:214:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018float&\u2019\n  214 |       operator>>(float& __f)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:218:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  218 |       operator>>(double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:218:26: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018double&\u2019\n  218 |       operator>>(double& __f)\n      |                  ~~~~~~~~^~~\n/usr/include/c++/9/istream:222:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  222 |       operator>>(long double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:222:31: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long double&\u2019\n  222 |       operator>>(long double& __f)\n      |                  ~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:235:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(void*&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  235 |       operator>>(void*& __p)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:235:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018void*&\u2019\n  235 |       operator>>(void*& __p)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:259:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]\u2019\n  259 |       operator>>(__streambuf_type* __sb);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:259:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__streambuf_type*\u2019 {aka \u2018std::basic_streambuf<char>*\u2019}\n  259 |       operator>>(__streambuf_type* __sb);\n      |                  ~~~~~~~~~~~~~~~~~~^~~~\nIn file included from /usr/include/c++/9/string:56,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/ostream:38,\n                 from /usr/include/c++/9/iostream:39,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 1466 |     operator>>(basic_istream<_CharT, _Traits>& __in,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note:   template argument deduction/substitution failed:\ntest.cpp:25:10: note:   \u2018std::vector<int>\u2019 is not derived from \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\n   25 |   cin >> ci;\n      |          ^~\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:931:5: note: candidate: \u2018template<class _CharT, class _Traits> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT&)\u2019\n  931 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:931:5: note:   template argument deduction/substitution failed:\ntest.cpp:25:10: note:   deduced conflicting types for parameter \u2018_CharT\u2019 (\u2018char\u2019 and \u2018std::vector<int>\u2019)\n   25 |   cin >> ci;\n      |          ^~\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:756:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char&)\u2019\n  756 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:756:5: note:   template argument deduction/substitution failed:\ntest.cpp:25:10: note:   cannot convert \u2018ci\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char&\u2019\n   25 |   cin >> ci;\n      |          ^~\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:761:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char&)\u2019\n  761 |     operator>>(basic_istream<char, _Traits>& __in, signed char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:761:5: note:   template argument deduction/substitution failed:\ntest.cpp:25:10: note:   cannot convert \u2018ci\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char&\u2019\n   25 |   cin >> ci;\n      |          ^~\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:963:5: note: candidate: \u2018template<class _CharT2, class _Traits2> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT2*)\u2019\n  963 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:963:5: note:   template argument deduction/substitution failed:\ntest.cpp:25:10: note:   mismatched types \u2018_CharT2*\u2019 and \u2018std::vector<int>\u2019\n   25 |   cin >> ci;\n      |          ^~\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:803:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char*)\u2019\n  803 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:803:5: note:   template argument deduction/substitution failed:\ntest.cpp:25:10: note:   cannot convert \u2018ci\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char*\u2019\n   25 |   cin >> ci;\n      |          ^~\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:808:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char*)\u2019\n  808 |     operator>>(basic_istream<char, _Traits>& __in, signed char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:808:5: note:   template argument deduction/substitution failed:\ntest.cpp:25:10: note:   cannot convert \u2018ci\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char*\u2019\n   25 |   cin >> ci;\n      |          ^~\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:980:5: note: candidate: \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&)\u2019\n  980 |     operator>>(_Istream&& __is, _Tp&& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:980:5: note:   template argument deduction/substitution failed:\n/usr/include/c++/9/istream: In substitution of \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&) [with _Istream = std::basic_istream<char>&; _Tp = std::vector<int>&]\u2019:\ntest.cpp:25:10:   required from here\n/usr/include/c++/9/istream:980:5: error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false, std::basic_istream<char>&>\u2019\ntest.cpp:26:13: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::basic_string(int&)\u2019\n   26 |   string s(n);\n      |             ^\nIn file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/ostream:38,\n                 from /usr/include/c++/9/iostream:39,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/basic_string.h:625:9: note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&)\u2019\n  625 |         basic_string(_InputIterator __beg, _InputIterator __end,\n      |         ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:625:9: note:   template argument deduction/substitution failed:\ntest.cpp:26:13: note:   candidate expects 3 arguments, 1 provided\n   26 |   string s(n);\n      |             ^\nIn file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/ostream:38,\n                 from /usr/include/c++/9/iostream:39,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/basic_string.h:587:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n  587 |       basic_string(basic_string&& __str, const _Alloc& __a)\n      |       ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:587:7: note:   candidate expects 2 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:583:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n  583 |       basic_string(const basic_string& __str, const _Alloc& __a)\n      |       ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:583:7: note:   candidate expects 2 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:579:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::initializer_list<_Tp>, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n  579 |       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())\n      |       ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:579:45: note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018std::initializer_list<char>\u2019\n  579 |       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())\n      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/basic_string.h:552:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n  552 |       basic_string(basic_string&& __str) noexcept\n      |       ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:552:35: note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018std::__cxx11::basic_string<char>&&\u2019\n  552 |       basic_string(basic_string&& __str) noexcept\n      |                    ~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:540:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, _CharT, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]\u2019\n  540 |       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())\n      |       ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:540:7: note:   candidate expects 3 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:525:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019 <near match>\n  525 |       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())\n      |       ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:525:7: note:   conversion of argument 1 would be ill-formed:\ntest.cpp:26:12: error: invalid conversion from \u2018int\u2019 to \u2018const char*\u2019 [-fpermissive]\n   26 |   string s(n);\n      |            ^\n      |            |\n      |            int\nIn file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/ostream:38,\n                 from /usr/include/c++/9/iostream:39,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/basic_string.h:510:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]\u2019\n  510 |       basic_string(const _CharT* __s, size_type __n,\n      |       ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:510:7: note:   candidate expects 3 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:492:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]\u2019\n  492 |       basic_string(const basic_string& __str, size_type __pos,\n      |       ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:492:7: note:   candidate expects 4 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:476:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]\u2019\n  476 |       basic_string(const basic_string& __str, size_type __pos,\n      |       ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:476:7: note:   candidate expects 3 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:461:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned int]\u2019\n  461 |       basic_string(const basic_string& __str, size_type __pos,\n      |       ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:461:7: note:   candidate expects 3 arguments, 1 provided\n/usr/include/c++/9/bits/basic_string.h:448:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n  448 |       basic_string(const basic_string& __str)\n      |       ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:448:40: note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const std::__cxx11::basic_string<char>&\u2019\n  448 |       basic_string(const basic_string& __str)\n      |                    ~~~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:440:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n  440 |       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:440:34: note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const std::allocator<char>&\u2019\n  440 |       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT\n      |                    ~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/basic_string.h:431:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n  431 |       basic_string()\n      |       ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:431:7: note:   candidate expects 0 arguments, 1 provided\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/111", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> v, w;\nvector<int> dp(int m) {\n  vector<int> dp(m + 1, 0);\n  dp[0] = 0;\n  for(int i = 1; i <= m; i++) {\n    dp[i] = dp[i - 1] + v[i];\n  }\n  return dp;\n}\n\nint main() {\n  int n, k, q;\n  cin >> n;\n  cin >> k;\n\n  v.resize(n);\n  w.resize(n);\n  for(int i = 0; i < n; i++) {\n    cin >> v[i];\n    cin >> w[i];\n  }\n\n  cin >> q;\n\n  vector<int> ans(q);\n  for(int i = 0; i < q; i++) {\n    int type;\n    cin >> type;\n\n    if(type == 1) {\n      int v, w;\n      cin >> v;\n      cin >> w;\n      v.push_back(v);\n      w.push_back(w);\n    } else if(type == 2) {\n      int x;\n      cin >> x;\n      v.erase(find(v.begin(), v.end(), x));\n      w.erase(find(w.begin(), w.end(), x));\n    } else if(type == 3) {\n      int m;\n      cin >> m;\n      vector<int> dp = dp(m);\n      ans[i] = dp[m];\n    }\n  }\n\n  for(int i = 0; i < q; i++) {\n    cout << ans[i] << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "3 10\n30 4\n60 6\n5 1\n9\n3\n1 42 5\n1 20 3\n3\n2 2\n2 4\n3\n1 40 6\n3", "output": "556674384\n168191145\n947033915\n181541912"}, {"input": "3 1000\n100 42\n100 47\n400 15\n4\n2 2\n2 1\n2 3\n3", "output": "0"}, {"input": "2 72\n77 5\n91 6\n17\n1 26 1\n1 51 8\n1 6 9\n3\n3\n2 2\n2 3\n1 61 2\n2 6\n2 1\n3\n2 4\n2 5\n3\n1 2 7\n3\n2 7", "output": "650494204\n650494204\n139601437\n0\n142576201"}, {"input": "6 20\n60 2\n55 4\n24 6\n65 3\n75 2\n71 2\n35\n3\n3\n2 4\n2 5\n1 20 3\n3\n3\n2 6\n3\n3\n1 18 7\n1 7 8\n1 59 2\n1 93 9\n1 50 4\n1 95 1\n1 15 7\n2 14\n2 10\n1 94 4\n1 78 8\n1 52 2\n1 87 6\n1 39 2\n2 1\n3\n1 24 8\n2 20\n3\n1 42 3\n2 2\n1 16 7\n1 96 6\n1 73 6\n3", "output": "587321433\n587321433\n175743672\n175743672\n268772047\n268772047\n323760480\n323760480\n692508201"}, {"input": "10 65\n35 9\n10 2\n68 8\n51 1\n2 5\n89 3\n70 4\n44 7\n21 7\n17 4\n20\n3\n2 2\n2 7\n3\n3\n1 3 7\n2 3\n2 6\n3\n3\n1 91 1\n3\n3\n1 80 2\n1 89 9\n2 11\n2 10\n3\n3\n3", "output": "595129643\n244401840\n244401840\n15119001\n15119001\n286901858\n286901858\n754897446\n754897446\n754897446"}, {"input": "18 5\n23 3\n66 10\n8 4\n45 10\n21 3\n16 10\n88 8\n92 6\n30 4\n74 9\n17 4\n11 3\n24 10\n80 4\n50 7\n55 8\n59 6\n11 4\n15\n3\n3\n3\n3\n2 2\n3\n2 16\n3\n2 3\n1 93 10\n3\n3\n1 45 8\n3\n3", "output": "748289410\n748289410\n748289410\n748289410\n748289410\n748289410\n748289410\n748289410\n748289410\n748289410"}, {"input": "2 58\n94 10\n25 2\n35\n2 2\n1 23 6\n2 3\n1 51 2\n2 1\n1 59 9\n2 4\n1 37 5\n2 5\n2 6\n1 31 4\n1 42 2\n2 7\n2 8\n1 98 6\n2 9\n1 48 6\n2 10\n3\n1 43 9\n2 11\n1 62 9\n2 12\n3\n1 57 5\n2 13\n1 1 7\n2 14\n3\n1 64 7\n2 15\n1 39 5\n2 16\n1 27 2\n2 17", "output": "0\n0\n0"}, {"input": "6 2\n81 3\n81 6\n95 5\n34 2\n59 3\n53 6\n13\n2 1\n1 33 2\n2 6\n2 7\n3\n3\n2 4\n2 5\n3\n3\n2 2\n2 3\n3", "output": "340000646\n340000646\n0\n0\n0"}, {"input": "1 1\n1 1\n1\n3", "output": "1"}], "language": "cpp"}, "prompt": "E. A Museum Robbery\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nThere's a famous museum in the city where Kleofas lives. In the museum, n exhibits (numbered 1 through n) had been displayed for a long time; the i-th of those exhibits has value vi and mass wi.\nThen, the museum was bought by a large financial group and started to vary the exhibits. At about the same time, Kleofas... gained interest in the museum, so to say.\nYou should process q events of three types:\ntype 1 - the museum displays an exhibit with value v and mass w; the exhibit displayed in the i-th event of this type is numbered n + i (see sample explanation for more details)\ntype 2 - the museum removes the exhibit with number x and stores it safely in its vault\ntype 3 - Kleofas visits the museum and wonders (for no important reason at all, of course): if there was a robbery and exhibits with total mass at most m were stolen, what would their maximum possible total value be?\nFor each event of type 3, let s(m) be the maximum possible total value of stolen exhibits with total mass  <= m.\nFormally, let D be the set of numbers of all exhibits that are currently displayed (so initially D = {1, ..., n}). Let P(D) be the set of all subsets of D and let\nThen, s(m) is defined as\nCompute s(m) for each . Note that the output follows a special format.\nInput\nThe first line of the input contains two space-separated integers n and k (1 <= n <= 5000, 1 <= k <= 1000) - the initial number of exhibits in the museum and the maximum interesting mass of stolen exhibits.\nThen, n lines follow. The i-th of them contains two space-separated positive integers vi and wi (1 <= vi <= 1 000 000, 1 <= wi <= 1000) - the value and mass of the i-th exhibit.\nThe next line contains a single integer q (1 <= q <= 30 000) - the number of events.\nEach of the next q lines contains the description of one event in the following format:\n1 v w - an event of type 1, a new exhibit with value v and mass w has been added (1 <= v <= 1 000 000, 1 <= w <= 1000)\n2 x - an event of type 2, the exhibit with number x has been removed; it's guaranteed that the removed exhibit had been displayed at that time\n3 - an event of type 3, Kleofas visits the museum and asks his question\nThere will be at most 10 000 events of type 1 and at least one event of type 3.\nOutput\nAs the number of values s(m) can get large, output the answers to events of type 3 in a special format.\nFor each event of type 3, consider the values s(m) computed for the question that Kleofas asked in this event; print one line containing a single number\nwhere p = 107 + 19 and q = 109 + 7.\nPrint the answers to events of type 3 in the order in which they appear in the input.\n", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> v, w;\nvector<int> dp(int m) {\n  vector<int> dp(m + 1, 0);\n  dp[0] = 0;\n  for(int i = 1; i <= m; i++) {\n    dp[i] = dp[i - 1] + v[i];\n  }\n  return dp;\n}\n\nint main() {\n  int n, k, q;\n  cin >> n;\n  cin >> k;\n\n  v.resize(n);\n  w.resize(n);\n  for(int i = 0; i < n; i++) {\n    cin >> v[i];\n    cin >> w[i];\n  }\n\n  cin >> q;\n\n  vector<int> ans(q);\n  for(int i = 0; i < q; i++) {\n    int type;\n    cin >> type;\n\n    if(type == 1) {\n      int v, w;\n      cin >> v;\n      cin >> w;\n      v.push_back(v);\n      w.push_back(w);\n    } else if(type == 2) {\n      int x;\n      cin >> x;\n      v.erase(find(v.begin(), v.end(), x));\n      w.erase(find(w.begin(), w.end(), x));\n    } else if(type == 3) {\n      int m;\n      cin >> m;\n      vector<int> dp = dp(m);\n      ans[i] = dp[m];\n    }\n  }\n\n  for(int i = 0; i < q; i++) {\n    cout << ans[i] << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:40:9: error: request for member \u2018push_back\u2019 in \u2018v\u2019, which is of non-class type \u2018int\u2019\n   40 |       v.push_back(v);\n      |         ^~~~~~~~~\ntest.cpp:41:9: error: request for member \u2018push_back\u2019 in \u2018w\u2019, which is of non-class type \u2018int\u2019\n   41 |       w.push_back(w);\n      |         ^~~~~~~~~\ntest.cpp:50:28: error: no match for call to \u2018(std::vector<int>) (int&)\u2019\n   50 |       vector<int> dp = dp(m);\n      |                            ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/113", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nbool is_greater(int num, int base) {\n  int exp = 0;\n  while (num / base) {\n    int digit = num % base;\n    num /= base;\n    if (digit > exp) {\n      return true;\n    }\n    exp++;\n  }\n  return false;\n}\n\nint main() {\n  int n, bx, m, by;\n  cin >> n;\n  cin >> bx;\n  vector<int> x(n);\n  for (int i = 0; i < n; i++) {\n    cin >> x[i];\n  }\n\n  cin >> m;\n  cin >> by;\n  vector<int> y(m);\n  for (int i = 0; i < m; i++) {\n    cin >> y[i];\n  }\n\n  bool is_greater_x_y = is_greater(x[0] * pow(bx, n - 1) + x[1] * pow(bx, n - 2) + ... + x[n - 1], by);\n\n  if (is_greater_x_y) {\n    cout << '>';\n  } else if (x[0] * pow(bx, n - 1) + x[1] * pow(bx, n - 2) + ... + x[n - 1] == y[0] * pow(by, m - 1) + y[1] * pow(by, m - 2) + ... + y[m - 1]) {\n    cout << '=';\n  } else {\n    cout << '<';\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "6 2\n1 0 1 1 1 1\n2 10\n4 7", "output": "="}, {"input": "3 3\n1 0 2\n2 5\n2 4", "output": "<"}, {"input": "7 16\n15 15 4 0 0 7 10\n7 9\n4 8 0 3 1 5 0", "output": ">"}, {"input": "2 2\n1 0\n2 3\n1 0", "output": "<"}, {"input": "2 2\n1 0\n1 3\n1", "output": ">"}, {"input": "10 2\n1 0 1 0 1 0 1 0 1 0\n10 3\n2 2 2 2 2 2 2 2 2 2", "output": "<"}, {"input": "10 16\n15 15 4 0 0 0 0 7 10 9\n7 9\n4 8 0 3 1 5 0", "output": ">"}, {"input": "5 5\n4 4 4 4 4\n4 6\n5 5 5 5", "output": ">"}, {"input": "2 8\n1 0\n4 2\n1 0 0 0", "output": "="}, {"input": "5 2\n1 0 0 0 1\n6 8\n1 4 7 2 0 0", "output": "<"}, {"input": "6 7\n1 1 2 1 2 1\n6 6\n2 3 2 2 2 2", "output": "="}, {"input": "9 35\n34 3 20 29 27 30 2 8 5\n7 33\n17 3 22 31 1 11 6", "output": ">"}, {"input": "1 8\n5\n9 27\n23 23 23 23 23 23 23 23 23", "output": "<"}, {"input": "4 7\n3 0 6 6\n3 11\n7 10 10", "output": ">"}, {"input": "1 40\n1\n2 5\n1 0", "output": "<"}, {"input": "1 36\n35\n4 5\n2 4 4 1", "output": "<"}, {"input": "1 30\n1\n1 31\n1", "output": "="}, {"input": "1 3\n1\n1 2\n1", "output": "="}, {"input": "1 2\n1\n1 40\n1", "output": "="}, {"input": "6 29\n1 1 1 1 1 1\n10 21\n1 1 1 1 1 1 1 1 1 1", "output": "<"}, {"input": "3 5\n1 0 0\n3 3\n2 2 2", "output": "<"}, {"input": "2 8\n1 0\n2 3\n2 2", "output": "="}, {"input": "2 4\n3 3\n2 15\n1 0", "output": "="}, {"input": "2 35\n1 0\n2 6\n5 5", "output": "="}, {"input": "2 6\n5 5\n2 34\n1 0", "output": ">"}, {"input": "2 7\n1 0\n2 3\n2 2", "output": "<"}, {"input": "2 2\n1 0\n1 3\n2", "output": "="}, {"input": "2 9\n5 5\n4 3\n1 0 0 0", "output": ">"}, {"input": "1 24\n6\n3 9\n1 1 1", "output": "<"}, {"input": "5 37\n9 9 9 9 9\n6 27\n13 0 0 0 0 0", "output": "<"}, {"input": "10 2\n1 1 1 1 1 1 1 1 1 1\n10 34\n14 14 14 14 14 14 14 14 14 14", "output": "<"}, {"input": "7 26\n8 0 0 0 0 0 0\n9 9\n3 3 3 3 3 3 3 3 3", "output": ">"}, {"input": "2 40\n2 0\n5 13\n4 0 0 0 0", "output": "<"}, {"input": "1 22\n15\n10 14\n3 3 3 3 3 3 3 3 3 3", "output": "<"}, {"input": "10 22\n3 3 3 3 3 3 3 3 3 3\n3 40\n19 19 19", "output": ">"}, {"input": "2 29\n11 11\n6 26\n11 11 11 11 11 11", "output": "<"}, {"input": "5 3\n1 0 0 0 0\n4 27\n1 0 0 0", "output": "<"}, {"input": "10 3\n1 0 0 0 0 0 0 0 0 0\n8 13\n1 0 0 0 0 0 0 0", "output": "<"}, {"input": "4 20\n1 1 1 1\n5 22\n1 1 1 1 1", "output": "<"}, {"input": "10 39\n34 2 24 34 11 6 33 12 22 21\n10 36\n25 35 17 24 30 0 1 32 14 35", "output": ">"}, {"input": "10 39\n35 12 31 35 28 27 25 8 22 25\n10 40\n23 21 18 12 15 29 38 32 4 8", "output": ">"}, {"input": "10 38\n16 19 37 32 16 7 14 33 16 11\n10 39\n10 27 35 15 31 15 17 16 38 35", "output": ">"}, {"input": "10 39\n20 12 10 32 24 14 37 35 10 38\n9 40\n1 13 0 10 22 20 1 5 35", "output": ">"}, {"input": "10 40\n18 1 2 25 28 2 10 2 17 37\n10 39\n37 8 12 8 21 11 23 11 25 21", "output": "<"}, {"input": "9 39\n10 20 16 36 30 29 28 9 8\n9 38\n12 36 10 22 6 3 19 12 34", "output": "="}, {"input": "7 39\n28 16 13 25 19 23 4\n7 38\n33 8 2 19 3 21 14", "output": "="}, {"input": "10 16\n15 15 4 0 0 0 0 7 10 9\n10 9\n4 8 0 3 1 5 4 8 1 0", "output": ">"}, {"input": "7 22\n1 13 9 16 7 13 3\n4 4\n3 0 2 1", "output": ">"}, {"input": "10 29\n10 19 8 27 1 24 13 15 13 26\n2 28\n20 14", "output": ">"}, {"input": "6 16\n2 13 7 13 15 6\n10 22\n17 17 21 9 16 11 4 4 13 17", "output": "<"}, {"input": "8 26\n6 6 17 25 24 8 8 25\n4 27\n24 7 5 24", "output": ">"}, {"input": "10 23\n5 21 4 15 12 7 10 7 16 21\n4 17\n3 11 1 14", "output": ">"}, {"input": "10 21\n4 7 7 2 13 7 19 19 18 19\n3 31\n6 11 28", "output": ">"}, {"input": "1 30\n9\n7 37\n20 11 18 14 0 36 27", "output": "<"}, {"input": "5 35\n22 18 28 29 11\n2 3\n2 0", "output": ">"}, {"input": "7 29\n14 26 14 22 11 11 8\n6 28\n2 12 10 17 0 14", "output": ">"}, {"input": "2 37\n25 2\n3 26\n13 13 12", "output": "<"}, {"input": "8 8\n4 0 4 3 4 1 5 6\n8 24\n19 8 15 6 10 7 2 18", "output": "<"}, {"input": "4 22\n18 16 1 2\n10 26\n23 0 12 24 16 2 24 25 1 11", "output": "<"}, {"input": "7 31\n14 6 16 6 26 18 17\n7 24\n22 10 4 5 14 6 9", "output": ">"}, {"input": "10 29\n15 22 0 5 11 12 17 22 4 27\n4 22\n9 2 8 14", "output": ">"}, {"input": "2 10\n6 0\n10 26\n16 14 8 18 24 4 9 5 22 25", "output": "<"}, {"input": "7 2\n1 0 0 0 1 0 1\n9 6\n1 1 5 1 2 5 3 5 3", "output": "<"}, {"input": "3 9\n2 5 4\n1 19\n15", "output": ">"}, {"input": "6 16\n4 9 13 4 2 8\n4 10\n3 5 2 4", "output": ">"}, {"input": "2 12\n1 4\n8 16\n4 4 10 6 15 10 8 15", "output": "<"}, {"input": "3 19\n9 18 16\n4 10\n4 3 5 4", "output": "<"}, {"input": "7 3\n1 1 2 1 2 0 2\n2 2\n1 0", "output": ">"}, {"input": "3 2\n1 1 1\n1 3\n1", "output": ">"}, {"input": "4 4\n1 3 1 3\n9 3\n1 1 0 1 2 2 2 2 1", "output": "<"}, {"input": "9 3\n1 0 0 1 1 0 0 1 2\n6 4\n1 2 0 1 3 2", "output": ">"}, {"input": "3 5\n1 1 3\n10 4\n3 3 2 3 0 0 0 3 1 1", "output": "<"}, {"input": "6 4\n3 3 2 2 0 2\n6 5\n1 1 1 1 0 3", "output": ">"}, {"input": "6 5\n4 4 4 3 1 3\n7 6\n4 2 2 2 5 0 4", "output": "<"}, {"input": "2 5\n3 3\n6 6\n4 2 0 1 1 0", "output": "<"}, {"input": "10 6\n3 5 4 2 4 2 3 5 4 2\n10 7\n3 2 1 1 3 1 0 3 4 5", "output": "<"}, {"input": "9 7\n2 0 3 2 6 6 1 4 3\n9 6\n4 4 1 1 4 5 5 0 2", "output": ">"}, {"input": "1 7\n2\n4 8\n3 2 3 2", "output": "<"}, {"input": "2 8\n4 1\n1 7\n1", "output": ">"}, {"input": "1 10\n7\n3 9\n2 1 7", "output": "<"}, {"input": "9 9\n2 2 3 6 3 6 3 8 4\n6 10\n4 7 7 0 3 8", "output": ">"}, {"input": "3 11\n6 5 2\n8 10\n5 0 1 8 3 5 1 4", "output": "<"}, {"input": "6 11\n10 6 1 0 2 2\n9 10\n4 3 4 1 1 6 3 4 1", "output": "<"}, {"input": "2 19\n4 8\n8 18\n7 8 6 8 4 11 9 1", "output": "<"}, {"input": "2 24\n20 9\n10 23\n21 10 15 11 6 8 20 16 14 11", "output": "<"}, {"input": "8 36\n23 5 27 1 10 7 26 27\n10 35\n28 33 9 22 10 28 26 4 27 29", "output": "<"}, {"input": "6 37\n22 15 14 10 1 8\n6 36\n18 5 28 10 1 17", "output": ">"}, {"input": "5 38\n1 31 2 21 21\n9 37\n8 36 32 30 13 9 24 2 35", "output": "<"}, {"input": "3 39\n27 4 3\n8 38\n32 15 11 34 35 27 30 15", "output": "<"}, {"input": "2 40\n22 38\n5 39\n8 9 32 4 1", "output": "<"}, {"input": "9 37\n1 35 7 33 20 21 26 24 5\n10 40\n39 4 11 9 33 12 26 32 11 8", "output": "<"}, {"input": "4 39\n13 25 23 35\n6 38\n19 36 20 4 12 33", "output": "<"}, {"input": "5 37\n29 29 5 7 27\n3 39\n13 1 10", "output": ">"}, {"input": "7 28\n1 10 7 0 13 14 11\n6 38\n8 11 27 5 14 35", "output": "="}, {"input": "2 34\n1 32\n2 33\n2 0", "output": "="}, {"input": "7 5\n4 0 4 1 3 0 4\n4 35\n1 18 7 34", "output": "="}, {"input": "9 34\n5 8 4 4 26 1 30 5 24\n10 27\n1 6 3 10 8 13 22 3 12 8", "output": "="}, {"input": "10 36\n1 13 13 23 31 35 5 32 18 21\n9 38\n32 1 20 14 12 37 13 15 23", "output": "="}, {"input": "10 40\n1 1 14 5 6 3 3 11 3 25\n10 39\n1 11 24 33 25 34 38 29 27 33", "output": "="}, {"input": "9 37\n2 6 1 9 19 6 11 28 35\n9 40\n1 6 14 37 1 8 31 4 9", "output": "="}, {"input": "4 5\n1 4 2 0\n4 4\n3 2 2 3", "output": "="}, {"input": "6 4\n1 1 1 2 2 2\n7 3\n1 2 2 0 1 0 0", "output": "="}, {"input": "2 5\n3 3\n5 2\n1 0 0 1 0", "output": "="}, {"input": "1 9\n2\n1 10\n2", "output": "="}, {"input": "6 19\n4 9 14 1 3 1\n8 10\n1 1 1 7 3 7 3 0", "output": "="}, {"input": "7 15\n8 5 8 10 13 6 13\n8 13\n1 6 9 10 12 3 12 8", "output": "="}, {"input": "8 18\n1 1 4 15 7 4 9 3\n8 17\n1 10 2 10 3 11 14 10", "output": "="}, {"input": "8 21\n5 19 0 14 13 13 10 5\n10 13\n1 0 0 6 11 10 8 2 8 1", "output": "="}, {"input": "8 28\n3 1 10 19 10 14 21 15\n8 21\n14 0 18 13 2 1 18 6", "output": ">"}, {"input": "7 34\n21 22 28 16 30 4 27\n7 26\n5 13 21 10 8 12 10", "output": ">"}, {"input": "6 26\n7 6 4 18 6 1\n6 25\n5 3 11 1 8 15", "output": ">"}, {"input": "10 31\n6 27 17 22 14 16 25 9 13 26\n10 39\n6 1 3 26 12 32 28 19 9 19", "output": "<"}, {"input": "3 5\n2 2 3\n3 6\n4 3 5", "output": "<"}, {"input": "2 24\n4 18\n2 40\n29 24", "output": "<"}, {"input": "5 38\n2 24 34 14 17\n8 34\n4 24 31 2 14 15 8 15", "output": "<"}, {"input": "9 40\n39 39 39 39 39 39 39 39 39\n6 35\n34 34 34 34 34 34", "output": ">"}, {"input": "10 40\n39 39 39 39 39 39 39 39 39 39\n10 8\n7 7 7 7 7 7 7 7 7 7", "output": ">"}, {"input": "10 40\n39 39 39 39 39 39 39 39 39 39\n10 39\n38 38 38 38 38 38 38 38 38 38", "output": ">"}], "language": "cpp"}, "prompt": "A. Two Bases\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nAfter seeing the \"ALL YOUR BASE ARE BELONG TO US\" meme for the first time, numbers X and Y realised that they have different bases, which complicated their relations.\nYou're given a number X represented in base bx and a number Y represented in base by. Compare those two numbers.\nInput\nThe first line of the input contains two space-separated integers n and bx (1 <= n <= 10, 2 <= bx <= 40), where n is the number of digits in the bx-based representation of X.\nThe second line contains n space-separated integers x1, x2, ..., xn (0 <= xi < bx) - the digits of X. They are given in the order from the most significant digit to the least significant one.\nThe following two lines describe Y in the same way: the third line contains two space-separated integers m and by (1 <= m <= 10, 2 <= by <= 40, bx != by), where m is the number of digits in the by-based representation of Y, and the fourth line contains m space-separated integers y1, y2, ..., ym (0 <= yi < by) - the digits of Y.\nThere will be no leading zeroes. Both X and Y will be positive. All digits of both numbers are given in the standard decimal numeral system.\nOutput\nOutput a single character (quotes for clarity):\n'<' if X < Y\n'>' if X > Y\n'=' if X = Y\n", "generation": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nbool is_greater(int num, int base) {\n  int exp = 0;\n  while (num / base) {\n    int digit = num % base;\n    num /= base;\n    if (digit > exp) {\n      return true;\n    }\n    exp++;\n  }\n  return false;\n}\n\nint main() {\n  int n, bx, m, by;\n  cin >> n;\n  cin >> bx;\n  vector<int> x(n);\n  for (int i = 0; i < n; i++) {\n    cin >> x[i];\n  }\n\n  cin >> m;\n  cin >> by;\n  vector<int> y(m);\n  for (int i = 0; i < m; i++) {\n    cin >> y[i];\n  }\n\n  bool is_greater_x_y = is_greater(x[0] * pow(bx, n - 1) + x[1] * pow(bx, n - 2) + ... + x[n - 1], by);\n\n  if (is_greater_x_y) {\n    cout << '>';\n  } else if (x[0] * pow(bx, n - 1) + x[1] * pow(bx, n - 2) + ... + x[n - 1] == y[0] * pow(by, m - 1) + y[1] * pow(by, m - 2) + ... + y[m - 1]) {\n    cout << '=';\n  } else {\n    cout << '<';\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:23:3: error: \u2018vector\u2019 was not declared in this scope\n   23 |   vector<int> x(n);\n      |   ^~~~~~\ntest.cpp:3:1: note: \u2018std::vector\u2019 is defined in header \u2018<vector>\u2019; did you forget to \u2018#include <vector>\u2019?\n    2 | #include <algorithm>\n  +++ |+#include <vector>\n    3 | \ntest.cpp:23:10: error: expected primary-expression before \u2018int\u2019\n   23 |   vector<int> x(n);\n      |          ^~~\ntest.cpp:25:12: error: \u2018x\u2019 was not declared in this scope\n   25 |     cin >> x[i];\n      |            ^\ntest.cpp:30:10: error: expected primary-expression before \u2018int\u2019\n   30 |   vector<int> y(m);\n      |          ^~~\ntest.cpp:32:12: error: \u2018y\u2019 was not declared in this scope\n   32 |     cin >> y[i];\n      |            ^\ntest.cpp:35:36: error: \u2018x\u2019 was not declared in this scope\n   35 |   bool is_greater_x_y = is_greater(x[0] * pow(bx, n - 1) + x[1] * pow(bx, n - 2) + ... + x[n - 1], by);\n      |                                    ^\ntest.cpp:35:43: error: \u2018pow\u2019 was not declared in this scope\n   35 |   bool is_greater_x_y = is_greater(x[0] * pow(bx, n - 1) + x[1] * pow(bx, n - 2) + ... + x[n - 1], by);\n      |                                           ^~~\ntest.cpp:39:59: error: expected \u2018)\u2019 before \u2018+\u2019 token\n   39 |   } else if (x[0] * pow(bx, n - 1) + x[1] * pow(bx, n - 2) + ... + x[n - 1] == y[0] * pow(by, m - 1) + y[1] * pow(by, m - 2) + ... + y[m - 1]) {\n      |             ~                                             ^~\n      |                                                           )\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/115", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> calculateLipschitzConstant(vector<int> &h) {\n  vector<int> k(h.size());\n  k[0] = 0;\n  for(int i = 1; i < h.size(); i++) {\n    k[i] = k[i-1] + 1;\n    for(int j = 0; j < i; j++) {\n      if(abs(h[i] - h[j]) <= k[i] - k[j]) {\n        k[i] = min(k[i], k[j] + 1);\n      }\n    }\n  }\n  return k;\n}\n\nint main() {\n  int n, q;\n  cin >> n;\n  cin >> q;\n\n  vector<int> h(n);\n  cin >> h;\n\n  vector<int> k = calculateLipschitzConstant(h);\n\n  for(int i = 0; i < q; i++) {\n    int l, r;\n    cin >> l;\n    cin >> r;\n    cout << k[r] - k[l-1] << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "10 4\n1 5 2 9 1 3 4 2 1 7\n2 4\n3 8\n7 10\n1 9", "output": "17\n82\n23\n210"}, {"input": "7 6\n5 7 7 4 6 6 2\n1 2\n2 3\n2 6\n1 7\n4 7\n3 5", "output": "2\n0\n22\n59\n16\n8"}, {"input": "2 2\n0 0\n1 2\n1 2", "output": "0\n0"}, {"input": "2 2\n0 100000000\n1 2\n1 2", "output": "100000000\n100000000"}, {"input": "4 6\n1 2 3 2\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4", "output": "1\n3\n6\n1\n3\n1"}, {"input": "3 6\n10 20 30\n1 2\n1 3\n2 3\n1 2\n2 3\n1 3", "output": "10\n30\n10\n10\n10\n30"}, {"input": "3 6\n48261735 26888803 75904937\n1 2\n1 3\n2 3\n1 2\n2 3\n1 3", "output": "21372932\n119405200\n49016134\n21372932\n49016134\n119405200"}, {"input": "3 6\n100000000 99999999 0\n1 2\n1 3\n2 3\n1 2\n2 3\n1 3", "output": "1\n199999999\n99999999\n1\n99999999\n199999999"}, {"input": "100000 100\noutput": "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"}, {"input": "2 2\n100000000 0\n1 2\n1 2", "output": "100000000\n100000000"}], "language": "cpp"}, "prompt": "D. Lipshitz Sequence\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nA function  is called Lipschitz continuous if there is a real constant K such that the inequality |f(x) - f(y)| <= K.|x - y| holds for all . We'll deal with a more... discrete version of this term.\nFor an array , we define it's Lipschitz constant  as follows:\nif n < 2,\nif n >= 2,  over all 1 <= i < j <= n\nIn other words,  is the smallest non-negative integer such that |h[i] - h[j]| <= L.|i - j| holds for all 1 <= i, j <= n.\nYou are given an array  of size n and q queries of the form [l, r]. For each query, consider the subarray ; determine the sum of Lipschitz constants of all subarrays of .\nInput\nThe first line of the input contains two space-separated integers n and q (2 <= n <= 100 000 and 1 <= q <= 100) - the number of elements in array  and the number of queries respectively.\nThe second line contains n space-separated integers  ().\nThe following q lines describe queries. The i-th of those lines contains two space-separated integers li and ri (1 <= li < ri <= n).\nOutput\nPrint the answers to all queries in the order in which they are given in the input. For the i-th query, print one line containing a single integer - the sum of Lipschitz constants of all subarrays of .\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> calculateLipschitzConstant(vector<int> &h) {\n  vector<int> k(h.size());\n  k[0] = 0;\n  for(int i = 1; i < h.size(); i++) {\n    k[i] = k[i-1] + 1;\n    for(int j = 0; j < i; j++) {\n      if(abs(h[i] - h[j]) <= k[i] - k[j]) {\n        k[i] = min(k[i], k[j] + 1);\n      }\n    }\n  }\n  return k;\n}\n\nint main() {\n  int n, q;\n  cin >> n;\n  cin >> q;\n\n  vector<int> h(n);\n  cin >> h;\n\n  vector<int> k = calculateLipschitzConstant(h);\n\n  for(int i = 0; i < q; i++) {\n    int l, r;\n    cin >> l;\n    cin >> r;\n    cout << k[r] - k[l-1] << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:26:7: error: no match for \u2018operator>>\u2019 (operand types are \u2018std::istream\u2019 {aka \u2018std::basic_istream<char>\u2019} and \u2018std::vector<int>\u2019)\n   26 |   cin >> h;\n      |   ~~~ ^~ ~\n      |   |      |\n      |   |      std::vector<int>\n      |   std::istream {aka std::basic_istream<char>}\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:120:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__istream_type& (*)(std::basic_istream<_CharT, _Traits>::__istream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:120:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__istream_type& (*)(std::basic_istream<char>::__istream_type&)\u2019 {aka \u2018std::basic_istream<char>& (*)(std::basic_istream<char>&)\u2019}\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:124:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__ios_type& (*)(std::basic_istream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>; std::basic_istream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]\u2019\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:124:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__ios_type& (*)(std::basic_istream<char>::__ios_type&)\u2019 {aka \u2018std::basic_ios<char>& (*)(std::basic_ios<char>&)\u2019}\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:131:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:131:30: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::ios_base& (*)(std::ios_base&)\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |                  ~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:168:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(bool&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  168 |       operator>>(bool& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:168:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018bool&\u2019\n  168 |       operator>>(bool& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:172:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(short int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  172 |       operator>>(short& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:172:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short int&\u2019\n  172 |       operator>>(short& __n);\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:175:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(short unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  175 |       operator>>(unsigned short& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:175:34: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short unsigned int&\u2019\n  175 |       operator>>(unsigned short& __n)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:179:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  179 |       operator>>(int& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:179:23: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018int&\u2019\n  179 |       operator>>(int& __n);\n      |                  ~~~~~^~~\n/usr/include/c++/9/istream:182:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  182 |       operator>>(unsigned int& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:182:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018unsigned int&\u2019\n  182 |       operator>>(unsigned int& __n)\n      |                  ~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:186:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  186 |       operator>>(long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:186:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long int&\u2019\n  186 |       operator>>(long& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:190:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  190 |       operator>>(unsigned long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:190:33: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long unsigned int&\u2019\n  190 |       operator>>(unsigned long& __n)\n      |                  ~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:195:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  195 |       operator>>(long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:195:29: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long int&\u2019\n  195 |       operator>>(long long& __n)\n      |                  ~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:199:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:199:38: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long unsigned int&\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |                  ~~~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:214:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(float&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  214 |       operator>>(float& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:214:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018float&\u2019\n  214 |       operator>>(float& __f)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:218:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  218 |       operator>>(double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:218:26: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018double&\u2019\n  218 |       operator>>(double& __f)\n      |                  ~~~~~~~~^~~\n/usr/include/c++/9/istream:222:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  222 |       operator>>(long double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:222:31: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long double&\u2019\n  222 |       operator>>(long double& __f)\n      |                  ~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:235:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(void*&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  235 |       operator>>(void*& __p)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:235:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018void*&\u2019\n  235 |       operator>>(void*& __p)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:259:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]\u2019\n  259 |       operator>>(__streambuf_type* __sb);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:259:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__streambuf_type*\u2019 {aka \u2018std::basic_streambuf<char>*\u2019}\n  259 |       operator>>(__streambuf_type* __sb);\n      |                  ~~~~~~~~~~~~~~~~~~^~~~\nIn file included from /usr/include/c++/9/string:56,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/ostream:38,\n                 from /usr/include/c++/9/iostream:39,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 1466 |     operator>>(basic_istream<_CharT, _Traits>& __in,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note:   template argument deduction/substitution failed:\ntest.cpp:26:10: note:   \u2018std::vector<int>\u2019 is not derived from \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\n   26 |   cin >> h;\n      |          ^\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:931:5: note: candidate: \u2018template<class _CharT, class _Traits> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT&)\u2019\n  931 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:931:5: note:   template argument deduction/substitution failed:\ntest.cpp:26:10: note:   deduced conflicting types for parameter \u2018_CharT\u2019 (\u2018char\u2019 and \u2018std::vector<int>\u2019)\n   26 |   cin >> h;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:756:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char&)\u2019\n  756 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:756:5: note:   template argument deduction/substitution failed:\ntest.cpp:26:10: note:   cannot convert \u2018h\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char&\u2019\n   26 |   cin >> h;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:761:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char&)\u2019\n  761 |     operator>>(basic_istream<char, _Traits>& __in, signed char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:761:5: note:   template argument deduction/substitution failed:\ntest.cpp:26:10: note:   cannot convert \u2018h\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char&\u2019\n   26 |   cin >> h;\n      |          ^\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:963:5: note: candidate: \u2018template<class _CharT2, class _Traits2> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT2*)\u2019\n  963 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:963:5: note:   template argument deduction/substitution failed:\ntest.cpp:26:10: note:   mismatched types \u2018_CharT2*\u2019 and \u2018std::vector<int>\u2019\n   26 |   cin >> h;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:803:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char*)\u2019\n  803 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:803:5: note:   template argument deduction/substitution failed:\ntest.cpp:26:10: note:   cannot convert \u2018h\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char*\u2019\n   26 |   cin >> h;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:808:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char*)\u2019\n  808 |     operator>>(basic_istream<char, _Traits>& __in, signed char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:808:5: note:   template argument deduction/substitution failed:\ntest.cpp:26:10: note:   cannot convert \u2018h\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char*\u2019\n   26 |   cin >> h;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:980:5: note: candidate: \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&)\u2019\n  980 |     operator>>(_Istream&& __is, _Tp&& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:980:5: note:   template argument deduction/substitution failed:\n/usr/include/c++/9/istream: In substitution of \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&) [with _Istream = std::basic_istream<char>&; _Tp = std::vector<int>&]\u2019:\ntest.cpp:26:10:   required from here\n/usr/include/c++/9/istream:980:5: error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false, std::basic_istream<char>&>\u2019\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/119", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nlong long mod = 109 + 7;\n\nlong long func(long long n, long long k) {\n  return (n - 1) * k + 1;\n}\n\nint main() {\n  long long p, k;\n  cin >> p;\n  cin >> k;\n\n  long long ans = func(p, k);\n  cout << ans % mod;\n\n  return 0;\n}\n", "testcases": [{"input": "3 2", "output": "3"}, {"input": "5 4", "output": "25"}, {"input": "7 2", "output": "49"}, {"input": "7 6", "output": "343"}, {"input": "10007 25", "output": "100140049"}, {"input": "40037 4", "output": "602961362"}, {"input": "5 0", "output": "625"}, {"input": "5 3", "output": "5"}, {"input": "7 1", "output": "823543"}, {"input": "13 5", "output": "2197"}, {"input": "13 4", "output": "169"}, {"input": "5 2", "output": "5"}, {"input": "11 1", "output": "311668616"}, {"input": "11 10", "output": "161051"}, {"input": "6907 2590", "output": "543643888"}, {"input": "3229 153", "output": "552691282"}, {"input": "727 282", "output": "471521101"}, {"input": "7621 6195", "output": "501036626"}, {"input": "4649 4648", "output": "460009811"}, {"input": "5527 1711", "output": "837297007"}, {"input": "1901 633", "output": "557576188"}, {"input": "463 408", "output": "853558215"}, {"input": "6871 5566", "output": "742783884"}, {"input": "4177 556", "output": "594173514"}, {"input": "65213 29960", "output": "65213"}, {"input": "375103 52131", "output": "947042280"}, {"input": "990037 453792", "output": "654009570"}, {"input": "95531 94787", "output": "95531"}, {"input": "498653 116674", "output": "625264514"}, {"input": "561389 213181", "output": "10668315"}, {"input": "649849 339573", "output": "649849"}, {"input": "512287 359783", "output": "542484357"}, {"input": "337411 146419", "output": "532279245"}, {"input": "717887 1", "output": "559281518"}, {"input": "586189 189159", "output": "168174057"}, {"input": "613463 269592", "output": "336849737"}, {"input": "873781 51595", "output": "226847774"}, {"input": "203317 12108", "output": "374893480"}, {"input": "51419 21829", "output": "643913547"}, {"input": "115237 90311", "output": "355904974"}, {"input": "437071 24705", "output": "743969711"}, {"input": "278917 84398", "output": "727771018"}, {"input": "40867 37466", "output": "560078799"}, {"input": "274783 98997", "output": "505696564"}, {"input": "450431 344107", "output": "450431"}, {"input": "288179 113623", "output": "124681010"}, {"input": "807689 9869", "output": "636680820"}, {"input": "69833 569", "output": "69833"}, {"input": "805711 702149", "output": "759894252"}, {"input": "999983 999982", "output": "794678399"}, {"input": "999983 0", "output": "416606930"}, {"input": "999983 1", "output": "844765997"}, {"input": "823457 2", "output": "203355139"}, {"input": "999983 239239", "output": "965993296"}], "language": "cpp"}, "prompt": "B. Moodular Arithmetic\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nAs behooves any intelligent schoolboy, Kevin Sun is studying psycowlogy, cowculus, and cryptcowgraphy at the Bovinia State University (BGU) under Farmer Ivan. During his Mathematics of Olympiads (MoO) class, Kevin was confronted with a weird functional equation and needs your help. For two fixed integers k and p, where p is an odd prime number, the functional equation states that\nfor some function . (This equation should hold for any integer x in the range 0 to p - 1, inclusive.)\nIt turns out that f can actually be many different functions. Instead of finding a solution, Kevin wants you to count the number of distinct functions f that satisfy this equation. Since the answer may be very large, you should print your result modulo 109 + 7.\nInput\nThe input consists of two space-separated integers p and k (3 <= p <= 1 000 000, 0 <= k <= p - 1) on a single line. It is guaranteed that p is an odd prime number.\nOutput\nPrint a single integer, the number of distinct functions f modulo 109 + 7.\n", "generation": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nlong long mod = 109 + 7;\n\nlong long func(long long n, long long k) {\n  return (n - 1) * k + 1;\n}\n\nint main() {\n  long long p, k;\n  cin >> p;\n  cin >> k;\n\n  long long ans = func(p, k);\n  cout << ans % mod;\n\n  return 0;\n}\n", "result": "failed: wrong answer @ testcase 1", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/120", "completion_id": 0, "test_suite": {"code": "int longestAlternatingSubsequence(string& s) {\n  int n = s.length();\n  vector<int> dp(n, 0);\n  vector<int> prev(n, 0);\n  prev[0] = 1;\n  dp[0] = 1;\n  for(int i = 1; i < n; i++) {\n    if(s[i] == s[i-1]) {\n      prev[i] = prev[i-1] + 1;\n    } else {\n      prev[i] = dp[i-1] + 1;\n    }\n    dp[i] = max(dp[i], prev[i]);\n  }\n  return dp[n-1];\n}\n", "testcases": [{"input": "8\n10000011", "output": "5"}, {"input": "2\n01", "output": "2"}, {"input": "5\n10101", "output": "5"}, {"input": "75\n010101010101010101010101010101010101010101010101010101010101010101010101010", "output": "75"}, {"input": "11\n00000000000", "output": "3"}, {"input": "56\n10101011010101010101010101010101010101011010101010101010", "output": "56"}, {"input": "50\n01011010110101010101010101010101010101010101010100", "output": "49"}, {"input": "7\n0110100", "output": "7"}, {"input": "8\n11011111", "output": "5"}, {"input": "6\n000000", "output": "3"}, {"input": "5\n01000", "output": "5"}, {"input": "59\n10101010101010101010101010101010101010101010101010101010101", "output": "59"}, {"input": "88\n1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010", "output": "88"}, {"input": "93\n010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010", "output": "93"}, {"input": "70\n0101010101010101010101010101010101010101010101010101010101010101010101", "output": "70"}, {"input": "78\n010101010101010101010101010101101010101010101010101010101010101010101010101010", "output": "78"}, {"input": "83\n10101010101010101010101010101010101010101010101010110101010101010101010101010101010", "output": "83"}, {"input": "87\n101010101010101010101010101010101010101010101010101010101010101010101010101010010101010", "output": "87"}, {"input": "65\n01010101101010101010101010101010101010101010101010101010101010101", "output": "65"}, {"input": "69\n010101010101010101101010101010101010101010101010101010101010101010101", "output": "69"}, {"input": "74\n01010101010101010101010101010101010101010101010101010101010101000101010101", "output": "74"}, {"input": "77\n01010101010101001010101010101010100101010101010101010101010101010101010101010", "output": "77"}, {"input": "60\n101010110101010101010101010110101010101010101010101010101010", "output": "60"}, {"input": "89\n01010101010101010101010101010101010101010101010101010101101010101010101010100101010101010", "output": "89"}, {"input": "68\n01010101010101010101010101010101010100101010100101010101010100101010", "output": "67"}, {"input": "73\n0101010101010101010101010101010101010101010111011010101010101010101010101", "output": "72"}, {"input": "55\n1010101010101010010101010101101010101010101010100101010", "output": "54"}, {"input": "85\n1010101010101010101010101010010101010101010101101010101010101010101011010101010101010", "output": "84"}, {"input": "1\n0", "output": "1"}, {"input": "1\n1", "output": "1"}, {"input": "10\n1111111111", "output": "3"}, {"input": "2\n10", "output": "2"}, {"input": "2\n11", "output": "2"}, {"input": "2\n00", "output": "2"}, {"input": "3\n000", "output": "3"}, {"input": "3\n001", "output": "3"}, {"input": "3\n010", "output": "3"}, {"input": "3\n011", "output": "3"}, {"input": "3\n100", "output": "3"}, {"input": "3\n101", "output": "3"}, {"input": "3\n110", "output": "3"}, {"input": "3\n111", "output": "3"}, {"input": "4\n0000", "output": "3"}, {"input": "4\n0001", "output": "4"}, {"input": "4\n0010", "output": "4"}, {"input": "4\n0011", "output": "4"}, {"input": "4\n0100", "output": "4"}, {"input": "4\n0101", "output": "4"}, {"input": "4\n0110", "output": "4"}, {"input": "4\n0111", "output": "4"}, {"input": "4\n1000", "output": "4"}, {"input": "4\n1001", "output": "4"}, {"input": "4\n1010", "output": "4"}, {"input": "4\n1011", "output": "4"}, {"input": "4\n1100", "output": "4"}, {"input": "4\n1101", "output": "4"}, {"input": "4\n1110", "output": "4"}, {"input": "4\n1111", "output": "3"}, {"input": "5\n00000", "output": "3"}, {"input": "5\n00001", "output": "4"}, {"input": "5\n00010", "output": "5"}, {"input": "5\n00011", "output": "4"}, {"input": "5\n00100", "output": "5"}, {"input": "5\n00101", "output": "5"}, {"input": "5\n00110", "output": "5"}, {"input": "5\n00111", "output": "4"}, {"input": "5\n01000", "output": "5"}, {"input": "5\n01001", "output": "5"}, {"input": "5\n01010", "output": "5"}, {"input": "5\n01011", "output": "5"}, {"input": "5\n01100", "output": "5"}, {"input": "5\n01101", "output": "5"}, {"input": "5\n01110", "output": "5"}, {"input": "5\n01111", "output": "4"}, {"input": "5\n10000", "output": "4"}, {"input": "5\n10001", "output": "5"}, {"input": "5\n10010", "output": "5"}, {"input": "5\n10100", "output": "5"}, {"input": "5\n10101", "output": "5"}, {"input": "5\n10110", "output": "5"}, {"input": "5\n10111", "output": "5"}, {"input": "5\n11000", "output": "4"}, {"input": "5\n11001", "output": "5"}, {"input": "5\n11010", "output": "5"}, {"input": "5\n11011", "output": "5"}, {"input": "5\n11100", "output": "4"}, {"input": "5\n11101", "output": "5"}, {"input": "5\n11110", "output": "4"}, {"input": "5\n11111", "output": "3"}], "language": "cpp"}, "prompt": "A. Alternative Thinking\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nKevin has just recevied his disappointing results on the USA Identification of Cows Olympiad (USAICO) in the form of a binary string of length n. Each character of Kevin's string represents Kevin's score on one of the n questions of the olympiad-'1' for a correctly identified cow and '0' otherwise.\nHowever, all is not lost. Kevin is a big proponent of alternative thinking and believes that his score, instead of being the sum of his points, should be the length of the longest alternating subsequence of his string. Here, we define an alternating subsequence of a string as a not-necessarily contiguous subsequence where no two consecutive elements are equal. For example, {0, 1, 0, 1}, {1, 0, 1}, and {1, 0, 1, 0} are alternating sequences, while {1, 0, 0} and {0, 1, 0, 1, 1} are not.\nKevin, being the sneaky little puffball that he is, is willing to hack into the USAICO databases to improve his score. In order to be subtle, he decides that he will flip exactly one substring-that is, take a contiguous non-empty substring of his score and change all '0's in that substring to '1's and vice versa. After such an operation, Kevin wants to know the length of the longest possible alternating subsequence that his string could have.\nInput\nThe first line contains the number of questions on the olympiad n (1 <= n <= 100 000).\nThe following line contains a binary string of length n representing Kevin's results on the USAICO.\nOutput\nOutput a single integer, the length of the longest possible alternating subsequence that Kevin can create in his string after flipping a single substring.\n", "generation": "int longestAlternatingSubsequence(string& s) {\n  int n = s.length();\n  vector<int> dp(n, 0);\n  vector<int> prev(n, 0);\n  prev[0] = 1;\n  dp[0] = 1;\n  for(int i = 1; i < n; i++) {\n    if(s[i] == s[i-1]) {\n      prev[i] = prev[i-1] + 1;\n    } else {\n      prev[i] = dp[i-1] + 1;\n    }\n    dp[i] = max(dp[i], prev[i]);\n  }\n  return dp[n-1];\n}\n", "result": "failed: compilation error: test.cpp:1:35: error: \u2018string\u2019 was not declared in this scope\n    1 | int longestAlternatingSubsequence(string& s) {\n      |                                   ^~~~~~\ntest.cpp:1:43: error: \u2018s\u2019 was not declared in this scope\n    1 | int longestAlternatingSubsequence(string& s) {\n      |                                           ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/121", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool isSunny(vector<int> &a, vector<int> &b) {\n  vector<int> c(a.size(), 0);\n  for (int i = 0; i < b.size(); i++) {\n    c[a[i]]++;\n  }\n  for (int i = 0; i < a.size(); i++) {\n    if (c[a[i]] % 2 == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nint main() {\n  int n, m;\n  cin >> n;\n  cin >> m;\n\n  vector<int> a(m);\n  vector<int> b(m);\n  vector<int> c(m);\n\n  for (int i = 0; i < m; i++) {\n    cin >> a[i];\n    cin >> b[i];\n    cin >> c[i];\n  }\n\n  vector<int> d(n, -1);\n  d[0] = 0;\n\n  for (int i = 0; i < m; i++) {\n    if (isSunny(a, b) && d[a[i]] == -1) {\n      d[a[i]] = c[i];\n    }\n  }\n\n  for (int i = 0; i < n; i++) {\n    if (d[i] == -1) {\n      cout << -1 << endl;\n    } else {\n      cout << d[i] << endl;\n    }\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "4 4\n1 3 4\n2 4 8\n1 2 2\n3 4 3", "output": "-1\n8\n8\n3"}, {"input": "3 2\n1 2 3\n2 3 4", "output": "-1\n-1"}, {"input": "4 10\n2 1 987\n3 2 829\n4 1 768\n4 2 608\n3 4 593\n3 2 488\n4 2 334\n2 1 204\n1 3 114\n1 4 39", "output": "-1\n-1\n829\n829\n768\n768\n768\n488\n334\n204"}, {"input": "2 8\n2 1 979\n2 1 734\n1 2 145\n1 2 491\n1 2 928\n2 1 20\n2 1 136\n2 1 398", "output": "979\n734\n145\n145\n145\n20\n20\n20"}, {"input": "2 6\n2 1 607\n2 1 794\n1 2 169\n2 1 264\n2 1 865\n2 1 740", "output": "607\n607\n169\n169\n169\n169"}, {"input": "2 10\n2 1 861\n2 1 168\n1 2 506\n1 2 448\n2 1 45\n1 2 659\n1 2 922\n1 2 943\n1 2 222\n1 2 68", "output": "861\n168\n168\n168\n45\n45\n45\n45\n45\n45"}, {"input": "2 5\n1 2 114\n2 1 474\n1 2 273\n1 2 35\n2 1 466", "output": "114\n114\n114\n35\n35"}, {"input": "2 10\n2 1 999999002\n2 1 859\n1 2 714\n1 2 641\n2 1 555\n2 1 407\n1 2 386\n2 1 289\n2 1 121\n1 2 9", "output": "999999002\n859\n714\n641\n555\n407\n386\n289\n121\n9"}, {"input": "2 10\n2 1 999999237\n1 2 809\n2 1 722\n2 1 686\n1 2 534\n2 1 441\n2 1 386\n2 1 277\n2 1 103\n2 1 68", "output": "999999237\n809\n722\n686\n534\n441\n386\n277\n103\n68"}, {"input": "4 7\n2 1 740\n4 3 789\n1 4 379\n2 4 599\n1 2 230\n3 2 143\n1 3 290", "output": "-1\n789\n789\n789\n789\n379\n379"}, {"input": "4 10\n4 3 600\n3 2 871\n3 1 325\n4 2 636\n4 1 645\n2 4 433\n4 3 836\n4 2 575\n4 1 757\n1 2 902", "output": "-1\n-1\n871\n636\n636\n433\n433\n433\n433\n433"}, {"input": "4 10\n3 2 178\n3 1 459\n1 4 775\n3 2 286\n1 3 832\n2 4 814\n4 2 859\n3 1 937\n2 3 751\n1 2 915", "output": "-1\n-1\n775\n775\n775\n775\n775\n775\n775\n775"}, {"input": "4 10\n2 1 999999641\n3 2 999999249\n4 1 999999745\n2 1 640\n1 4 559\n1 2 490\n1 3 353\n3 2 242\n4 3 180\n3 4 40", "output": "-1\n-1\n999999745\n999999745\n999999249\n999999249\n559\n559\n353\n353"}, {"input": "6 81\n6 2 750\n4 3 570\n3 2 754\n2 1 570\n1 5 420\n4 3 839\n5 6 290\n6 2 865\n4 2 223\n6 5 306\n6 1 263\n4 6 591\n4 2 4\n5 4 112\n4 5 701\n6 5 239\n2 5 251\n2 4 184\n1 5 481\n6 4 522\n6 5 806\n5 3 8\n2 3 702\n4 2 954\n1 3 959\n3 2 970\n1 3 434\n1 4 230\n1 4 170\n2 3 741\n4 5 25\n4 6 755\n6 2 557\n6 4 942\n2 1 926\n6 4 7\n5 3 249\n4 2 916\n1 5 934\n2 3 270\n6 2 199\n6 1 134\n4 3 33\n2 3 314\n5 3 36\n2 3 697\n1 3 107\n5 4 827\n3 1 858\n2 6 345\n1 5 816\n4 6 885\n4 5 317\n4 3 133\n2 1 350\n4 5 806\n4 2 395\n5...", "output": "-1\n-1\n-1\n-1\n750\n750\n570\n570\n570\n570\n570\n570\n570\n570\n570\n570\n570\n570\n570\n570\n570\n263\n263\n263\n263\n263\n263\n239\n239\n239\n239\n239\n239\n239\n239\n170\n170\n170\n170\n170\n170\n134\n134\n134\n134\n134\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107\n107"}, {"input": "8 97\n7 4 3\n5 7 558\n3 2 317\n7 3 54\n2 6 177\n6 8 66\n2 7 769\n3 2 31\n1 8 294\n5 1 73\n3 4 333\n6 5 636\n6 1 720\n1 2 195\n7 3 456\n3 7 934\n3 7 305\n7 4 855\n2 5 924\n1 2 218\n2 6 653\n5 2 483\n5 1 401\n8 3 799\n7 6 607\n2 1 505\n1 5 80\n4 8 624\n6 5 79\n2 6 184\n1 2 779\n3 7 377\n6 2 811\n4 5 993\n5 3 777\n5 2 499\n1 4 375\n5 6 888\n2 4 221\n7 2 483\n8 6 466\n5 2 146\n3 5 853\n6 2 270\n7 5 234\n2 8 715\n6 5 631\n4 6 747\n4 1 697\n6 8 655\n3 4 84\n4 7 199\n1 2 192\n2 3 693\n4 6 676\n8 7 629\n8 7 374\n5...", "output": "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n558\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73\n73"}, {"input": "10 61\n3 1 361\n6 4 546\n8 1 633\n7 2 540\n7 1 465\n5 2 537\n4 6 413\n2 4 794\n8 1 656\n3 5 660\n5 3 445\n9 2 578\n7 8 835\n6 10 279\n2 7 937\n3 4 535\n4 9 481\n2 6 86\n3 1 907\n7 8 7\n3 4 500\n7 10 916\n9 5 949\n5 8 362\n2 5 520\n3 6 497\n10 1 989\n7 6 254\n2 1 133\n2 8 720\n10 5 983\n4 2 574\n8 4 688\n4 6 283\n5 4 901\n7 4 382\n10 3 704\n2 1 827\n10 4 397\n5 2 699\n6 2 422\n1 3 481\n10 4 220\n7 3 40\n4 8 833\n3 1 897\n7 1 127\n3 8 874\n10 4 588\n9 1 930\n4 3 989\n1 2 625\n4 3 100\n4 9 510\n5 3 555\n7 6 9...", "output": "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n794\n794\n633\n633\n633\n633\n535\n500\n500\n500\n500\n500\n497\n497\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481\n481"}], "language": "cpp"}, "prompt": "E. Pastoral Oddities\ntime limit per test\n4 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nIn the land of Bovinia there are n pastures, but no paths connecting the pastures. Of course, this is a terrible situation, so Kevin Sun is planning to rectify it by constructing m undirected paths connecting pairs of distinct pastures. To make transportation more efficient, he also plans to pave some of these new paths.\nKevin is very particular about certain aspects of path-paving. Since he loves odd numbers, he wants each pasture to have an odd number of paved paths connected to it. Thus we call a paving sunny if each pasture is incident to an odd number of paved paths. He also enjoys short paths more than long paths, so he would like the longest paved path to be as short as possible. After adding each path, Kevin wants to know if a sunny paving exists for the paths of Bovinia, and if at least one does, the minimum possible length of the longest path in such a paving. Note that \"longest path\" here means maximum-weight edge.\nInput\nThe first line contains two integers n (2 <= n <= 100 000) and m (1 <= m <= 300 000), denoting the number of pastures and paths, respectively. The next m lines each contain three integers ai, bi and li, describing the i-th path. The i-th path connects pastures ai and bi (1 <= ai, bi <= n; ai != bi) and has length li (1 <= li <= 109). Paths are given in the order in which they are constructed.\nOutput\nOutput m lines. The i-th line should contain a single integer denoting the minimum possible length of the longest path (maximum-weight edge) in a sunny paving using only the first i paths. If Kevin cannot pave a set of paths so that each pasture is incident to an odd number of paved paths, output  - 1.\nNote that the paving is only hypothetical-your answer after adding the i-th path should not be affected by any of your previous answers.\n", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool isSunny(vector<int> &a, vector<int> &b) {\n  vector<int> c(a.size(), 0);\n  for (int i = 0; i < b.size(); i++) {\n    c[a[i]]++;\n  }\n  for (int i = 0; i < a.size(); i++) {\n    if (c[a[i]] % 2 == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nint main() {\n  int n, m;\n  cin >> n;\n  cin >> m;\n\n  vector<int> a(m);\n  vector<int> b(m);\n  vector<int> c(m);\n\n  for (int i = 0; i < m; i++) {\n    cin >> a[i];\n    cin >> b[i];\n    cin >> c[i];\n  }\n\n  vector<int> d(n, -1);\n  d[0] = 0;\n\n  for (int i = 0; i < m; i++) {\n    if (isSunny(a, b) && d[a[i]] == -1) {\n      d[a[i]] = c[i];\n    }\n  }\n\n  for (int i = 0; i < n; i++) {\n    if (d[i] == -1) {\n      cout << -1 << endl;\n    } else {\n      cout << d[i] << endl;\n    }\n  }\n\n  return 0;\n}\n", "result": "failed: wrong answer @ testcase 1", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/122", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main()\n{\n    int m1, m2, m3, m4, m5, w1, w2, w3, w4, w5, hs, hu;\n    cin >> m1 >> m2 >> m3 >> m4 >> m5 >> w1 >> w2 >> w3 >> w4 >> w5 >> hs >> hu;\n\n    int x1 = 500, x2 = 1000, x3 = 1500, x4 = 2000, x5 = 2500;\n    int score = x1 * (m1 - w1) + x2 * (m2 - w2) + x3 * (m3 - w3) + x4 * (m4 - w4) + x5 * (m5 - w5) + 100 * hs - 50 * hu;\n\n    cout << score;\n\n    return 0;\n}\n", "testcases": [{"input": "20 40 60 80 100\n0 1 2 3 4\n1 0", "output": "4900"}, {"input": "119 119 119 119 119\n0 0 0 0 0\n10 0", "output": "4930"}, {"input": "3 6 13 38 60\n6 10 10 3 8\n9 9", "output": "5088"}, {"input": "21 44 11 68 75\n6 2 4 8 4\n2 8", "output": "4522"}, {"input": "16 112 50 114 68\n1 4 8 4 9\n19 11", "output": "5178"}, {"input": "55 66 75 44 47\n6 0 6 6 10\n19 0", "output": "6414"}, {"input": "47 11 88 5 110\n6 10 4 2 3\n10 6", "output": "5188"}, {"input": "5 44 61 103 92\n9 0 10 4 8\n15 7", "output": "4914"}, {"input": "115 53 96 62 110\n7 8 1 7 9\n7 16", "output": "3416"}, {"input": "102 83 26 6 11\n3 4 1 8 3\n17 14", "output": "6704"}, {"input": "36 102 73 101 19\n5 9 2 2 6\n4 13", "output": "4292"}, {"input": "40 115 93 107 113\n5 7 2 6 8\n6 17", "output": "2876"}, {"input": "53 34 53 107 81\n4 3 1 10 8\n7 7", "output": "4324"}, {"input": "113 37 4 84 66\n2 0 10 3 0\n20 19", "output": "6070"}, {"input": "10 53 101 62 1\n8 0 9 7 9\n0 11", "output": "4032"}, {"input": "45 45 75 36 76\n6 2 2 0 0\n8 17", "output": "5222"}, {"input": "47 16 44 78 111\n7 9 8 0 2\n1 19", "output": "3288"}, {"input": "7 54 39 102 31\n6 0 2 10 1\n18 3", "output": "6610"}, {"input": "0 46 86 72 40\n1 5 5 5 9\n6 5", "output": "4924"}, {"input": "114 4 45 78 113\n0 4 8 10 2\n10 12", "output": "4432"}, {"input": "56 56 96 105 107\n4 9 10 4 8\n2 1", "output": "3104"}, {"input": "113 107 59 50 56\n3 7 10 6 3\n10 12", "output": "4586"}, {"input": "96 104 9 94 84\n6 10 7 8 3\n14 11", "output": "4754"}, {"input": "98 15 116 43 55\n4 3 0 9 3\n10 7", "output": "5400"}, {"input": "0 26 99 108 35\n0 4 3 0 10\n9 5", "output": "5388"}, {"input": "89 24 51 49 84\n5 6 2 2 9\n2 14", "output": "4066"}, {"input": "57 51 76 45 96\n1 0 4 3 6\n12 15", "output": "5156"}, {"input": "79 112 37 36 116\n2 8 4 7 5\n4 12", "output": "3872"}, {"input": "71 42 60 20 7\n7 1 1 10 6\n1 7", "output": "5242"}, {"input": "86 10 66 80 55\n0 2 5 10 5\n15 6", "output": "5802"}, {"input": "66 109 22 22 62\n3 1 5 4 5\n10 5", "output": "5854"}, {"input": "97 17 43 84 58\n2 8 3 8 6\n10 7", "output": "5028"}, {"input": "109 83 5 114 104\n6 0 3 9 5\n5 2", "output": "4386"}, {"input": "94 18 24 91 105\n2 0 7 10 3\n1 4", "output": "4118"}, {"input": "64 17 86 59 45\n8 0 10 2 2\n4 4", "output": "5144"}, {"input": "70 84 31 57 2\n7 0 0 2 7\n12 5", "output": "6652"}, {"input": "98 118 117 86 4\n2 10 9 7 5\n11 15", "output": "4476"}, {"input": "103 110 101 97 70\n4 2 1 0 5\n7 5", "output": "4678"}, {"input": "78 96 6 97 62\n7 7 9 2 9\n10 3", "output": "4868"}, {"input": "95 28 3 31 115\n1 9 0 7 3\n10 13", "output": "5132"}, {"input": "45 17 116 58 3\n8 8 7 6 4\n3 19", "output": "3992"}, {"input": "19 12 0 113 77\n3 0 10 9 2\n8 6", "output": "5040"}, {"input": "0 0 0 0 0\n0 0 0 0 0\n0 0", "output": "7500"}, {"input": "0 0 0 0 0\n0 0 0 0 0\n20 0", "output": "9500"}, {"input": "119 119 119 119 119\n10 10 10 10 10\n0 20", "output": "1310"}, {"input": "0 0 0 0 0\n10 10 10 10 10\n0 20", "output": "4150"}, {"input": "119 0 0 0 0\n10 0 0 0 0\n5 5", "output": "7400"}, {"input": "0 119 0 0 0\n0 10 0 0 0\n5 5", "output": "7050"}, {"input": "0 0 119 0 0\n0 0 10 0 0\n0 0", "output": "6450"}, {"input": "0 0 0 119 0\n0 0 0 10 0\n5 5", "output": "6350"}, {"input": "0 0 0 0 119\n0 0 0 0 10\n5 5", "output": "6060"}, {"input": "119 0 0 0 0\n2 0 0 0 0\n5 5", "output": "7412"}, {"input": "0 119 0 0 0\n0 2 0 0 0\n5 5", "output": "7174"}, {"input": "0 0 119 0 0\n0 0 2 0 0\n5 5", "output": "6936"}, {"input": "0 0 0 119 0\n0 0 0 2 0\n5 5", "output": "6698"}, {"input": "0 0 0 0 119\n0 0 0 0 2\n5 5", "output": "6460"}, {"input": "119 0 0 0 0\n0 0 0 0 0\n4 9", "output": "7212"}], "language": "cpp"}, "prompt": "A. Uncowed Forces\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nKevin Sun has just finished competing in Codeforces Round #334! The round was 120 minutes long and featured five problems with maximum point values of 500, 1000, 1500, 2000, and 2500, respectively. Despite the challenging tasks, Kevin was uncowed and bulldozed through all of them, distinguishing himself from the herd as the best cowmputer scientist in all of Bovinia. Kevin knows his submission time for each problem, the number of wrong submissions that he made on each problem, and his total numbers of successful and unsuccessful hacks. Because Codeforces scoring is complicated, Kevin wants you to write a program to compute his final score.\nCodeforces scores are computed as follows: If the maximum point value of a problem is x, and Kevin submitted correctly at minute m but made w wrong submissions, then his score on that problem is . His total score is equal to the sum of his scores for each problem. In addition, Kevin's total score gets increased by 100 points for each successful hack, but gets decreased by 50 points for each unsuccessful hack.\nAll arithmetic operations are performed with absolute precision and no rounding. It is guaranteed that Kevin's final score is an integer.\nInput\nThe first line of the input contains five space-separated integers m1, m2, m3, m4, m5, where mi (0 <= mi <= 119) is the time of Kevin's last submission for problem i. His last submission is always correct and gets accepted.\nThe second line contains five space-separated integers w1, w2, w3, w4, w5, where wi (0 <= wi <= 10) is Kevin's number of wrong submissions on problem i.\nThe last line contains two space-separated integers hs and hu (0 <= hs, hu <= 20), denoting the Kevin's numbers of successful and unsuccessful hacks, respectively.\nOutput\nPrint a single integer, the value of Kevin's final score.\n", "generation": "#include <iostream>\n#include <cstdio>\n\nusing namespace std;\n\nint main()\n{\n    int m1, m2, m3, m4, m5, w1, w2, w3, w4, w5, hs, hu;\n    cin >> m1 >> m2 >> m3 >> m4 >> m5 >> w1 >> w2 >> w3 >> w4 >> w5 >> hs >> hu;\n\n    int x1 = 500, x2 = 1000, x3 = 1500, x4 = 2000, x5 = 2500;\n    int score = x1 * (m1 - w1) + x2 * (m2 - w2) + x3 * (m3 - w3) + x4 * (m4 - w4) + x5 * (m5 - w5) + 100 * hs - 50 * hu;\n\n    cout << score;\n\n    return 0;\n}\n", "result": "failed: wrong answer @ testcase 1", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/123", "completion_id": 0, "test_suite": {"code": "int main() {\n  int n, k;\n  cin >> n;\n  cin >> k;\n\n  vector<int> s(n);\n  for (int i = 0; i < n; i++) {\n    cin >> s[i];\n  }\n\n  sort(s.begin(), s.end());\n\n  int ans = INT_MAX;\n  for (int i = 0; i < n; i++) {\n    int sum = s[i] + (i > 0 ? s[i - 1] : 0);\n    if (sum <= ans) {\n      ans = sum;\n    }\n  }\n\n  cout << ans;\n  return 0;\n}\n", "testcases": [{"input": "2 1\n2 5", "output": "7"}, {"input": "4 3\n2 3 5 9", "output": "9"}, {"input": "3 2\n3 5 7", "output": "8"}, {"input": "20 11\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "output": "2"}, {"input": "10 10\n3 15 31 61 63 63 68 94 98 100", "output": "100"}, {"input": "100 97\n340 402 415 466 559 565 649 689 727 771 774 776 789 795 973 1088 1212 1293 1429 1514 1587 1599 1929 1997 2278 2529 2656 2677 2839 2894 2951 3079 3237 3250 3556 3568 3569 3578 3615 3641 3673 3892 4142 4418 4515 4766 4846 4916 5225 5269 5352 5460 5472 5635 5732 5886 5941 5976 5984 6104 6113 6402 6409 6460 6550 6563 6925 7006 7289 7401 7441 7451 7709 7731 7742 7750 7752 7827 8101 8154 8376 8379 8432 8534 8578 8630 8706 8814 8882 8972 9041 9053 9109 9173 9473 9524 9547 9775 9791 9983", "output": "9983"}, {"input": "10 9\n7 29 35 38 41 47 54 56 73 74", "output": "74"}, {"input": "1 2342\n12345", "output": "12345"}, {"input": "10 5\n15 15 20 28 38 44 46 52 69 94", "output": "109"}, {"input": "10 9\n6 10 10 32 36 38 69 80 82 93", "output": "93"}, {"input": "10 10\n4 19 22 24 25 43 49 56 78 88", "output": "88"}, {"input": "100 89\n474 532 759 772 803 965 1043 1325 1342 1401 1411 1452 1531 1707 1906 1928 2034 2222 2335 2606 2757 2968 2978 3211 3513 3734 3772 3778 3842 3948 3976 4038 4055 4113 4182 4267 4390 4408 4478 4595 4668 4792 4919 5133 5184 5255 5312 5341 5476 5628 5683 5738 5767 5806 5973 6051 6134 6254 6266 6279 6314 6342 6599 6676 6747 6777 6827 6842 7057 7097 7259 7340 7378 7405 7510 7520 7698 7796 8148 8351 8507 8601 8805 8814 8826 8978 9116 9140 9174 9338 9394 9403 9407 9423 9429 9519 9764 9784 9838 9946", "output": "9946"}, {"input": "100 74\n10 211 323 458 490 592 979 981 1143 1376 1443 1499 1539 1612 1657 1874 2001 2064 2123 2274 2346 2471 2522 2589 2879 2918 2933 2952 3160 3164 3167 3270 3382 3404 3501 3522 3616 3802 3868 3985 4007 4036 4101 4580 4687 4713 4714 4817 4955 5257 5280 5343 5428 5461 5566 5633 5727 5874 5925 6233 6309 6389 6500 6701 6731 6847 6916 7088 7088 7278 7296 7328 7564 7611 7646 7887 7887 8065 8075 8160 8300 8304 8316 8355 8404 8587 8758 8794 8890 9038 9163 9235 9243 9339 9410 9587 9868 9916 9923 9986", "output": "9986"}, {"input": "100 61\n82 167 233 425 432 456 494 507 562 681 683 921 1218 1323 1395 1531 1586 1591 1675 1766 1802 1842 2116 2625 2697 2735 2739 3337 3349 3395 3406 3596 3610 3721 4059 4078 4305 4330 4357 4379 4558 4648 4651 4784 4819 4920 5049 5312 5361 5418 5440 5463 5547 5594 5821 5951 5972 6141 6193 6230 6797 6842 6853 6854 7017 7026 7145 7322 7391 7460 7599 7697 7756 7768 7872 7889 8094 8215 8408 8440 8462 8714 8756 8760 8881 9063 9111 9184 9281 9373 9406 9417 9430 9511 9563 9634 9660 9788 9883 9927", "output": "9927"}, {"input": "100 84\n53 139 150 233 423 570 786 861 995 1017 1072 1196 1276 1331 1680 1692 1739 1748 1826 2067 2280 2324 2368 2389 2607 2633 2760 2782 2855 2996 3030 3093 3513 3536 3557 3594 3692 3707 3823 3832 4009 4047 4088 4095 4408 4537 4565 4601 4784 4878 4935 5029 5252 5322 5389 5407 5511 5567 5857 6182 6186 6198 6280 6290 6353 6454 6458 6567 6843 7166 7216 7257 7261 7375 7378 7539 7542 7762 7771 7797 7980 8363 8606 8612 8663 8801 8808 8823 8918 8975 8997 9240 9245 9259 9356 9755 9759 9760 9927 9970", "output": "9970"}, {"input": "100 50\n130 248 312 312 334 589 702 916 921 1034 1047 1346 1445 1500 1585 1744 1951 2123 2273 2362 2400 2455 2496 2530 2532 2944 3074 3093 3094 3134 3698 3967 4047 4102 4109 4260 4355 4466 4617 4701 4852 4892 4915 4917 4936 4981 4999 5106 5152 5203 5214 5282 5412 5486 5525 5648 5897 5933 5969 6251 6400 6421 6422 6558 6805 6832 6908 6924 6943 6980 7092 7206 7374 7417 7479 7546 7672 7756 7973 8020 8028 8079 8084 8085 8137 8153 8178 8239 8639 8667 8829 9263 9333 9370 9420 9579 9723 9784 9841 9993", "output": "11103"}, {"input": "100 50\n156 182 208 409 496 515 659 761 772 794 827 912 1003 1236 1305 1388 1412 1422 1428 1465 1613 2160 2411 2440 2495 2684 2724 2925 3033 3035 3155 3260 3378 3442 3483 3921 4031 4037 4091 4113 4119 4254 4257 4442 4559 4614 4687 4839 4896 5054 5246 5316 5346 5859 5928 5981 6148 6250 6422 6433 6448 6471 6473 6485 6503 6779 6812 7050 7064 7074 7141 7378 7424 7511 7574 7651 7808 7858 8286 8291 8446 8536 8599 8628 8636 8768 8900 8981 9042 9055 9114 9146 9186 9411 9480 9590 9681 9749 9757 9983", "output": "10676"}, {"input": "100 50\n145 195 228 411 577 606 629 775 1040 1040 1058 1187 1307 1514 1784 1867 1891 2042 2042 2236 2549 2555 2560 2617 2766 2807 2829 2917 3070 3072 3078 3095 3138 3147 3149 3196 3285 3287 3309 3435 3531 3560 3563 3769 3830 3967 4081 4158 4315 4387 4590 4632 4897 4914 5128 5190 5224 5302 5402 5416 5420 5467 5517 5653 5820 5862 5941 6053 6082 6275 6292 6316 6490 6530 6619 6632 6895 7071 7234 7323 7334 7412 7626 7743 8098 8098 8136 8158 8264 8616 8701 8718 8770 8803 8809 8983 9422 9530 9811 9866", "output": "10011"}, {"input": "100 50\n56 298 387 456 518 532 589 792 870 1041 1055 1122 1141 1166 1310 1329 1523 1548 1626 1730 1780 1833 1850 1911 2006 2157 2303 2377 2403 2442 2450 2522 2573 2822 2994 3200 3238 3252 3280 3311 3345 3422 3429 3506 3526 3617 3686 3791 4134 4467 4525 4614 4633 4792 5017 5220 5243 5338 5445 5536 5639 5675 5763 5875 6129 6220 6228 6287 6385 6616 6789 6822 6940 6959 6985 7297 7304 7391 7443 7580 7824 7884 7981 8055 8063 8223 8280 8322 8346 8473 8688 8986 9087 9323 9477 9489 9518 9621 9699 9804", "output": "10009"}, {"input": "100 49990\n221 257 543 613 818 855 884 1195 1233 1293 1327 1474 1567 1568 1728 1789 1809 1957 1994 2198 2217 2289 2298 2360 2441 2454 2517 2519 2597 2652 2909 2958 2970 3271 3310 3409 3450 3646 3950 3965 4016 4116 4134 4159 4462 4624 4631 4783 4804 5031 5276 5538 5729 5845 5880 5894 5959 5961 6028 6105 6184 6335 6370 6523 6532 6677 6762 6868 6998 7066 7245 7360 7490 7492 7645 7677 7786 7804 8038 8131 8207 8400 8507 8556 8575 8599 8673 8676 8712 8816 9123 9158 9216 9369 9628 9707 9768 9800 9876 9934", "output": "9934"}, {"input": "1 50000\n2", "output": "2"}, {"input": "1 40000\n23456", "output": "23456"}, {"input": "1 2\n10", "output": "10"}, {"input": "1 1\n1", "output": "1"}, {"input": "2 2\n2 3", "output": "3"}, {"input": "4 2\n1 2 8 9", "output": "10"}], "language": "cpp"}, "prompt": "B. More Cowbell\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nKevin Sun wants to move his precious collection of n cowbells from Naperthrill to Exeter, where there is actually grass instead of corn. Before moving, he must pack his cowbells into k boxes of a fixed size. In order to keep his collection safe during transportation, he won't place more than two cowbells into a single box. Since Kevin wishes to minimize expenses, he is curious about the smallest size box he can use to pack his entire collection.\nKevin is a meticulous cowbell collector and knows that the size of his i-th (1 <= i <= n) cowbell is an integer si. In fact, he keeps his cowbells sorted by size, so si - 1 <= si for any i > 1. Also an expert packer, Kevin can fit one or two cowbells into a box of size s if and only if the sum of their sizes does not exceed s. Given this information, help Kevin determine the smallest s for which it is possible to put all of his cowbells into k boxes of size s.\nInput\nThe first line of the input contains two space-separated integers n and k (1 <= n <= 2.k <= 100 000), denoting the number of cowbells and the number of boxes, respectively.\nThe next line contains n space-separated integers s1, s2, ..., sn (1 <= s1 <= s2 <= ... <= sn <= 1 000 000), the sizes of Kevin's cowbells. It is guaranteed that the sizes si are given in non-decreasing order.\nOutput\nPrint a single integer, the smallest s for which it is possible for Kevin to put all of his cowbells into k boxes of size s.\n", "generation": "int main() {\n  int n, k;\n  cin >> n;\n  cin >> k;\n\n  vector<int> s(n);\n  for (int i = 0; i < n; i++) {\n    cin >> s[i];\n  }\n\n  sort(s.begin(), s.end());\n\n  int ans = INT_MAX;\n  for (int i = 0; i < n; i++) {\n    int sum = s[i] + (i > 0 ? s[i - 1] : 0);\n    if (sum <= ans) {\n      ans = sum;\n    }\n  }\n\n  cout << ans;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> n;\n      |   ^~~\ntest.cpp:6:3: error: \u2018vector\u2019 was not declared in this scope\n    6 |   vector<int> s(n);\n      |   ^~~~~~\ntest.cpp:6:10: error: expected primary-expression before \u2018int\u2019\n    6 |   vector<int> s(n);\n      |          ^~~\ntest.cpp:8:12: error: \u2018s\u2019 was not declared in this scope\n    8 |     cin >> s[i];\n      |            ^\ntest.cpp:11:8: error: \u2018s\u2019 was not declared in this scope\n   11 |   sort(s.begin(), s.end());\n      |        ^\ntest.cpp:11:3: error: \u2018sort\u2019 was not declared in this scope; did you mean \u2018short\u2019?\n   11 |   sort(s.begin(), s.end());\n      |   ^~~~\n      |   short\ntest.cpp:13:13: error: \u2018INT_MAX\u2019 was not declared in this scope\n   13 |   int ans = INT_MAX;\n      |             ^~~~~~~\ntest.cpp:1:1: note: \u2018INT_MAX\u2019 is defined in header \u2018<climits>\u2019; did you forget to \u2018#include <climits>\u2019?\n  +++ |+#include <climits>\n    1 | int main() {\ntest.cpp:21:3: error: \u2018cout\u2019 was not declared in this scope\n   21 |   cout << ans;\n      |   ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/124", "completion_id": 0, "test_suite": {"code": "int longestAlternatingSubsequence(string& s) {\n  int n = s.length();\n  vector<int> dp(n, 0);\n  vector<int> prev(n, 0);\n  prev[0] = 1;\n  dp[0] = 1;\n  for(int i = 1; i < n; i++) {\n    if(s[i] == s[i-1]) {\n      prev[i] = prev[i-1] + 1;\n    } else {\n      prev[i] = dp[i-1] + 1;\n    }\n    dp[i] = max(dp[i], prev[i]);\n  }\n  return dp[n-1];\n}\n", "testcases": [{"input": "8\n10000011", "output": "5"}, {"input": "2\n01", "output": "2"}, {"input": "5\n10101", "output": "5"}, {"input": "75\n010101010101010101010101010101010101010101010101010101010101010101010101010", "output": "75"}, {"input": "11\n00000000000", "output": "3"}, {"input": "56\n10101011010101010101010101010101010101011010101010101010", "output": "56"}, {"input": "50\n01011010110101010101010101010101010101010101010100", "output": "49"}, {"input": "7\n0110100", "output": "7"}, {"input": "8\n11011111", "output": "5"}, {"input": "6\n000000", "output": "3"}, {"input": "5\n01000", "output": "5"}, {"input": "59\n10101010101010101010101010101010101010101010101010101010101", "output": "59"}, {"input": "88\n1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010", "output": "88"}, {"input": "93\n010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010", "output": "93"}, {"input": "70\n0101010101010101010101010101010101010101010101010101010101010101010101", "output": "70"}, {"input": "78\n010101010101010101010101010101101010101010101010101010101010101010101010101010", "output": "78"}, {"input": "83\n10101010101010101010101010101010101010101010101010110101010101010101010101010101010", "output": "83"}, {"input": "87\n101010101010101010101010101010101010101010101010101010101010101010101010101010010101010", "output": "87"}, {"input": "65\n01010101101010101010101010101010101010101010101010101010101010101", "output": "65"}, {"input": "69\n010101010101010101101010101010101010101010101010101010101010101010101", "output": "69"}, {"input": "74\n01010101010101010101010101010101010101010101010101010101010101000101010101", "output": "74"}, {"input": "77\n01010101010101001010101010101010100101010101010101010101010101010101010101010", "output": "77"}, {"input": "60\n101010110101010101010101010110101010101010101010101010101010", "output": "60"}, {"input": "89\n01010101010101010101010101010101010101010101010101010101101010101010101010100101010101010", "output": "89"}, {"input": "68\n01010101010101010101010101010101010100101010100101010101010100101010", "output": "67"}, {"input": "73\n0101010101010101010101010101010101010101010111011010101010101010101010101", "output": "72"}, {"input": "55\n1010101010101010010101010101101010101010101010100101010", "output": "54"}, {"input": "85\n1010101010101010101010101010010101010101010101101010101010101010101011010101010101010", "output": "84"}, {"input": "1\n0", "output": "1"}, {"input": "1\n1", "output": "1"}, {"input": "10\n1111111111", "output": "3"}, {"input": "2\n10", "output": "2"}, {"input": "2\n11", "output": "2"}, {"input": "2\n00", "output": "2"}, {"input": "3\n000", "output": "3"}, {"input": "3\n001", "output": "3"}, {"input": "3\n010", "output": "3"}, {"input": "3\n011", "output": "3"}, {"input": "3\n100", "output": "3"}, {"input": "3\n101", "output": "3"}, {"input": "3\n110", "output": "3"}, {"input": "3\n111", "output": "3"}, {"input": "4\n0000", "output": "3"}, {"input": "4\n0001", "output": "4"}, {"input": "4\n0010", "output": "4"}, {"input": "4\n0011", "output": "4"}, {"input": "4\n0100", "output": "4"}, {"input": "4\n0101", "output": "4"}, {"input": "4\n0110", "output": "4"}, {"input": "4\n0111", "output": "4"}, {"input": "4\n1000", "output": "4"}, {"input": "4\n1001", "output": "4"}, {"input": "4\n1010", "output": "4"}, {"input": "4\n1011", "output": "4"}, {"input": "4\n1100", "output": "4"}, {"input": "4\n1101", "output": "4"}, {"input": "4\n1110", "output": "4"}, {"input": "4\n1111", "output": "3"}, {"input": "5\n00000", "output": "3"}, {"input": "5\n00001", "output": "4"}, {"input": "5\n00010", "output": "5"}, {"input": "5\n00011", "output": "4"}, {"input": "5\n00100", "output": "5"}, {"input": "5\n00101", "output": "5"}, {"input": "5\n00110", "output": "5"}, {"input": "5\n00111", "output": "4"}, {"input": "5\n01000", "output": "5"}, {"input": "5\n01001", "output": "5"}, {"input": "5\n01010", "output": "5"}, {"input": "5\n01011", "output": "5"}, {"input": "5\n01100", "output": "5"}, {"input": "5\n01101", "output": "5"}, {"input": "5\n01110", "output": "5"}, {"input": "5\n01111", "output": "4"}, {"input": "5\n10000", "output": "4"}, {"input": "5\n10001", "output": "5"}, {"input": "5\n10010", "output": "5"}, {"input": "5\n10100", "output": "5"}, {"input": "5\n10101", "output": "5"}, {"input": "5\n10110", "output": "5"}, {"input": "5\n10111", "output": "5"}, {"input": "5\n11000", "output": "4"}, {"input": "5\n11001", "output": "5"}, {"input": "5\n11010", "output": "5"}, {"input": "5\n11011", "output": "5"}, {"input": "5\n11100", "output": "4"}, {"input": "5\n11101", "output": "5"}, {"input": "5\n11110", "output": "4"}, {"input": "5\n11111", "output": "3"}], "language": "cpp"}, "prompt": "C. Alternative Thinking\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nKevin has just recevied his disappointing results on the USA Identification of Cows Olympiad (USAICO) in the form of a binary string of length n. Each character of Kevin's string represents Kevin's score on one of the n questions of the olympiad-'1' for a correctly identified cow and '0' otherwise.\nHowever, all is not lost. Kevin is a big proponent of alternative thinking and believes that his score, instead of being the sum of his points, should be the length of the longest alternating subsequence of his string. Here, we define an alternating subsequence of a string as a not-necessarily contiguous subsequence where no two consecutive elements are equal. For example, {0, 1, 0, 1}, {1, 0, 1}, and {1, 0, 1, 0} are alternating sequences, while {1, 0, 0} and {0, 1, 0, 1, 1} are not.\nKevin, being the sneaky little puffball that he is, is willing to hack into the USAICO databases to improve his score. In order to be subtle, he decides that he will flip exactly one substring-that is, take a contiguous non-empty substring of his score and change all '0's in that substring to '1's and vice versa. After such an operation, Kevin wants to know the length of the longest possible alternating subsequence that his string could have.\nInput\nThe first line contains the number of questions on the olympiad n (1 <= n <= 100 000).\nThe following line contains a binary string of length n representing Kevin's results on the USAICO.\nOutput\nOutput a single integer, the length of the longest possible alternating subsequence that Kevin can create in his string after flipping a single substring.\n", "generation": "int longestAlternatingSubsequence(string& s) {\n  int n = s.length();\n  vector<int> dp(n, 0);\n  vector<int> prev(n, 0);\n  prev[0] = 1;\n  dp[0] = 1;\n  for(int i = 1; i < n; i++) {\n    if(s[i] == s[i-1]) {\n      prev[i] = prev[i-1] + 1;\n    } else {\n      prev[i] = dp[i-1] + 1;\n    }\n    dp[i] = max(dp[i], prev[i]);\n  }\n  return dp[n-1];\n}\n", "result": "failed: compilation error: test.cpp:1:35: error: \u2018string\u2019 was not declared in this scope\n    1 | int longestAlternatingSubsequence(string& s) {\n      |                                   ^~~~~~\ntest.cpp:1:43: error: \u2018s\u2019 was not declared in this scope\n    1 | int longestAlternatingSubsequence(string& s) {\n      |                                           ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/125", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nlong long mod = 109 + 7;\n\nlong long func(long long n, long long k) {\n  return (n - 1) * k + 1;\n}\n\nint main() {\n  long long p, k;\n  cin >> p;\n  cin >> k;\n\n  long long ans = func(p, k);\n  cout << ans % mod;\n\n  return 0;\n}\n", "testcases": [{"input": "3 2", "output": "3"}, {"input": "5 4", "output": "25"}, {"input": "7 2", "output": "49"}, {"input": "7 6", "output": "343"}, {"input": "10007 25", "output": "100140049"}, {"input": "40037 4", "output": "602961362"}, {"input": "5 0", "output": "625"}, {"input": "5 3", "output": "5"}, {"input": "7 1", "output": "823543"}, {"input": "13 5", "output": "2197"}, {"input": "13 4", "output": "169"}, {"input": "5 2", "output": "5"}, {"input": "11 1", "output": "311668616"}, {"input": "11 10", "output": "161051"}, {"input": "6907 2590", "output": "543643888"}, {"input": "3229 153", "output": "552691282"}, {"input": "727 282", "output": "471521101"}, {"input": "7621 6195", "output": "501036626"}, {"input": "4649 4648", "output": "460009811"}, {"input": "5527 1711", "output": "837297007"}, {"input": "1901 633", "output": "557576188"}, {"input": "463 408", "output": "853558215"}, {"input": "6871 5566", "output": "742783884"}, {"input": "4177 556", "output": "594173514"}, {"input": "65213 29960", "output": "65213"}, {"input": "375103 52131", "output": "947042280"}, {"input": "990037 453792", "output": "654009570"}, {"input": "95531 94787", "output": "95531"}, {"input": "498653 116674", "output": "625264514"}, {"input": "561389 213181", "output": "10668315"}, {"input": "649849 339573", "output": "649849"}, {"input": "512287 359783", "output": "542484357"}, {"input": "337411 146419", "output": "532279245"}, {"input": "717887 1", "output": "559281518"}, {"input": "586189 189159", "output": "168174057"}, {"input": "613463 269592", "output": "336849737"}, {"input": "873781 51595", "output": "226847774"}, {"input": "203317 12108", "output": "374893480"}, {"input": "51419 21829", "output": "643913547"}, {"input": "115237 90311", "output": "355904974"}, {"input": "437071 24705", "output": "743969711"}, {"input": "278917 84398", "output": "727771018"}, {"input": "40867 37466", "output": "560078799"}, {"input": "274783 98997", "output": "505696564"}, {"input": "450431 344107", "output": "450431"}, {"input": "288179 113623", "output": "124681010"}, {"input": "807689 9869", "output": "636680820"}, {"input": "69833 569", "output": "69833"}, {"input": "805711 702149", "output": "759894252"}, {"input": "999983 999982", "output": "794678399"}, {"input": "999983 0", "output": "416606930"}, {"input": "999983 1", "output": "844765997"}, {"input": "823457 2", "output": "203355139"}, {"input": "999983 239239", "output": "965993296"}], "language": "cpp"}, "prompt": "D. Moodular Arithmetic\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nAs behooves any intelligent schoolboy, Kevin Sun is studying psycowlogy, cowculus, and cryptcowgraphy at the Bovinia State University (BGU) under Farmer Ivan. During his Mathematics of Olympiads (MoO) class, Kevin was confronted with a weird functional equation and needs your help. For two fixed integers k and p, where p is an odd prime number, the functional equation states that\nfor some function . (This equation should hold for any integer x in the range 0 to p - 1, inclusive.)\nIt turns out that f can actually be many different functions. Instead of finding a solution, Kevin wants you to count the number of distinct functions f that satisfy this equation. Since the answer may be very large, you should print your result modulo 109 + 7.\nInput\nThe input consists of two space-separated integers p and k (3 <= p <= 1 000 000, 0 <= k <= p - 1) on a single line. It is guaranteed that p is an odd prime number.\nOutput\nPrint a single integer, the number of distinct functions f modulo 109 + 7.\n", "generation": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n\nusing namespace std;\n\nlong long mod = 109 + 7;\n\nlong long func(long long n, long long k) {\n  return (n - 1) * k + 1;\n}\n\nint main() {\n  long long p, k;\n  cin >> p;\n  cin >> k;\n\n  long long ans = func(p, k);\n  cout << ans % mod;\n\n  return 0;\n}\n", "result": "failed: wrong answer @ testcase 1", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/131", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool check(int x, int y, int ai, int bi) {\n  return ai <= x && bi <= y;\n}\n\nint main() {\n  int n;\n  cin >> n;\n\n  vector<int> x(n);\n  vector<int> y(n);\n  vector<vector<int>> a(n);\n\n  for (int i = 0; i < n; i++) {\n    cin >> x[i];\n    cin >> y[i];\n    a[i].push_back(x[i]);\n    a[i].push_back(y[i]);\n  }\n\n  int k = -1;\n  for (int i = 0; i < n; i++) {\n    if (check(x[i], y[i], a[i][0], a[i][1]) {\n      x[i] = a[i][2];\n      y[i] = a[i][3];\n      k++;\n    }\n  }\n\n  if (k == -1) {\n    cout << -1 << endl;\n  } else {\n    cout << k << endl;\n    for (int i = 0; i < k; i++) {\n      cout << a[i][0] << \" \";\n    }\n    cout << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "4\n0 0 3 4\n2 2 5 3\n4 1 1 7\n5 3 8 8", "output": "3\n1 2 4"}, {"input": "2\n0 0 4 6\n5 1 1000000000 1000000000", "output": "-1"}, {"input": "1\n0 0 1000000000 1000000000", "output": "1\n1"}, {"input": "5\n0 0 1000000000 1000000000\n1000000000 1000000000 1 1\n1 1 2 2\n2 2 3 3\n3 3 1000000000 1000000000", "output": "2\n1 5"}, {"input": "1\n1 1 1 1", "output": "-1"}, {"input": "2\n0 0 1 1\n1 1 0 0", "output": "2\n1 2"}, {"input": "3\n0 0 0 0\n0 0 0 0\n0 0 0 0", "output": "1\n3"}, {"input": "3\n1 0 0 0\n0 0 0 0\n0 1 0 0", "output": "-1"}, {"input": "3\n1 1 2 2\n2 2 3 3\n3 3 4 4", "output": "-1"}, {"input": "5\n0 0 1000000000 999999999\n1000000000 999999999 1 1\n1 1 2 2\n2 2 3 3\n3 1000000000 0 0", "output": "-1"}, {"input": "4\n0 0 999999999 999999999\n1 1000000000 1000000000 1000000000\n1000000000 1 1000000000 1000000000\n1000000000 1000000000 42 42", "output": "-1"}, {"input": "8\n0 0 2 2\n1 0 4 1\n0 1 5 2\n3 0 2 4\n1 3 6 5\n4 4 3 6\n5 0 1 3\n3 6 6 6", "output": "6\n1 2 4 5 6 8"}, {"input": "8\n0 0 2 2\n1 0 4 1\n0 1 5 2\n3 0 2 4\n1 3 6 5\n4 4 3 6\n5 0 4 5\n3 6 6 6", "output": "5\n1 3 7 6 8"}, {"input": "5\n0 0 2 1\n9 7 2 10\n0 0 10 8\n9 4 4 1\n1 0 5 3", "output": "2\n1 5"}, {"input": "6\n0 0 4 10\n3 11 9 2\n8 0 0 6\n2 9 0 3\n10 5 2 4\n0 0 5 3", "output": "1\n6"}, {"input": "7\n0 0 1 2\n12 6 5 6\n12 2 4 6\n9 8 12 2\n6 12 4 11\n5 2 4 1\n0 11 2 12", "output": "-1"}, {"input": "8\n1 10 11 6\n9 3 4 1\n13 10 3 4\n0 0 4 1\n9 3 3 12\n1 1 6 2\n11 12 11 13\n6 4 1 9", "output": "-1"}, {"input": "9\n9 14 2 0\n3 5 5 12\n0 9 2 10\n0 0 11 8\n1 10 2 5\n1 14 3 8\n0 7 11 3\n0 0 7 14\n11 9 7 13", "output": "-1"}, {"input": "10\n3 3 3 5\n9 3 1 7\n2 10 8 2\n1 3 2 0\n10 1 9 2\n10 2 3 8\n5 4 8 6\n2 9 9 7\n1 4 5 0\n4 9 5 7", "output": "-1"}, {"input": "10\n12 0 4 3\n1 12 3 11\n3 3 14 6\n0 0 15 5\n14 4 7 1\n12 4 1 11\n1 13 5 4\n0 0 1 5\n6 8 10 3\n0 0 0 1", "output": "1\n10"}, {"input": "10\n14 20 5 13\n8 2 14 3\n0 16 17 1\n18 1 7 13\n6 12 19 0\n11 15 12 3\n3 20 17 9\n8 12 14 14\n19 15 9 20\n20 4 19 4", "output": "-1"}, {"input": "10\n1 24 22 24\n13 21 20 16\n16 12 13 1\n16 21 2 0\n24 7 3 13\n18 20 15 24\n14 0 10 5\n8 2 12 11\n0 4 11 21\n20 18 7 8", "output": "-1"}, {"input": "10\n8 17 12 24\n0 0 6 30\n0 0 26 27\n0 0 30 1\n26 4 8 11\n21 7 3 8\n29 19 5 24\n4 27 30 30\n23 23 24 23\n14 29 27 13", "output": "3\n2 8 10"}, {"input": "10\n10 35 8 24\n26 17 6 22\n25 24 0 28\n14 29 14 27\n9 13 11 5\n4 1 0 20\n24 24 19 25\n15 5 11 2\n15 13 28 11\n11 29 18 7", "output": "-1"}, {"input": "10\n15 6 4 0\n32 29 20 8\n21 37 34 34\n16 22 2 10\n10 9 22 17\n34 18 32 28\n1 38 37 28\n13 38 36 11\n36 27 36 13\n12 12 7 29", "output": "-1"}, {"input": "10\n10 565 959 32\n0 0 513 797\n267 670 603 838\n657 81 598 430\n0 0 280 624\n970 268 330 891\n529 283 347 68\n948 50 650 842\n206 842 314 889\n905 82 275 969", "output": "-1"}], "language": "cpp"}, "prompt": "D. Board Game\ntime limit per test\n2.5 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nYou are playing a board card game. In this game the player has two characteristics, x and y - the white magic skill and the black magic skill, respectively. There are n spell cards lying on the table, each of them has four characteristics, ai, bi, ci and di. In one move a player can pick one of the cards and cast the spell written on it, but only if first two of it's characteristics meet the requirement ai <= x and bi <= y, i.e. if the player has enough magic skill to cast this spell. However, after casting the spell the characteristics of a player change and become equal to x = ci and y = di.\nAt the beginning of the game both characteristics of a player are equal to zero. The goal of the game is to cast the n-th spell. Your task is to make it in as few moves as possible. You are allowed to use spell in any order and any number of times (for example, you may not use some spells at all).\nInput\nThe first line of the input contains a single integer n (1 <= n <= 100 000) - the number of cards on the table.\nEach of the next n lines contains four integers ai, bi, ci, di (0 <= ai, bi, ci, di <= 109) - the characteristics of the corresponding card.\nOutput\nIn the first line print a single integer k - the minimum number of moves needed to cast the n-th spell and in the second line print k numbers - the indices of the cards in the order in which you should cast them. In case there are multiple possible solutions, print any of them.\nIf it is impossible to cast the n-th spell, print  - 1.\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool check(int x, int y, int ai, int bi) {\n  return ai <= x && bi <= y;\n}\n\nint main() {\n  int n;\n  cin >> n;\n\n  vector<int> x(n);\n  vector<int> y(n);\n  vector<vector<int>> a(n);\n\n  for (int i = 0; i < n; i++) {\n    cin >> x[i];\n    cin >> y[i];\n    a[i].push_back(x[i]);\n    a[i].push_back(y[i]);\n  }\n\n  int k = -1;\n  for (int i = 0; i < n; i++) {\n    if (check(x[i], y[i], a[i][0], a[i][1]) {\n      x[i] = a[i][2];\n      y[i] = a[i][3];\n      k++;\n    }\n  }\n\n  if (k == -1) {\n    cout << -1 << endl;\n  } else {\n    cout << k << endl;\n    for (int i = 0; i < k; i++) {\n      cout << a[i][0] << \" \";\n    }\n    cout << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:27:44: error: expected \u2018)\u2019 before \u2018{\u2019 token\n   27 |     if (check(x[i], y[i], a[i][0], a[i][1]) {\n      |        ~                                   ^~\n      |                                            )\ntest.cpp:32:3: error: expected primary-expression before \u2018}\u2019 token\n   32 |   }\n      |   ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/133", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nbool isPossible(int a, int b, int c, int x, int y, int z) {\n  int totalSpheres = a + b + c;\n  if (totalSpheres < x + y + z) {\n    return false;\n  }\n  if (a >= x && b >= y) {\n    return true;\n  } else if (a >= x && c >= z) {\n    return true;\n  } else if (b >= y && c >= z) {\n    return true;\n  }\n  return false;\n}\n\nint main() {\n  int a, b, c, x, y, z;\n  cin >> a;\n  cin >> b;\n  cin >> c;\n  cin >> x;\n  cin >> y;\n  cin >> z;\n\n  if (isPossible(a, b, c, x, y, z)) {\n    cout << \"Yes\";\n  } else {\n    cout << \"No\";\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "4 4 0\n2 1 2", "output": "Yes"}, {"input": "5 6 1\n2 7 2", "output": "No"}, {"input": "3 3 3\n2 2 2", "output": "Yes"}, {"input": "0 0 0\n0 0 0", "output": "Yes"}, {"input": "0 0 0\n0 0 1", "output": "No"}, {"input": "0 1 0\n0 0 0", "output": "Yes"}, {"input": "1 0 0\n1 0 0", "output": "Yes"}, {"input": "2 2 1\n1 1 2", "output": "No"}, {"input": "1 3 1\n2 1 1", "output": "Yes"}, {"input": "1000000 1000000 1000000\n1000000 1000000 1000000", "output": "Yes"}, {"input": "1000000 500000 500000\n0 750000 750000", "output": "Yes"}, {"input": "500000 1000000 500000\n750001 0 750000", "output": "No"}, {"input": "499999 500000 1000000\n750000 750000 0", "output": "No"}, {"input": "500000 500000 0\n0 0 500000", "output": "Yes"}, {"input": "0 500001 499999\n500000 0 0", "output": "No"}, {"input": "1000000 500000 1000000\n500000 1000000 500000", "output": "Yes"}, {"input": "1000000 1000000 499999\n500000 500000 1000000", "output": "No"}, {"input": "500000 1000000 1000000\n1000000 500001 500000", "output": "No"}, {"input": "1000000 500000 500000\n0 1000000 500000", "output": "Yes"}, {"input": "500000 500000 1000000\n500001 1000000 0", "output": "No"}, {"input": "500000 999999 500000\n1000000 0 500000", "output": "No"}, {"input": "4 0 3\n2 2 1", "output": "Yes"}, {"input": "0 2 4\n2 0 2", "output": "Yes"}, {"input": "3 1 0\n1 1 1", "output": "Yes"}, {"input": "4 4 1\n1 3 2", "output": "Yes"}, {"input": "1 2 4\n2 1 3", "output": "No"}, {"input": "1 1 0\n0 0 1", "output": "No"}, {"input": "4 0 0\n0 1 1", "output": "Yes"}, {"input": "0 3 0\n1 0 1", "output": "No"}, {"input": "0 0 3\n1 0 1", "output": "Yes"}, {"input": "1 12 1\n4 0 4", "output": "Yes"}, {"input": "4 0 4\n1 2 1", "output": "Yes"}, {"input": "4 4 0\n1 1 3", "output": "No"}, {"input": "0 9 0\n2 2 2", "output": "No"}, {"input": "0 10 0\n2 2 2", "output": "Yes"}, {"input": "9 0 9\n0 8 0", "output": "Yes"}, {"input": "0 9 9\n9 0 0", "output": "No"}, {"input": "9 10 0\n0 0 9", "output": "Yes"}, {"input": "10 0 9\n0 10 0", "output": "No"}, {"input": "0 10 10\n10 0 0", "output": "Yes"}, {"input": "10 10 0\n0 0 11", "output": "No"}, {"input": "307075 152060 414033\n381653 222949 123101", "output": "No"}, {"input": "569950 228830 153718\n162186 357079 229352", "output": "No"}, {"input": "149416 303568 749016\n238307 493997 190377", "output": "No"}, {"input": "438332 298094 225324\n194220 400244 245231", "output": "No"}, {"input": "293792 300060 511272\n400687 382150 133304", "output": "No"}, {"input": "295449 518151 368838\n382897 137148 471892", "output": "No"}, {"input": "191789 291147 691092\n324321 416045 176232", "output": "Yes"}, {"input": "286845 704749 266526\n392296 104421 461239", "output": "Yes"}, {"input": "135522 188282 377041\n245719 212473 108265", "output": "Yes"}, {"input": "404239 359124 133292\n180069 184791 332544", "output": "No"}, {"input": "191906 624432 244408\n340002 367217 205432", "output": "No"}, {"input": "275980 429361 101824\n274288 302579 166062", "output": "No"}, {"input": "136092 364927 395302\n149173 343146 390922", "output": "No"}, {"input": "613852 334661 146012\n363786 326286 275233", "output": "No"}, {"input": "348369 104625 525203\n285621 215396 366411", "output": "No"}, {"input": "225307 153572 114545\n154753 153282 149967", "output": "Yes"}, {"input": "438576 124465 629784\n375118 276028 390116", "output": "Yes"}, {"input": "447521 327510 158732\n395759 178458 259139", "output": "Yes"}, {"input": "8 5 5\n5 5 5", "output": "Yes"}, {"input": "100 100 100\n1 1 1", "output": "Yes"}, {"input": "100 100 100\n0 0 0", "output": "Yes"}, {"input": "3 2 3\n2 3 2", "output": "No"}, {"input": "5 4 3\n2 2 2", "output": "Yes"}, {"input": "14 9 8\n12 5 10", "output": "Yes"}, {"input": "10 10 10\n1 1 1", "output": "Yes"}, {"input": "6 3 3\n3 3 3", "output": "Yes"}, {"input": "10 0 4\n2 4 2", "output": "Yes"}, {"input": "100 100 100\n2 2 2", "output": "Yes"}, {"input": "4 6 0\n2 1 2", "output": "Yes"}, {"input": "4 6 3\n4 2 3", "output": "Yes"}, {"input": "5 5 5\n1 1 1", "output": "Yes"}, {"input": "41 17 34\n0 19 24", "output": "Yes"}, {"input": "8 8 8\n3 3 3", "output": "Yes"}, {"input": "7 7 1\n1 1 2", "output": "Yes"}, {"input": "6 6 0\n2 2 2", "output": "Yes"}, {"input": "5 5 5\n2 2 2", "output": "Yes"}, {"input": "400 400 400\n1 1 1", "output": "Yes"}, {"input": "4 4 4\n2 2 2", "output": "Yes"}], "language": "cpp"}, "prompt": "A. Magic Spheres\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nCarl is a beginner magician. He has a blue, b violet and c orange magic spheres. In one move he can transform two spheres of the same color into one sphere of any other color. To make a spell that has never been seen before, he needs at least x blue, y violet and z orange spheres. Can he get them (possible, in multiple actions)?\nInput\nThe first line of the input contains three integers a, b and c (0 <= a, b, c <= 1 000 000) - the number of blue, violet and orange spheres that are in the magician's disposal.\nThe second line of the input contains three integers, x, y and z (0 <= x, y, z <= 1 000 000) - the number of blue, violet and orange spheres that he needs to get.\nOutput\nIf the wizard is able to obtain the required numbers of spheres, print \"Yes\". Otherwise, print \"No\".\n", "generation": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nbool isPossible(int a, int b, int c, int x, int y, int z) {\n  int totalSpheres = a + b + c;\n  if (totalSpheres < x + y + z) {\n    return false;\n  }\n  if (a >= x && b >= y) {\n    return true;\n  } else if (a >= x && c >= z) {\n    return true;\n  } else if (b >= y && c >= z) {\n    return true;\n  }\n  return false;\n}\n\nint main() {\n  int a, b, c, x, y, z;\n  cin >> a;\n  cin >> b;\n  cin >> c;\n  cin >> x;\n  cin >> y;\n  cin >> z;\n\n  if (isPossible(a, b, c, x, y, z)) {\n    cout << \"Yes\";\n  } else {\n    cout << \"No\";\n  }\n\n  return 0;\n}\n", "result": "failed: wrong answer @ testcase 8", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/134", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main()\n{\n    int x, y, x0, y0, k;\n    cin >> x;\n    cin >> y;\n    cin >> x0;\n    cin >> y0;\n    string s;\n    cin >> s;\n\n    int dx[] = {0, 1, 0, -1};\n    int dy[] = {1, 0, -1, 0};\n\n    int ans[s.length() + 1];\n    ans[0] = 1;\n\n    for(int i = 0; i < s.length(); i++)\n    {\n        int nx = x0 + dx[s[i] - 'L'] * k;\n        int ny = y0 + dy[s[i] - 'L'] * k;\n\n        if(nx < 1 || ny < 1 || nx > x || ny > y)\n        {\n            ans[i + 1] = ans[i] + 1;\n        }\n        else\n        {\n            ans[i + 1] = ans[i];\n        }\n    }\n\n    for(int i = 0; i <= s.length(); i++)\n    {\n        cout << ans[i] << endl;\n    }\n\n    return 0;\n}\n", "testcases": [{"input": "3 4 2 2\nUURDRDRL", "output": "1 1 0 1 1 1 1 0 6"}, {"input": "2 2 2 2\nULD", "output": "1 1 1 1"}, {"input": "1 1 1 1\nURDLUURRDDLLURDL", "output": "1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"}, {"input": "15 17 8 9\nURRDLUULLDD", "output": "1 1 1 1 1 1 0 1 1 1 1 245"}, {"input": "15 17 8 9\nURRDLUULLDDDRRUR", "output": "1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 241"}, {"input": "15 17 8 9\nURRDLUULLDDDRRURR", "output": "1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 0 241"}, {"input": "1 2 1 1\nR", "output": "1 1"}, {"input": "2 1 1 1\nD", "output": "1 1"}, {"input": "1 2 1 2\nLR", "output": "1 1 0"}, {"input": "2 1 2 1\nUD", "output": "1 1 0"}, {"input": "4 4 2 2\nDRUL", "output": "1 1 1 1 12"}, {"input": "4 4 3 3\nLUDRUL", "output": "1 1 1 0 0 1 12"}, {"input": "15 17 8 9\nURRDLU", "output": "1 1 1 1 1 1 249"}, {"input": "15 17 8 9\nURRDLUULLDDR", "output": "1 1 1 1 1 1 0 1 1 1 1 1 244"}, {"input": "15 17 8 9\nURRDLUULLDDRR", "output": "1 1 1 1 1 1 0 1 1 1 1 1 0 244"}, {"input": "15 17 8 9\nURRDLUULLDDRRR", "output": "1 1 1 1 1 1 0 1 1 1 1 1 0 0 244"}, {"input": "15 17 8 9\nURRDLUULLDDRRRR", "output": "1 1 1 1 1 1 0 1 1 1 1 1 0 0 0 244"}, {"input": "15 17 8 9\nURRDLUULLDDRRRRU", "output": "1 1 1 1 1 1 0 1 1 1 1 1 0 0 0 1 243"}], "language": "cpp"}, "prompt": "B. Testing Robots\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nThe Cybernetics Failures (CF) organisation made a prototype of a bomb technician robot. To find the possible problems it was decided to carry out a series of tests. At the beginning of each test the robot prototype will be placed in cell (x0, y0) of a rectangular squared field of size x * y, after that a mine will be installed into one of the squares of the field. It is supposed to conduct exactly x.y tests, each time a mine is installed into a square that has never been used before. The starting cell of the robot always remains the same.\nAfter placing the objects on the field the robot will have to run a sequence of commands given by string s, consisting only of characters 'L', 'R', 'U', 'D'. These commands tell the robot to move one square to the left, to the right, up or down, or stay idle if moving in the given direction is impossible. As soon as the robot fulfills all the sequence of commands, it will blow up due to a bug in the code. But if at some moment of time the robot is at the same square with the mine, it will also blow up, but not due to a bug in the code.\nMoving to the left decreases coordinate y, and moving to the right increases it. Similarly, moving up decreases the x coordinate, and moving down increases it.\nThe tests can go on for very long, so your task is to predict their results. For each k from 0 to length(s) your task is to find in how many tests the robot will run exactly k commands before it blows up.\nInput\nThe first line of the input contains four integers x, y, x0, y0 (1 <= x, y <= 500, 1 <= x0 <= x, 1 <= y0 <= y) - the sizes of the field and the starting coordinates of the robot. The coordinate axis X is directed downwards and axis Y is directed to the right.\nThe second line contains a sequence of commands s, which should be fulfilled by the robot. It has length from 1 to 100 000 characters and only consists of characters 'L', 'R', 'U', 'D'.\nOutput\nPrint the sequence consisting of (length(s) + 1) numbers. On the k-th position, starting with zero, print the number of tests where the robot will run exactly k commands before it blows up.\n", "generation": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main()\n{\n    int x, y, x0, y0, k;\n    cin >> x;\n    cin >> y;\n    cin >> x0;\n    cin >> y0;\n    string s;\n    cin >> s;\n\n    int dx[] = {0, 1, 0, -1};\n    int dy[] = {1, 0, -1, 0};\n\n    int ans[s.length() + 1];\n    ans[0] = 1;\n\n    for(int i = 0; i < s.length(); i++)\n    {\n        int nx = x0 + dx[s[i] - 'L'] * k;\n        int ny = y0 + dy[s[i] - 'L'] * k;\n\n        if(nx < 1 || ny < 1 || nx > x || ny > y)\n        {\n            ans[i + 1] = ans[i] + 1;\n        }\n        else\n        {\n            ans[i + 1] = ans[i];\n        }\n    }\n\n    for(int i = 0; i <= s.length(); i++)\n    {\n        cout << ans[i] << endl;\n    }\n\n    return 0;\n}\n", "result": "failed: wrong answer @ testcase 1", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/137", "completion_id": 0, "test_suite": {"code": "int solve(string& s) {\n  int n = s.length();\n  vector<int> dp(n, INT_MAX);\n  dp[0] = 0;\n  for (int i = 1; i < n; i++) {\n    bool isPalindrome = true;\n    for (int j = 0; j < i; j++) {\n      if (s[j] != s[i]) {\n        isPalindrome = false;\n      }\n    }\n    if (isPalindrome) {\n      dp[i] = dp[i - 1] + 1;\n    } else {\n      dp[i] = dp[i - 1] + 2;\n    }\n  }\n  return dp[n - 1];\n}\n\nint main() {\n  string s;\n  cin >> s;\n  int n = s.length();\n  cout << solve(s) << endl;\n  return 0;\n}\n", "testcases": [{"input": "3\n1 2 1", "output": "1"}, {"input": "3\n1 2 3", "output": "3"}, {"input": "7\n1 4 4 2 3 2 1", "output": "2"}, {"input": "1\n1", "output": "1"}, {"input": "2\n1 1", "output": "1"}, {"input": "2\n1 2", "output": "2"}, {"input": "8\n1 2 1 3 4 1 2 1", "output": "2"}, {"input": "50\n5 7 5 10 7 9 1 9 10 2 8 3 5 7 3 10 2 3 7 6 2 7 1 2 2 2 4 7 3 5 8 3 4 4 1 6 7 10 5 4 8 1 9 5 5 3 4 4 8 3", "output": "21"}, {"input": "50\n13 17 20 5 14 19 4 17 9 13 10 19 16 13 17 2 18 3 1 9 19 4 19 10 17 12 16 20 10 11 15 10 3 19 8 6 2 8 9 15 13 7 8 8 5 8 15 18 9 4", "output": "28"}, {"input": "50\n22 19 14 22 20 11 16 28 23 15 3 23 6 16 30 15 15 10 24 28 19 19 22 30 28 1 27 12 12 14 17 30 17 26 21 26 27 1 11 23 9 30 18 19 17 29 11 20 29 24", "output": "25"}, {"input": "50\n30 17 31 15 10 3 39 36 5 29 16 11 31 2 38 1 32 40 7 15 39 34 24 11 4 23 9 35 39 32 4 5 14 37 10 34 11 33 30 14 4 34 23 10 34 34 26 34 26 16", "output": "36"}, {"input": "50\n19 25 46 17 1 41 50 19 7 1 43 8 19 38 42 32 38 22 8 5 5 31 29 35 43 12 23 48 40 29 30 9 46 3 39 24 36 36 32 22 21 29 43 33 36 49 48 22 47 37", "output": "36"}, {"input": "6\n1 2 1 1 3 1", "output": "2"}, {"input": "500\n287 89 480 392 176 228 41 484 160 427 133 85 283 480 472 285 80 316 100 202 363 202 100 316 80 285 169 153 500 269 322 400 400 322 269 500 153 169 125 369 75 344 313 310 420 398 209 44 407 373 220 31 121 320 12 12 320 121 31 220 373 407 44 209 398 420 310 313 344 75 369 125 472 480 283 85 133 427 51 210 48 425 67 40 168 411 187 107 229 64 173 15 192 269 424 424 269 192 15 173 64 229 107 109 5 152 419 429 276 197 119 350 497 222 143 168 143 222 497 350 119 197 276 429 419 152 5 109 187 411 168 331 312 ...", "output": "23"}], "language": "cpp"}, "prompt": "B. Zuma\ntime limit per test\n2 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nGenos recently installed the game Zuma on his phone. In Zuma there exists a line of n gemstones, the i-th of which has color ci. The goal of the game is to destroy all the gemstones in the line as quickly as possible.\nIn one second, Genos is able to choose exactly one continuous substring of colored gemstones that is a palindrome and remove it from the line. After the substring is removed, the remaining gemstones shift to form a solid line again. What is the minimum number of seconds needed to destroy the entire line?\nLet us remind, that the string (or substring) is called palindrome, if it reads same backwards or forward. In our case this means the color of the first gemstone is equal to the color of the last one, the color of the second gemstone is equal to the color of the next to last and so on.\nInput\nThe first line of input contains a single integer n (1 <= n <= 500) - the number of gemstones.\nThe second line contains n space-separated integers, the i-th of which is ci (1 <= ci <= n) - the color of the i-th gemstone in a line.\nOutput\nPrint a single integer - the minimum number of seconds needed to destroy the entire line.\n", "generation": "int solve(string& s) {\n  int n = s.length();\n  vector<int> dp(n, INT_MAX);\n  dp[0] = 0;\n  for (int i = 1; i < n; i++) {\n    bool isPalindrome = true;\n    for (int j = 0; j < i; j++) {\n      if (s[j] != s[i]) {\n        isPalindrome = false;\n      }\n    }\n    if (isPalindrome) {\n      dp[i] = dp[i - 1] + 1;\n    } else {\n      dp[i] = dp[i - 1] + 2;\n    }\n  }\n  return dp[n - 1];\n}\n\nint main() {\n  string s;\n  cin >> s;\n  int n = s.length();\n  cout << solve(s) << endl;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp:1:11: error: \u2018string\u2019 was not declared in this scope\n    1 | int solve(string& s) {\n      |           ^~~~~~\ntest.cpp:1:19: error: \u2018s\u2019 was not declared in this scope\n    1 | int solve(string& s) {\n      |                   ^\ntest.cpp: In function \u2018int main()\u2019:\ntest.cpp:22:3: error: \u2018string\u2019 was not declared in this scope\n   22 |   string s;\n      |   ^~~~~~\ntest.cpp:23:3: error: \u2018cin\u2019 was not declared in this scope\n   23 |   cin >> s;\n      |   ^~~\ntest.cpp:23:10: error: \u2018s\u2019 was not declared in this scope\n   23 |   cin >> s;\n      |          ^\ntest.cpp:25:3: error: \u2018cout\u2019 was not declared in this scope\n   25 |   cout << solve(s) << endl;\n      |   ^~~~\ntest.cpp:25:18: error: \u2018solve\u2019 cannot be used as a function\n   25 |   cout << solve(s) << endl;\n      |                  ^\ntest.cpp:25:23: error: \u2018endl\u2019 was not declared in this scope\n   25 |   cout << solve(s) << endl;\n      |                       ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/139", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> powerTree(vector<int> &v, int p, int n) {\n  vector<int> res(n);\n  vector<vector<int>> g(n);\n  g[0].push_back(1);\n  g[1].push_back(v[1]);\n  for(int i = 2; i <= n; i++) {\n    g[i].push_back(v[i]);\n    g[i].insert(g[p].begin(), g[p].end());\n  }\n  for(int i = 0; i < n; i++) {\n    res[i] = 0;\n    for(int j = 0; j < g[i].size(); j++) {\n      res[i] += g[g[i][j]] * g[g[i][j]];\n    }\n  }\n  return res;\n}\n\nint main() {\n  int v1, q;\n  cin >> v1;\n  cin >> q;\n\n  vector<int> v(v1);\n  cin >> v;\n\n  vector<int> res = powerTree(v, 0, v1);\n\n  for(int i = 0; i < q; i++) {\n    int type, u;\n    cin >> type;\n    cin >> u;\n\n    if(type == 1) {\n      int vi;\n      cin >> vi;\n      v.push_back(vi);\n      g[u].push_back(v.size());\n    } else {\n      cout << res[u] << endl;\n    }\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "2 5\n1 1 3\n1 2 5\n1 3 7\n1 4 11\n2 1", "output": "344"}, {"input": "5 5\n1 1 4\n1 2 3\n2 2\n1 2 7\n2 1", "output": "14\n94"}, {"input": "999999999 2\n2 1\n2 1", "output": "999999999\n999999999"}], "language": "cpp"}, "prompt": "D. Power Tree\ntime limit per test\n3.5 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nGenos and Saitama went shopping for Christmas trees. However, a different type of tree caught their attention, the exalted Power Tree.\nA Power Tree starts out as a single root vertex indexed 1. A Power Tree grows through a magical phenomenon known as an update. In an update, a single vertex is added to the tree as a child of some other vertex.\nEvery vertex in the tree (the root and all the added vertices) has some value vi associated with it. The power of a vertex is defined as the strength of the multiset composed of the value associated with this vertex (vi) and the powers of its direct children. The strength of a multiset is defined as the sum of all elements in the multiset multiplied by the number of elements in it. Or in other words for some multiset S:\nSaitama knows the updates that will be performed on the tree, so he decided to test Genos by asking him queries about the tree during its growth cycle.\nAn update is of the form 1 p v, and adds a new vertex with value v as a child of vertex p.\nA query is of the form 2 u, and asks for the power of vertex u.\nPlease help Genos respond to these queries modulo 109 + 7.\nInput\nThe first line of the input contains two space separated integers v1 and q (1 <= v1 < 109, 1 <= q <= 200 000) - the value of vertex 1 and the total number of updates and queries respectively.\nThe next q lines contain the updates and queries. Each of them has one of the following forms:\n1 pi vi, if these line describes an update. The index of the added vertex is equal to the smallest positive integer not yet used as an index in the tree. It is guaranteed that pi is some already existing vertex and 1 <= vi < 109.\n2 ui, if these line describes a query. It is guaranteed ui will exist in the tree.\nIt is guaranteed that the input will contain at least one query.\nOutput\nFor each query, print out the power of the given vertex modulo 109 + 7.\n", "generation": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> powerTree(vector<int> &v, int p, int n) {\n  vector<int> res(n);\n  vector<vector<int>> g(n);\n  g[0].push_back(1);\n  g[1].push_back(v[1]);\n  for(int i = 2; i <= n; i++) {\n    g[i].push_back(v[i]);\n    g[i].insert(g[p].begin(), g[p].end());\n  }\n  for(int i = 0; i < n; i++) {\n    res[i] = 0;\n    for(int j = 0; j < g[i].size(); j++) {\n      res[i] += g[g[i][j]] * g[g[i][j]];\n    }\n  }\n  return res;\n}\n\nint main() {\n  int v1, q;\n  cin >> v1;\n  cin >> q;\n\n  vector<int> v(v1);\n  cin >> v;\n\n  vector<int> res = powerTree(v, 0, v1);\n\n  for(int i = 0; i < q; i++) {\n    int type, u;\n    cin >> type;\n    cin >> u;\n\n    if(type == 1) {\n      int vi;\n      cin >> vi;\n      v.push_back(vi);\n      g[u].push_back(v.size());\n    } else {\n      cout << res[u] << endl;\n    }\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018std::vector<int> powerTree(std::vector<int>&, int, int)\u2019:\ntest.cpp:14:41: error: no matching function for call to \u2018std::vector<int>::insert(std::vector<int>::iterator, std::vector<int>::iterator)\u2019\n   14 |     g[i].insert(g[p].begin(), g[p].end());\n      |                                         ^\nIn file included from /usr/include/c++/9/vector:72,\n                 from test.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:130:5: note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp, _Alloc>::const_iterator, const value_type&) [with _Tp = int; _Alloc = std::allocator<int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer = int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >; typename __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const int*; std::vector<_Tp, _Alloc>::value_type = int]\u2019\n  130 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/vector.tcc:132:57: note:   no known conversion for argument 2 from \u2018std::vector<int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<int*, std::vector<int> >\u2019} to \u2018const value_type&\u2019 {aka \u2018const int&\u2019}\n  132 |     insert(const_iterator __position, const value_type& __x)\n      |                                       ~~~~~~~~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/vector:67,\n                 from test.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1290:7: note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp, _Alloc>::const_iterator, std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = int; _Alloc = std::allocator<int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer = int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >; typename __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const int*; std::vector<_Tp, _Alloc>::value_type = int]\u2019\n 1290 |       insert(const_iterator __position, value_type&& __x)\n      |       ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1290:54: note:   no known conversion for argument 2 from \u2018std::vector<int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<int*, std::vector<int> >\u2019} to \u2018std::vector<int>::value_type&&\u2019 {aka \u2018int&&\u2019}\n 1290 |       insert(const_iterator __position, value_type&& __x)\n      |                                         ~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1307:7: note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp, _Alloc>::const_iterator, std::initializer_list<_Tp>) [with _Tp = int; _Alloc = std::allocator<int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer = int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >; typename __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const int*]\u2019\n 1307 |       insert(const_iterator __position, initializer_list<value_type> __l)\n      |       ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1307:70: note:   no known conversion for argument 2 from \u2018std::vector<int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<int*, std::vector<int> >\u2019} to \u2018std::initializer_list<int>\u2019\n 1307 |       insert(const_iterator __position, initializer_list<value_type> __l)\n      |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1332:7: note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp, _Alloc>::const_iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = int; _Alloc = std::allocator<int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer = int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const int*, std::vector<int> >; typename __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const int*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = int]\u2019\n 1332 |       insert(const_iterator __position, size_type __n, const value_type& __x)\n      |       ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1332:7: note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/stl_vector.h:1376:2: note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp, _Alloc>::const_iterator, _InputIterator, _InputIterator) [with _InputIterator = _InputIterator; <template-parameter-2-2> = <template-parameter-1-2>; _Tp = int; _Alloc = std::allocator<int>]\u2019\n 1376 |  insert(const_iterator __position, _InputIterator __first,\n      |  ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1376:2: note:   template argument deduction/substitution failed:\ntest.cpp:14:41: note:   candidate expects 3 arguments, 2 provided\n   14 |     g[i].insert(g[p].begin(), g[p].end());\n      |                                         ^\ntest.cpp:19:28: error: no match for \u2018operator*\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<int> >, std::vector<int> >::value_type\u2019 {aka \u2018std::vector<int>\u2019} and \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<int> >, std::vector<int> >::value_type\u2019 {aka \u2018std::vector<int>\u2019})\n   19 |       res[i] += g[g[i][j]] * g[g[i][j]];\ntest.cpp: In function \u2018int main()\u2019:\ntest.cpp:31:7: error: no match for \u2018operator>>\u2019 (operand types are \u2018std::istream\u2019 {aka \u2018std::basic_istream<char>\u2019} and \u2018std::vector<int>\u2019)\n   31 |   cin >> v;\n      |   ~~~ ^~ ~\n      |   |      |\n      |   |      std::vector<int>\n      |   std::istream {aka std::basic_istream<char>}\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:120:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__istream_type& (*)(std::basic_istream<_CharT, _Traits>::__istream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:120:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__istream_type& (*)(std::basic_istream<char>::__istream_type&)\u2019 {aka \u2018std::basic_istream<char>& (*)(std::basic_istream<char>&)\u2019}\n  120 |       operator>>(__istream_type& (*__pf)(__istream_type&))\n      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:124:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__ios_type& (*)(std::basic_istream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>; std::basic_istream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]\u2019\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:124:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__ios_type& (*)(std::basic_istream<char>::__ios_type&)\u2019 {aka \u2018std::basic_ios<char>& (*)(std::basic_ios<char>&)\u2019}\n  124 |       operator>>(__ios_type& (*__pf)(__ios_type&))\n      |                  ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:131:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:131:30: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::ios_base& (*)(std::ios_base&)\u2019\n  131 |       operator>>(ios_base& (*__pf)(ios_base&))\n      |                  ~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n/usr/include/c++/9/istream:168:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(bool&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  168 |       operator>>(bool& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:168:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018bool&\u2019\n  168 |       operator>>(bool& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:172:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(short int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  172 |       operator>>(short& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:172:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short int&\u2019\n  172 |       operator>>(short& __n);\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:175:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(short unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  175 |       operator>>(unsigned short& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:175:34: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018short unsigned int&\u2019\n  175 |       operator>>(unsigned short& __n)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:179:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(int&) [with _CharT = char; _Traits = std::char_traits<char>]\u2019\n  179 |       operator>>(int& __n);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:179:23: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018int&\u2019\n  179 |       operator>>(int& __n);\n      |                  ~~~~~^~~\n/usr/include/c++/9/istream:182:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  182 |       operator>>(unsigned int& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:182:32: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018unsigned int&\u2019\n  182 |       operator>>(unsigned int& __n)\n      |                  ~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:186:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  186 |       operator>>(long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:186:24: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long int&\u2019\n  186 |       operator>>(long& __n)\n      |                  ~~~~~~^~~\n/usr/include/c++/9/istream:190:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  190 |       operator>>(unsigned long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:190:33: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long unsigned int&\u2019\n  190 |       operator>>(unsigned long& __n)\n      |                  ~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:195:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  195 |       operator>>(long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:195:29: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long int&\u2019\n  195 |       operator>>(long long& __n)\n      |                  ~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:199:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long long unsigned int&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:199:38: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long long unsigned int&\u2019\n  199 |       operator>>(unsigned long long& __n)\n      |                  ~~~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:214:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(float&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  214 |       operator>>(float& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:214:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018float&\u2019\n  214 |       operator>>(float& __f)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:218:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  218 |       operator>>(double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:218:26: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018double&\u2019\n  218 |       operator>>(double& __f)\n      |                  ~~~~~~~~^~~\n/usr/include/c++/9/istream:222:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(long double&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  222 |       operator>>(long double& __f)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:222:31: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018long double&\u2019\n  222 |       operator>>(long double& __f)\n      |                  ~~~~~~~~~~~~~^~~\n/usr/include/c++/9/istream:235:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type& std::basic_istream<_CharT, _Traits>::operator>>(void*&) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type = std::basic_istream<char>]\u2019\n  235 |       operator>>(void*& __p)\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:235:25: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018void*&\u2019\n  235 |       operator>>(void*& __p)\n      |                  ~~~~~~~^~~\n/usr/include/c++/9/istream:259:7: note: candidate: \u2018std::basic_istream<_CharT, _Traits>& std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]\u2019\n  259 |       operator>>(__streambuf_type* __sb);\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:259:36: note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018std::basic_istream<char>::__streambuf_type*\u2019 {aka \u2018std::basic_streambuf<char>*\u2019}\n  259 |       operator>>(__streambuf_type* __sb);\n      |                  ~~~~~~~~~~~~~~~~~~^~~~\nIn file included from /usr/include/c++/9/string:56,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/ostream:38,\n                 from /usr/include/c++/9/iostream:39,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 1466 |     operator>>(basic_istream<_CharT, _Traits>& __in,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1466:5: note:   template argument deduction/substitution failed:\ntest.cpp:31:10: note:   \u2018std::vector<int>\u2019 is not derived from \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\n   31 |   cin >> v;\n      |          ^\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:931:5: note: candidate: \u2018template<class _CharT, class _Traits> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT&)\u2019\n  931 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:931:5: note:   template argument deduction/substitution failed:\ntest.cpp:31:10: note:   deduced conflicting types for parameter \u2018_CharT\u2019 (\u2018char\u2019 and \u2018std::vector<int>\u2019)\n   31 |   cin >> v;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:756:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char&)\u2019\n  756 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:756:5: note:   template argument deduction/substitution failed:\ntest.cpp:31:10: note:   cannot convert \u2018v\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char&\u2019\n   31 |   cin >> v;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:761:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char&)\u2019\n  761 |     operator>>(basic_istream<char, _Traits>& __in, signed char& __c)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:761:5: note:   template argument deduction/substitution failed:\ntest.cpp:31:10: note:   cannot convert \u2018v\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char&\u2019\n   31 |   cin >> v;\n      |          ^\nIn file included from /usr/include/c++/9/istream:991,\n                 from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/bits/istream.tcc:963:5: note: candidate: \u2018template<class _CharT2, class _Traits2> std::basic_istream<_CharT, _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, _CharT2*)\u2019\n  963 |     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/istream.tcc:963:5: note:   template argument deduction/substitution failed:\ntest.cpp:31:10: note:   mismatched types \u2018_CharT2*\u2019 and \u2018std::vector<int>\u2019\n   31 |   cin >> v;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:803:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, unsigned char*)\u2019\n  803 |     operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:803:5: note:   template argument deduction/substitution failed:\ntest.cpp:31:10: note:   cannot convert \u2018v\u2019 (type \u2018std::vector<int>\u2019) to type \u2018unsigned char*\u2019\n   31 |   cin >> v;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:808:5: note: candidate: \u2018template<class _Traits> std::basic_istream<char, _Traits>& std::operator>>(std::basic_istream<char, _Traits>&, signed char*)\u2019\n  808 |     operator>>(basic_istream<char, _Traits>& __in, signed char* __s)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:808:5: note:   template argument deduction/substitution failed:\ntest.cpp:31:10: note:   cannot convert \u2018v\u2019 (type \u2018std::vector<int>\u2019) to type \u2018signed char*\u2019\n   31 |   cin >> v;\n      |          ^\nIn file included from /usr/include/c++/9/iostream:40,\n                 from test.cpp:1:\n/usr/include/c++/9/istream:980:5: note: candidate: \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&)\u2019\n  980 |     operator>>(_Istream&& __is, _Tp&& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/istream:980:5: note:   template argument deduction/substitution failed:\n/usr/include/c++/9/istream: In substitution of \u2018template<class _Istream, class _Tp> typename std::enable_if<std::__and_<std::__not_<std::is_lvalue_reference<_Tp> >, std::__is_convertible_to_basic_istream<_Istream>, std::__is_extractable<typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type, _Tp&&, void> >::value, typename std::__is_convertible_to_basic_istream<_Tp>::__istream_type>::type std::operator>>(_Istream&&, _Tp&&) [with _Istream = std::basic_istream<char>&; _Tp = std::vector<int>&]\u2019:\ntest.cpp:31:10:   required from here\n/usr/include/c++/9/istream:980:5: error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false, std::basic_istream<char>&>\u2019\ntest.cpp:44:7: error: \u2018g\u2019 was not declared in this scope\n   44 |       g[u].push_back(v.size());\n      |       ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/142", "completion_id": 0, "test_suite": {"code": "int solve(string& s) {\n  int n = s.length();\n  vector<int> dp(n, INT_MAX);\n  dp[0] = 0;\n  for (int i = 1; i < n; i++) {\n    bool isPalindrome = true;\n    for (int j = 0; j < i; j++) {\n      if (s[j] != s[i]) {\n        isPalindrome = false;\n      }\n    }\n    if (isPalindrome) {\n      dp[i] = dp[i - 1] + 1;\n    } else {\n      dp[i] = dp[i - 1] + 2;\n    }\n  }\n  return dp[n - 1];\n}\n\nint main() {\n  string s;\n  cin >> s;\n  int n = s.length();\n  cout << solve(s) << endl;\n  return 0;\n}\n", "testcases": [{"input": "3\n1 2 1", "output": "1"}, {"input": "3\n1 2 3", "output": "3"}, {"input": "7\n1 4 4 2 3 2 1", "output": "2"}, {"input": "1\n1", "output": "1"}, {"input": "2\n1 1", "output": "1"}, {"input": "2\n1 2", "output": "2"}, {"input": "8\n1 2 1 3 4 1 2 1", "output": "2"}, {"input": "50\n5 7 5 10 7 9 1 9 10 2 8 3 5 7 3 10 2 3 7 6 2 7 1 2 2 2 4 7 3 5 8 3 4 4 1 6 7 10 5 4 8 1 9 5 5 3 4 4 8 3", "output": "21"}, {"input": "50\n13 17 20 5 14 19 4 17 9 13 10 19 16 13 17 2 18 3 1 9 19 4 19 10 17 12 16 20 10 11 15 10 3 19 8 6 2 8 9 15 13 7 8 8 5 8 15 18 9 4", "output": "28"}, {"input": "50\n22 19 14 22 20 11 16 28 23 15 3 23 6 16 30 15 15 10 24 28 19 19 22 30 28 1 27 12 12 14 17 30 17 26 21 26 27 1 11 23 9 30 18 19 17 29 11 20 29 24", "output": "25"}, {"input": "50\n30 17 31 15 10 3 39 36 5 29 16 11 31 2 38 1 32 40 7 15 39 34 24 11 4 23 9 35 39 32 4 5 14 37 10 34 11 33 30 14 4 34 23 10 34 34 26 34 26 16", "output": "36"}, {"input": "50\n19 25 46 17 1 41 50 19 7 1 43 8 19 38 42 32 38 22 8 5 5 31 29 35 43 12 23 48 40 29 30 9 46 3 39 24 36 36 32 22 21 29 43 33 36 49 48 22 47 37", "output": "36"}, {"input": "6\n1 2 1 1 3 1", "output": "2"}, {"input": "500\n287 89 480 392 176 228 41 484 160 427 133 85 283 480 472 285 80 316 100 202 363 202 100 316 80 285 169 153 500 269 322 400 400 322 269 500 153 169 125 369 75 344 313 310 420 398 209 44 407 373 220 31 121 320 12 12 320 121 31 220 373 407 44 209 398 420 310 313 344 75 369 125 472 480 283 85 133 427 51 210 48 425 67 40 168 411 187 107 229 64 173 15 192 269 424 424 269 192 15 173 64 229 107 109 5 152 419 429 276 197 119 350 497 222 143 168 143 222 497 350 119 197 276 429 419 152 5 109 187 411 168 331 312 ...", "output": "23"}], "language": "cpp"}, "prompt": "D. Zuma\ntime limit per test\n2 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nGenos recently installed the game Zuma on his phone. In Zuma there exists a line of n gemstones, the i-th of which has color ci. The goal of the game is to destroy all the gemstones in the line as quickly as possible.\nIn one second, Genos is able to choose exactly one continuous substring of colored gemstones that is a palindrome and remove it from the line. After the substring is removed, the remaining gemstones shift to form a solid line again. What is the minimum number of seconds needed to destroy the entire line?\nLet us remind, that the string (or substring) is called palindrome, if it reads same backwards or forward. In our case this means the color of the first gemstone is equal to the color of the last one, the color of the second gemstone is equal to the color of the next to last and so on.\nInput\nThe first line of input contains a single integer n (1 <= n <= 500) - the number of gemstones.\nThe second line contains n space-separated integers, the i-th of which is ci (1 <= ci <= n) - the color of the i-th gemstone in a line.\nOutput\nPrint a single integer - the minimum number of seconds needed to destroy the entire line.\n", "generation": "int solve(string& s) {\n  int n = s.length();\n  vector<int> dp(n, INT_MAX);\n  dp[0] = 0;\n  for (int i = 1; i < n; i++) {\n    bool isPalindrome = true;\n    for (int j = 0; j < i; j++) {\n      if (s[j] != s[i]) {\n        isPalindrome = false;\n      }\n    }\n    if (isPalindrome) {\n      dp[i] = dp[i - 1] + 1;\n    } else {\n      dp[i] = dp[i - 1] + 2;\n    }\n  }\n  return dp[n - 1];\n}\n\nint main() {\n  string s;\n  cin >> s;\n  int n = s.length();\n  cout << solve(s) << endl;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp:1:11: error: \u2018string\u2019 was not declared in this scope\n    1 | int solve(string& s) {\n      |           ^~~~~~\ntest.cpp:1:19: error: \u2018s\u2019 was not declared in this scope\n    1 | int solve(string& s) {\n      |                   ^\ntest.cpp: In function \u2018int main()\u2019:\ntest.cpp:22:3: error: \u2018string\u2019 was not declared in this scope\n   22 |   string s;\n      |   ^~~~~~\ntest.cpp:23:3: error: \u2018cin\u2019 was not declared in this scope\n   23 |   cin >> s;\n      |   ^~~\ntest.cpp:23:10: error: \u2018s\u2019 was not declared in this scope\n   23 |   cin >> s;\n      |          ^\ntest.cpp:25:3: error: \u2018cout\u2019 was not declared in this scope\n   25 |   cout << solve(s) << endl;\n      |   ^~~~\ntest.cpp:25:18: error: \u2018solve\u2019 cannot be used as a function\n   25 |   cout << solve(s) << endl;\n      |                  ^\ntest.cpp:25:23: error: \u2018endl\u2019 was not declared in this scope\n   25 |   cout << solve(s) << endl;\n      |                       ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/143", "completion_id": 0, "test_suite": {"code": "int hammingDistanceSum(string& a, string& b) {\n  int ans = 0;\n  for (int i = 0; i <= b.length() - a.length(); i++) {\n    string subStr = b.substr(i, a.length());\n    int distance = 0;\n    for (int j = 0; j < a.length(); j++) {\n      if (a[j] != subStr[j]) {\n        distance++;\n      }\n    }\n    ans += distance;\n  }\n  return ans;\n}\n", "testcases": [{"input": "01\n00111", "output": "3"}, {"input": "0011\n0110", "output": "2"}, {"input": "0\n0", "output": "0"}, {"input": "1\n0", "output": "1"}, {"input": "0\n1", "output": "1"}, {"input": "1\n1", "output": "0"}, {"input": "1001101001101110101101000\n01111000010011111111110010001101000100011110101111", "output": "321"}, {"input": "1110010001000101001011111\n00011011000000100001010000010100110011010001111010", "output": "316"}], "language": "cpp"}, "prompt": "B. Hamming Distance Sum\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nGenos needs your help. He was asked to solve the following programming problem by Saitama:\nThe length of some string s is denoted |s|. The Hamming distance between two strings s and t of equal length is defined as , where si is the i-th character of s and ti is the i-th character of t. For example, the Hamming distance between string \"0011\" and string \"0110\" is |0 - 0| + |0 - 1| + |1 - 1| + |1 - 0| = 0 + 1 + 0 + 1 = 2.\nGiven two binary strings a and b, find the sum of the Hamming distances between a and all contiguous substrings of b of length |a|.\nInput\nThe first line of the input contains binary string a (1 <= |a| <= 200 000).\nThe second line of the input contains binary string b (|a| <= |b| <= 200 000).\nBoth strings are guaranteed to consist of characters '0' and '1' only.\nOutput\nPrint a single integer - the sum of Hamming distances between a and all contiguous substrings of b of length |a|.\n", "generation": "int hammingDistanceSum(string& a, string& b) {\n  int ans = 0;\n  for (int i = 0; i <= b.length() - a.length(); i++) {\n    string subStr = b.substr(i, a.length());\n    int distance = 0;\n    for (int j = 0; j < a.length(); j++) {\n      if (a[j] != subStr[j]) {\n        distance++;\n      }\n    }\n    ans += distance;\n  }\n  return ans;\n}\n", "result": "failed: compilation error: test.cpp:1:24: error: \u2018string\u2019 was not declared in this scope\n    1 | int hammingDistanceSum(string& a, string& b) {\n      |                        ^~~~~~\ntest.cpp:1:32: error: \u2018a\u2019 was not declared in this scope\n    1 | int hammingDistanceSum(string& a, string& b) {\n      |                                ^\ntest.cpp:1:35: error: \u2018string\u2019 was not declared in this scope\n    1 | int hammingDistanceSum(string& a, string& b) {\n      |                                   ^~~~~~\ntest.cpp:1:43: error: \u2018b\u2019 was not declared in this scope\n    1 | int hammingDistanceSum(string& a, string& b) {\n      |                                           ^\ntest.cpp:1:44: error: expression list treated as compound expression in initializer [-fpermissive]\n    1 | int hammingDistanceSum(string& a, string& b) {\n      |                                            ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/144", "completion_id": 0, "test_suite": {"code": "int solve(vector<int>& a, vector<int>& b) {\n  int n = a.size();\n  vector<int> dp(n, INT_MAX);\n  dp[0] = 0;\n  for (int i = 0; i < n - 1; i++) {\n    for (int j = 0; j < i + 1; j++) {\n      if (dp[j] != INT_MAX && a[i] - a[j] <= b[j]) {\n        dp[i] = min(dp[i], dp[j] + 1);\n      }\n    }\n  }\n  return dp[n - 1];\n}\n", "testcases": [{"input": "4\n1 9\n3 1\n6 1\n7 4", "output": "1"}, {"input": "7\n1 1\n2 1\n3 1\n4 1\n5 1\n6 1\n7 1", "output": "3"}, {"input": "1\n0 1", "output": "0"}, {"input": "1\n0 1000000", "output": "0"}, {"input": "1\n1000000 1000000", "output": "0"}, {"input": "100000\n0 1000000\n1 1000000\n2 1000000\n3 1000000\n4 1000000\n5 1000000\n6 1000000\n7 1000000\n8 1000000\n9 1000000\n10 1000000\n11 1000000\n12 1000000\n13 1000000\n14 1000000\n15 1000000\n16 1000000\n17 1000000\n18 1000000\n19 1000000\n20 1000000\n21 1000000\n22 1000000\n23 1000000\n24 1000000\n25 1000000\n26 1000000\n27 1000000\n28 1000000\n29 1000000\n30 1000000\n31 1000000\n32 1000000\n33 1000000\n34 1000000\n35 1000000\n36 1000000\n37 1000000\n38 1000000\n39 1000000\n40 1000000\n41 1000000\n42 100000...", "output": "99999"}, {"input": "7\n1 1\n2 1\n3 1\n4 1\n5 1\n6 6\n7 7", "output": "4"}, {"input": "5\n1 1\n3 1\n5 1\n7 10\n8 10", "output": "2"}, {"input": "11\n110 90\n100 70\n90 10\n80 10\n70 1\n60 1\n50 10\n40 1\n30 1\n10 1\n20 1", "output": "4"}], "language": "cpp"}, "prompt": "C. Chain Reaction\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nThere are n beacons located at distinct positions on a number line. The i-th beacon has position ai and power level bi. When the i-th beacon is activated, it destroys all beacons to its left (direction of decreasing coordinates) within distance bi inclusive. The beacon itself is not destroyed however. Saitama will activate the beacons one at a time from right to left. If a beacon is destroyed, it cannot be activated.\nSaitama wants Genos to add a beacon strictly to the right of all the existing beacons, with any position and any power level, such that the least possible number of beacons are destroyed. Note that Genos's placement of the beacon means it will be the first beacon activated. Help Genos by finding the minimum number of beacons that could be destroyed.\nInput\nThe first line of input contains a single integer n (1 <= n <= 100 000) - the initial number of beacons.\nThe i-th of next n lines contains two integers ai and bi (0 <= ai <= 1 000 000, 1 <= bi <= 1 000 000) - the position and power level of the i-th beacon respectively. No two beacons will have the same position, so ai != aj if i != j.\nOutput\nPrint a single integer - the minimum number of beacons that could be destroyed if exactly one beacon is added.\n", "generation": "int solve(vector<int>& a, vector<int>& b) {\n  int n = a.size();\n  vector<int> dp(n, INT_MAX);\n  dp[0] = 0;\n  for (int i = 0; i < n - 1; i++) {\n    for (int j = 0; j < i + 1; j++) {\n      if (dp[j] != INT_MAX && a[i] - a[j] <= b[j]) {\n        dp[i] = min(dp[i], dp[j] + 1);\n      }\n    }\n  }\n  return dp[n - 1];\n}\n", "result": "failed: compilation error: test.cpp:1:11: error: \u2018vector\u2019 was not declared in this scope\n    1 | int solve(vector<int>& a, vector<int>& b) {\n      |           ^~~~~~\ntest.cpp:1:18: error: expected primary-expression before \u2018int\u2019\n    1 | int solve(vector<int>& a, vector<int>& b) {\n      |                  ^~~\ntest.cpp:1:27: error: \u2018vector\u2019 was not declared in this scope\n    1 | int solve(vector<int>& a, vector<int>& b) {\n      |                           ^~~~~~\ntest.cpp:1:34: error: expected primary-expression before \u2018int\u2019\n    1 | int solve(vector<int>& a, vector<int>& b) {\n      |                                  ^~~\ntest.cpp:1:41: error: expression list treated as compound expression in initializer [-fpermissive]\n    1 | int solve(vector<int>& a, vector<int>& b) {\n      |                                         ^\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/145", "completion_id": 0, "test_suite": {"code": "int solve(int n, int s, vector<pair<int, int>>& v) {\n  vector<int> q(n);\n  for (int i = 0; i < n; i++) {\n    q[i] = v[i].second - v[i].first;\n  }\n  sort(q.begin(), q.end());\n  int time = 0;\n  for (int i = 0; i < n; i++) {\n    time += q[i];\n  }\n  return time;\n}\n", "testcases": [{"input": "3 7\n2 1\n3 8\n5 2", "output": "11"}, {"input": "5 10\n2 77\n3 33\n8 21\n9 12\n10 64", "output": "79"}, {"input": "1 1000\n1000 1000", "output": "2000"}, {"input": "1 1\n1 1", "output": "2"}, {"input": "1 1000\n1 1", "output": "1000"}, {"input": "1 1000\n1 1000", "output": "1001"}, {"input": "100 50\n39 685\n17 848\n33 378\n42 994\n44 597\n28 595\n27 111\n9 115\n3 91\n43 400\n33 337\n36 414\n1 518\n10 634\n3 714\n42 670\n4 960\n42 273\n29 625\n12 692\n10 841\n4 285\n36 969\n37 568\n12 4\n4 897\n1 170\n6 579\n42 47\n10 68\n20 805\n44 94\n47 486\n18 240\n8 299\n9 35\n36 728\n29 630\n16 237\n14 499\n13 462\n29 959\n41 548\n5 326\n8 643\n35 140\n16 314\n21 741\n46 973\n1 278\n32 566\n21 121\n19 776\n38 165\n15 83\n38 92\n23 827\n46 148\n30 241\n39 943\n39 208\n12 970\n12 209\n39 97\n12 872\n32 394...", "output": "1036"}, {"input": "100 50\n4 329\n37 563\n4 283\n13 50\n49 106\n33 13\n13 6\n29 135\n34 603\n34 539\n20 844\n6 556\n27 265\n22 565\n38 20\n15 638\n22 469\n50 358\n11 198\n13 475\n35 328\n26 154\n50 868\n32 320\n15 414\n16 209\n32 561\n15 337\n42 773\n43 182\n22 20\n27 116\n42 170\n9 545\n39 453\n36 225\n9 222\n50 119\n19 502\n9 214\n39 681\n22 89\n1 414\n3 899\n21 354\n45 107\n30 180\n2 549\n11 664\n6 476\n1 485\n15 519\n1 888\n26 204\n13 428\n11 451\n45 325\n39 872\n14 516\n37 661\n6 142\n16 269\n11 105\n46 819\n46 801\n42 ...", "output": "918"}, {"input": "100 50\n26 267\n26 653\n18 552\n5 390\n28 755\n20 292\n49 795\n44 648\n37 178\n38 471\n44 432\n11 729\n17 17\n29 573\n18 18\n33 339\n11 792\n19 624\n40 489\n13 46\n8 336\n44 41\n25 285\n17 611\n9 291\n45 384\n45 601\n30 715\n14 506\n40 432\n38 549\n37 192\n24 29\n11 528\n36 681\n43 601\n40 53\n12 218\n26 752\n28 18\n18 492\n45 390\n10 482\n47 769\n17 619\n33 559\n38 583\n42 129\n34 346\n46 428\n48 522\n3 9\n32 771\n26 535\n19 723\n46 661\n28 686\n43 200\n25 331\n30 347\n2 228\n43 698\n8 538\n38 758\n12 528...", "output": "844"}, {"input": "100 50\n32 151\n4 127\n38 482\n49 574\n29 246\n13 155\n20 477\n23 467\n1 432\n36 343\n29 97\n19 597\n42 231\n50 285\n22 502\n25 452\n39 132\n10 436\n39 582\n1 498\n4 241\n24 423\n29 329\n33 88\n31 165\n7 230\n23 184\n6 367\n27 562\n50 139\n28 398\n44 543\n26 257\n16 86\n30 345\n15 435\n2 212\n20 504\n27 164\n5 242\n42 114\n28 290\n31 400\n19 517\n4 454\n29 141\n45 85\n1 391\n38 519\n34 427\n21 397\n29 191\n32 423\n32 204\n42 104\n13 591\n30 304\n31 449\n2 264\n29 232\n31 289\n38 244\n6 301\n46 27\n35 205\n...", "output": "623"}, {"input": "100 1000\n120 4\n757 1\n620 2\n16 5\n712 1\n814 2\n103 10\n636 3\n113 8\n876 2\n705 2\n812 9\n136 8\n574 3\n976 6\n718 2\n73 9\n359 5\n503 9\n870 3\n521 3\n669 1\n332 8\n850 7\n647 3\n685 8\n261 6\n350 9\n302 5\n436 10\n373 1\n711 6\n499 2\n607 3\n475 1\n418 3\n316 9\n618 2\n866 8\n941 3\n566 10\n27 7\n41 10\n540 9\n477 5\n975 2\n316 8\n252 7\n567 2\n843 2\n136 4\n19 2\n160 9\n700 6\n122 9\n85 9\n38 3\n15 8\n79 7\n223 7\n613 4\n456 2\n828 7\n143 4\n179 5\n797 4\n374 3\n305 8\n653 6\n571 7\n211 8\n642 6\n94...", "output": "1000"}, {"input": "100 1000\n518 20\n192 4\n868 2\n159 8\n334 7\n648 19\n859 1\n468 4\n585 5\n866 3\n800 18\n349 2\n269 3\n747 15\n72 9\n384 4\n614 2\n689 6\n815 16\n378 11\n225 4\n16 5\n931 19\n112 8\n227 20\n22 3\n977 4\n175 20\n778 17\n648 19\n325 15\n724 11\n545 10\n625 14\n454 10\n323 4\n895 10\n912 7\n102 1\n299 14\n648 12\n386 1\n581 3\n640 3\n529 3\n699 13\n286 14\n855 4\n360 19\n241 10\n911 18\n28 10\n913 9\n688 3\n181 17\n414 17\n128 6\n229 17\n796 11\n984 11\n197 11\n774 19\n386 15\n553 2\n346 17\n111 12\n164 2\n3...", "output": "1000"}, {"input": "100 1000\n108 18\n219 11\n820 9\n7 5\n956 5\n482 16\n912 15\n299 16\n58 2\n559 25\n895 4\n485 1\n802 1\n920 29\n360 26\n49 21\n859 28\n827 5\n128 10\n589 24\n928 11\n364 4\n826 25\n974 30\n104 21\n359 19\n501 19\n1000 18\n446 6\n667 13\n982 15\n33 4\n992 3\n348 12\n136 23\n125 27\n986 21\n799 7\n338 5\n362 19\n435 29\n745 30\n713 9\n332 23\n286 26\n319 25\n664 18\n161 19\n153 9\n934 19\n686 15\n334 28\n177 19\n971 23\n728 23\n847 21\n515 21\n636 10\n217 3\n850 28\n76 8\n284 1\n944 15\n963 7\n320 16\n618 12...", "output": "1018"}, {"input": "100 1000\n506 17\n462 7\n877 19\n150 39\n282 27\n124 30\n668 32\n643 24\n338 34\n252 28\n182 34\n725 23\n232 30\n94 7\n753 38\n611 17\n296 1\n157 4\n440 25\n801 28\n824 26\n815 8\n722 7\n132 11\n876 6\n400 14\n218 23\n825 29\n922 8\n687 22\n126 20\n46 21\n38 15\n967 35\n819 28\n630 18\n565 7\n581 27\n470 4\n720 40\n517 38\n912 34\n356 32\n432 12\n851 24\n43 30\n635 15\n660 27\n139 2\n627 27\n653 12\n343 10\n634 10\n447 31\n786 5\n688 30\n94 4\n850 6\n638 31\n611 12\n763 29\n90 14\n694 15\n373 25\n191 26\n9...", "output": "1002"}, {"input": "100 1000\n608 5\n194 14\n533 16\n998 34\n904 38\n253 7\n424 28\n474 38\n810 1\n946 13\n278 41\n965 12\n365 25\n267 22\n849 35\n276 44\n541 21\n487 47\n49 30\n500 44\n231 32\n162 17\n617 14\n586 33\n456 28\n737 48\n38 36\n650 3\n590 4\n706 11\n78 24\n59 44\n484 12\n985 4\n206 1\n536 27\n656 4\n468 8\n410 49\n79 41\n600 39\n270 4\n192 49\n828 20\n607 6\n766 20\n117 43\n966 44\n932 28\n513 19\n133 33\n352 48\n899 32\n731 5\n37 11\n121 34\n480 16\n65 35\n59 23\n76 46\n346 50\n600 44\n252 23\n271 1\n357 43\n142...", "output": "1032"}, {"input": "100 1000\n441 28\n526 220\n672 488\n950 384\n396 330\n794 259\n603 500\n639 14\n332 559\n984 557\n339 299\n51 67\n456 27\n970 35\n112 406\n587 552\n587 520\n185 262\n708 286\n752 70\n637 350\n620 22\n344 357\n155 503\n510 310\n310 381\n972 378\n749 163\n753 131\n552 292\n794 559\n790 51\n847 83\n674 84\n947 374\n161 552\n247 25\n21 221\n311 406\n189 60\n883 302\n251 122\n512 121\n228 351\n45 266\n788 242\n415 153\n831 194\n749 167\n881 542\n284 293\n991 463\n436 341\n52 321\n65 447\n773 262\n155 46\n517 15...", "output": "1541"}, {"input": "100 1000\n504 242\n100 334\n707 138\n779 3\n878 196\n340 467\n838 395\n809 642\n887 25\n725 669\n128 416\n554 508\n541 490\n774 574\n772 449\n969 696\n416 276\n120 317\n138 652\n878 179\n354 135\n566 1\n482 16\n554 531\n700 562\n327 238\n159 121\n406 477\n270 680\n813 245\n608 349\n444 345\n41 375\n369 379\n472 235\n876 286\n831 124\n19 173\n79 368\n543 554\n905 600\n30 581\n589 532\n535 217\n199 508\n921 174\n341 176\n388 38\n274 305\n278 575\n215 98\n431 378\n845 100\n373 364\n43 690\n817 611\n646 229\n6...", "output": "1665"}, {"input": "100 1000\n270 152\n458 48\n39 380\n609 126\n871 70\n591 571\n73 91\n874 767\n442 291\n465 677\n326 621\n161 141\n26 553\n281 504\n432 684\n350 335\n350 143\n760 477\n55 113\n603 176\n856 432\n407 380\n212 788\n953 472\n185 517\n344 190\n937 655\n872 495\n978 325\n586 397\n718 444\n98 640\n940 171\n64 466\n293 593\n592 115\n120 527\n234 629\n38 522\n194 752\n734 587\n809 544\n962 638\n842 482\n841 438\n950 795\n267 487\n841 81\n96 43\n378 399\n953 606\n167 390\n445 258\n991 518\n830 636\n670 553\n34 501\n48...", "output": "1745"}, {"input": "100 1000\n333 454\n329 870\n882 334\n438 140\n56 536\n434 75\n12 786\n43 900\n806 261\n309 385\n116 734\n663 286\n111 619\n492 443\n796 331\n324 175\n180 3\n992 728\n676 270\n729 181\n166 822\n353 559\n158 348\n352 100\n671 372\n361 151\n124 590\n234 601\n198 175\n144 142\n20 734\n48 538\n135 375\n759 653\n818 759\n604 144\n512 126\n936 789\n509 80\n549 138\n52 73\n588 399\n744 745\n149 547\n483 672\n83 527\n490 599\n101 220\n622 469\n967 828\n988 215\n903 301\n454 217\n16 373\n321 782\n714 207\n717 680\n7...", "output": "1795"}, {"input": "100 1000\n733 457\n339 328\n949 597\n37 78\n513 226\n308 256\n782 918\n337 415\n716 500\n555 679\n863 764\n218 394\n287 153\n480 20\n496 482\n99 944\n443 769\n469 665\n220 383\n956 146\n530 382\n698 287\n441 853\n645 762\n731 632\n432 23\n483 998\n377 623\n33 665\n625 481\n113 473\n303 509\n539 217\n373 727\n252 481\n546 666\n892 874\n614 962\n63 309\n81 169\n508 557\n780 675\n601 80\n606 937\n20 234\n360 290\n275 617\n642 758\n902 578\n556 777\n463 635\n829 662\n865 807\n448 953\n518 981\n882 644\n512 313...", "output": "1766"}, {"input": "2 7\n6 3\n1 5", "output": "9"}, {"input": "2 100\n99 2\n1 10", "output": "101"}, {"input": "5 5\n1 1\n2 1\n3 1\n4 1\n5 1", "output": "6"}, {"input": "3 7\n1 6\n5 5\n6 1", "output": "10"}, {"input": "2 100\n4 100\n7 99", "output": "106"}, {"input": "2 10\n9 3\n1 4", "output": "12"}, {"input": "2 5\n4 4\n5 4", "output": "9"}, {"input": "2 10\n9 10\n6 11", "output": "19"}, {"input": "2 100\n99 9\n1 10", "output": "108"}, {"input": "2 7\n3 5\n7 4", "output": "11"}, {"input": "4 4\n4 6\n4 8\n1 7\n2 9", "output": "12"}, {"input": "2 1000\n1 2\n1000 1", "output": "1001"}, {"input": "2 20\n1 1\n2 2", "output": "20"}, {"input": "2 20\n10 10\n19 9", "output": "28"}], "language": "cpp"}, "prompt": "A. Saitama Destroys Hotel\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nSaitama accidentally destroyed a hotel again. To repay the hotel company, Genos has volunteered to operate an elevator in one of its other hotels. The elevator is special - it starts on the top floor, can only move down, and has infinite capacity. Floors are numbered from 0 to s and elevator initially starts on floor s at time 0.\nThe elevator takes exactly 1 second to move down exactly 1 floor and negligible time to pick up passengers. Genos is given a list detailing when and on which floor passengers arrive. Please determine how long in seconds it will take Genos to bring all passengers to floor 0.\nInput\nThe first line of input contains two integers n and s (1 <= n <= 100, 1 <= s <= 1000) - the number of passengers and the number of the top floor respectively.\nThe next n lines each contain two space-separated integers fi and ti (1 <= fi <= s, 1 <= ti <= 1000) - the floor and the time of arrival in seconds for the passenger number i.\nOutput\nPrint a single integer - the minimum amount of time in seconds needed to bring all the passengers to floor 0.\n", "generation": "int solve(int n, int s, vector<pair<int, int>>& v) {\n  vector<int> q(n);\n  for (int i = 0; i < n; i++) {\n    q[i] = v[i].second - v[i].first;\n  }\n  sort(q.begin(), q.end());\n  int time = 0;\n  for (int i = 0; i < n; i++) {\n    time += q[i];\n  }\n  return time;\n}\n", "result": "failed: compilation error: test.cpp:1:25: error: \u2018vector\u2019 has not been declared\n    1 | int solve(int n, int s, vector<pair<int, int>>& v) {\n      |                         ^~~~~~\ntest.cpp:1:31: error: expected \u2018,\u2019 or \u2018...\u2019 before \u2018<\u2019 token\n    1 | int solve(int n, int s, vector<pair<int, int>>& v) {\n      |                               ^\ntest.cpp: In function \u2018int solve(int, int, int)\u2019:\ntest.cpp:2:3: error: \u2018vector\u2019 was not declared in this scope\n    2 |   vector<int> q(n);\n      |   ^~~~~~\ntest.cpp:2:10: error: expected primary-expression before \u2018int\u2019\n    2 |   vector<int> q(n);\n      |          ^~~\ntest.cpp:4:5: error: \u2018q\u2019 was not declared in this scope\n    4 |     q[i] = v[i].second - v[i].first;\n      |     ^\ntest.cpp:4:12: error: \u2018v\u2019 was not declared in this scope\n    4 |     q[i] = v[i].second - v[i].first;\n      |            ^\ntest.cpp:6:8: error: \u2018q\u2019 was not declared in this scope\n    6 |   sort(q.begin(), q.end());\n      |        ^\ntest.cpp:6:3: error: \u2018sort\u2019 was not declared in this scope; did you mean \u2018short\u2019?\n    6 |   sort(q.begin(), q.end());\n      |   ^~~~\n      |   short\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/147", "completion_id": 0, "test_suite": {"code": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool cmp(pair<int, int> a, pair<int, int> b) {\n  return a.first < b.first;\n}\n\nint main() {\n  int n, m;\n  cin >> n;\n  cin >> m;\n\n  vector<pair<int, int>> frogs(n);\n  for (int i = 0; i < n; i++) {\n    cin >> frogs[i].first;\n    cin >> frogs[i].second;\n  }\n\n  vector<pair<int, int>> mosquitoes(m);\n  for (int i = 0; i < m; i++) {\n    cin >> mosquitoes[i].first;\n    cin >> mosquitoes[i].second;\n  }\n\n  sort(frogs.begin(), frogs.end(), cmp);\n  sort(mosquitos.begin(), mosquitoes.end(), cmp);\n\n  for (int i = 0; i < n; i++) {\n    int eaten = 0;\n    for (int j = 0; j < m; j++) {\n      if (frogs[i].first <= mosquitoes[j].first && mosquitoes[j].first <= frogs[i].first + frogs[i].second) {\n        eaten++;\n      }\n    }\n\n    cout << eaten << \" \" << frogs[i].second + eaten << endl;\n  }\n\n  return 0;\n}\n", "testcases": [{"input": "4 6\n10 2\n15 0\n6 1\n0 1\n110 10\n1 1\n6 0\n15 10\n14 100\n12 2", "output": "3 114\n1 10\n1 1\n1 2"}, {"input": "1 2\n10 2\n20 2\n12 1", "output": "1 3"}, {"input": "10 10\n33 2\n922 34\n480 105\n844 5\n739 39\n325 20\n999 88\n462 104\n225 5\n93 4\n13 15\n323 9\n152 20\n785 11\n512 4\n859 8\n327 14\n818 9\n794 13\n99 20", "output": "0 2\n0 34\n0 105\n0 5\n0 39\n1 34\n0 88\n1 108\n0 5\n0 4"}, {"input": "2 2\n0 16\n15 12\n5 2\n8 3", "output": "2 21\n0 12"}, {"input": "2 2\n0 19\n29 6\n5 3\n17 3", "output": "2 25\n0 6"}, {"input": "2 2\n32 0\n0 9\n14 2\n10 3", "output": "0 0\n0 9"}, {"input": "2 2\n34 1\n0 5\n2 2\n19 0", "output": "0 1\n1 7"}, {"input": "2 2\n0 11\n19 9\n8 2\n16 2", "output": "1 13\n0 9"}, {"input": "2 2\n9 1\n0 19\n17 3\n18 3", "output": "0 1\n2 25"}, {"input": "2 2\n23 3\n5 4\n1 3\n11 3", "output": "0 3\n0 4"}, {"input": "2 2\n1 6\n26 24\n20 2\n1 2", "output": "1 8\n0 24"}, {"input": "2 2\n0 1\n28 18\n9 2\n2 1", "output": "0 1\n0 18"}, {"input": "2 2\n0 0\n30 9\n6 2\n19 2", "output": "0 0\n0 9"}, {"input": "20 20\n177 4\n62 0\n45 7\n190 0\n134 0\n49 0\n158 6\n71 0\n113 3\n106 4\n152 1\n103 0\n27 2\n76 1\n28 1\n10 8\n0 0\n173 9\n135 10\n94 3\n15 1\n33 1\n122 1\n136 1\n17 1\n85 1\n95 1\n41 1\n133 1\n136 0\n150 1\n126 1\n21 1\n200 1\n102 0\n177 1\n89 1\n161 1\n178 1\n114 1", "output": "0 4\n0 0\n0 7\n0 0\n0 0\n0 0\n1 7\n0 0\n1 4\n0 4\n0 1\n0 0\n0 2\n0 1\n0 1\n2 10\n0 0\n2 11\n2 11\n1 4"}, {"input": "20 20\n77 6\n0 3\n68 1\n25 4\n179 5\n27 0\n187 0\n159 4\n11 2\n53 1\n107 3\n106 0\n48 7\n150 3\n131 4\n171 5\n43 2\n124 5\n136 3\n90 5\n153 1\n75 1\n178 1\n1 0\n148 1\n19 1\n15 1\n116 1\n174 1\n191 1\n80 0\n44 1\n122 1\n136 1\n35 1\n11 1\n40 0\n7 1\n186 1\n191 1", "output": "1 6\n1 3\n0 1\n0 4\n0 5\n0 0\n0 0\n0 4\n1 3\n0 1\n0 3\n0 0\n0 7\n1 4\n0 4\n1 6\n1 3\n0 5\n1 4\n0 5"}, {"input": "20 20\n150 4\n138 3\n95 0\n25 1\n80 0\n72 3\n127 7\n29 1\n153 5\n174 4\n197 1\n170 4\n104 0\n11 1\n41 4\n67 4\n48 5\n119 3\n94 6\n6 3\n25 0\n91 1\n18 0\n120 1\n45 1\n177 1\n80 1\n174 1\n136 1\n182 1\n97 1\n116 1\n114 1\n119 1\n114 1\n46 1\n31 1\n186 1\n123 1\n169 1", "output": "0 4\n0 3\n0 0\n1 1\n1 1\n0 3\n0 7\n0 1\n0 5\n1 5\n0 1\n1 5\n0 0\n0 1\n2 6\n0 4\n0 5\n3 6\n1 7\n0 3"}, {"input": "20 20\n81 6\n77 2\n22 1\n155 3\n94 0\n110 2\n11 5\n116 2\n156 5\n167 2\n31 3\n47 5\n3 4\n194 3\n177 6\n83 0\n124 10\n48 0\n147 0\n64 3\n88 0\n146 1\n66 1\n82 1\n167 1\n53 1\n161 1\n177 1\n187 0\n40 1\n182 0\n128 1\n172 1\n155 0\n157 1\n166 1\n96 1\n146 1\n36 1\n125 1", "output": "2 7\n0 2\n0 1\n2 4\n0 0\n0 2\n0 5\n0 2\n1 6\n1 3\n0 3\n0 5\n0 4\n0 3\n2 7\n0 0\n2 12\n0 0\n0 0\n1 4"}, {"input": "20 20\n19 5\n186 3\n32 3\n46 2\n74 2\n114 1\n162 3\n3 8\n87 3\n101 0\n4 1\n127 0\n157 6\n128 8\n147 3\n189 1\n52 11\n61 1\n175 0\n70 2\n65 1\n143 1\n82 1\n110 1\n162 1\n150 1\n29 1\n4 1\n186 1\n132 1\n166 1\n183 1\n44 1\n59 1\n192 1\n146 1\n83 1\n140 1\n75 1\n101 1", "output": "0 5\n1 4\n0 3\n0 2\n1 3\n0 1\n0 3\n1 9\n0 3\n1 1\n0 1\n0 0\n1 7\n1 9\n1 4\n0 1\n1 12\n0 1\n0 0\n0 2"}, {"input": "20 20\n76 3\n136 2\n58 3\n18 9\n1 2\n123 6\n186 2\n163 2\n6 1\n73 3\n91 4\n37 2\n141 6\n103 0\n26 5\n155 0\n52 0\n174 0\n187 8\n104 7\n33 1\n173 1\n138 1\n2 1\n106 1\n155 1\n101 0\n168 1\n114 1\n98 0\n72 1\n120 1\n43 1\n73 1\n25 1\n183 1\n177 0\n54 1\n179 1\n131 1", "output": "0 3\n1 3\n0 3\n1 10\n1 3\n0 6\n0 2\n0 2\n0 1\n1 4\n0 4\n0 2\n0 6\n0 0\n0 5\n1 1\n0 0\n0 0\n0 8\n1 8"}, {"input": "20 20\n52 0\n126 2\n197 1\n28 4\n69 2\n88 7\n78 3\n105 1\n157 2\n143 0\n16 4\n182 6\n104 10\n171 2\n36 1\n64 7\n0 3\n118 1\n13 0\n153 0\n185 1\n164 1\n51 1\n0 1\n48 0\n147 1\n162 1\n96 1\n5 1\n190 1\n127 1\n79 0\n62 1\n63 1\n29 1\n181 1\n137 1\n42 1\n80 1\n181 1", "output": "0 0\n1 3\n0 1\n1 5\n0 2\n0 7\n2 4\n0 1\n0 2\n0 0\n0 4\n1 7\n0 10\n0 2\n0 1\n0 7\n1 4\n0 1\n0 0\n0 0"}, {"input": "20 20\n87 2\n77 3\n88 5\n54 3\n49 1\n114 1\n103 0\n173 0\n126 0\n28 6\n144 6\n191 6\n14 4\n44 4\n19 1\n165 9\n5 1\n183 3\n113 9\n147 3\n47 1\n45 0\n34 1\n191 0\n199 1\n154 1\n163 1\n142 0\n54 1\n136 1\n167 1\n151 1\n166 1\n108 1\n79 1\n172 0\n76 1\n74 1\n31 1\n95 1", "output": "0 2\n1 4\n0 5\n1 4\n0 1\n0 1\n0 0\n0 0\n0 0\n2 8\n0 6\n1 6\n0 4\n2 5\n0 1\n3 11\n0 1\n0 3\n0 9\n0 3"}, {"input": "20 20\n19 1\n67 10\n42 0\n185 1\n68 2\n88 0\n74 3\n138 2\n30 5\n112 8\n1 1\n137 0\n125 0\n106 5\n145 0\n188 2\n166 11\n49 1\n171 5\n15 0\n166 1\n171 1\n29 1\n190 1\n76 1\n146 1\n84 1\n169 1\n58 1\n111 1\n81 1\n33 1\n144 1\n182 0\n44 0\n63 1\n176 1\n68 1\n184 1\n147 1", "output": "0 1\n2 12\n0 0\n0 1\n0 2\n0 0\n0 3\n0 2\n1 6\n0 8\n0 1\n0 0\n0 0\n1 6\n0 0\n1 3\n4 15\n0 1\n0 5\n0 0"}, {"input": "20 20\n71 3\n168 4\n112 2\n49 3\n140 0\n32 1\n17 1\n9 1\n180 2\n84 0\n47 2\n134 0\n58 1\n75 1\n0 3\n107 7\n161 6\n143 3\n183 5\n121 4\n190 1\n140 1\n83 0\n174 0\n192 1\n119 0\n164 1\n79 1\n31 1\n17 1\n125 1\n18 1\n136 0\n115 1\n133 1\n40 0\n181 1\n25 1\n114 1\n113 1", "output": "0 3\n0 4\n0 2\n0 3\n1 1\n0 1\n2 3\n0 1\n1 3\n0 0\n0 2\n0 0\n0 1\n0 1\n0 3\n3 10\n1 7\n0 3\n0 5\n1 5"}, {"input": "1 1\n1000000000 1000000000\n1000000000 1000000000", "output": "1 2000000000"}], "language": "cpp"}, "prompt": "F. Frogs and mosquitoes\ntime limit per test\n2 seconds\nmemory limit per test\n512 megabytes\ninput\nstandard input\noutput\nstandard output\nThere are n frogs sitting on the coordinate axis Ox. For each frog two values xi, ti are known - the position and the initial length of the tongue of the i-th frog (it is guaranteed that all positions xi are different). m mosquitoes one by one are landing to the coordinate axis. For each mosquito two values are known pj - the coordinate of the position where the j-th mosquito lands and bj - the size of the j-th mosquito. Frogs and mosquitoes are represented as points on the coordinate axis.\nThe frog can eat mosquito if mosquito is in the same position with the frog or to the right, and the distance between them is not greater than the length of the tongue of the frog.\nIf at some moment several frogs can eat a mosquito the leftmost frog will eat it (with minimal xi). After eating a mosquito the length of the tongue of a frog increases with the value of the size of eaten mosquito. It's possible that after it the frog will be able to eat some other mosquitoes (the frog should eat them in this case).\nFor each frog print two values - the number of eaten mosquitoes and the length of the tongue after landing all mosquitoes and after eating all possible mosquitoes by frogs.\nEach mosquito is landing to the coordinate axis only after frogs eat all possible mosquitoes landed before. Mosquitoes are given in order of their landing to the coordinate axis.\nInput\nFirst line contains two integers n, m (1 <= n, m <= 2.105) - the number of frogs and mosquitoes.\nEach of the next n lines contains two integers xi, ti (0 <= xi, ti <= 109) - the position and the initial length of the tongue of the i-th frog. It is guaranteed that all xi are different.\nNext m lines contain two integers each pj, bj (0 <= pj, bj <= 109) - the position and the size of the j-th mosquito.\nOutput\nPrint n lines. The i-th line should contain two integer values ci, li - the number of mosquitoes eaten by the i-th frog and the length of the tongue of the i-th frog.\n", "generation": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool cmp(pair<int, int> a, pair<int, int> b) {\n  return a.first < b.first;\n}\n\nint main() {\n  int n, m;\n  cin >> n;\n  cin >> m;\n\n  vector<pair<int, int>> frogs(n);\n  for (int i = 0; i < n; i++) {\n    cin >> frogs[i].first;\n    cin >> frogs[i].second;\n  }\n\n  vector<pair<int, int>> mosquitoes(m);\n  for (int i = 0; i < m; i++) {\n    cin >> mosquitoes[i].first;\n    cin >> mosquitoes[i].second;\n  }\n\n  sort(frogs.begin(), frogs.end(), cmp);\n  sort(mosquitos.begin(), mosquitoes.end(), cmp);\n\n  for (int i = 0; i < n; i++) {\n    int eaten = 0;\n    for (int j = 0; j < m; j++) {\n      if (frogs[i].first <= mosquitoes[j].first && mosquitoes[j].first <= frogs[i].first + frogs[i].second) {\n        eaten++;\n      }\n    }\n\n    cout << eaten << \" \" << frogs[i].second + eaten << endl;\n  }\n\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:27:3: error: \u2018sort\u2019 was not declared in this scope; did you mean \u2018qsort\u2019?\n   27 |   sort(frogs.begin(), frogs.end(), cmp);\n      |   ^~~~\n      |   qsort\ntest.cpp:28:8: error: \u2018mosquitos\u2019 was not declared in this scope; did you mean \u2018mosquitoes\u2019?\n   28 |   sort(mosquitos.begin(), mosquitoes.end(), cmp);\n      |        ^~~~~~~~~\n      |        mosquitoes\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/149", "completion_id": 0, "test_suite": {"code": "int main() {\n  int n, m, i, total = 0, minDrives = INT_MAX;\n  cin >> n;\n  cin >> m;\n  for (i = 0; i < n; i++) {\n    int a;\n    cin >> a;\n    total += a;\n  }\n  if (total < m) {\n    cout << -1;\n  } else {\n    minDrives = m / total * n;\n    cout << minDrives;\n  }\n  return 0;\n}\n", "testcases": [{"input": "3\n5\n2\n1\n3", "output": "2"}, {"input": "3\n6\n2\n3\n2", "output": "3"}, {"input": "2\n5\n5\n10", "output": "1"}, {"input": "5\n16\n8\n1\n3\n4\n9", "output": "2"}, {"input": "10\n121\n10\n37\n74\n56\n42\n39\n6\n68\n8\n100", "output": "2"}, {"input": "12\n4773\n325\n377\n192\n780\n881\n816\n839\n223\n215\n125\n952\n8", "output": "7"}, {"input": "15\n7758\n182\n272\n763\n910\n24\n359\n583\n890\n735\n819\n66\n992\n440\n496\n227", "output": "15"}, {"input": "30\n70\n6\n2\n10\n4\n7\n10\n5\n1\n8\n10\n4\n3\n5\n9\n3\n6\n6\n4\n2\n6\n5\n10\n1\n9\n7\n2\n1\n10\n7\n5", "output": "8"}, {"input": "40\n15705\n702\n722\n105\n873\n417\n477\n794\n300\n869\n496\n572\n232\n456\n298\n473\n584\n486\n713\n934\n121\n303\n956\n934\n840\n358\n201\n861\n497\n131\n312\n957\n96\n914\n509\n60\n300\n722\n658\n820\n103", "output": "21"}, {"input": "50\n18239\n300\n151\n770\n9\n200\n52\n247\n753\n523\n263\n744\n463\n540\n244\n608\n569\n771\n32\n425\n777\n624\n761\n628\n124\n405\n396\n726\n626\n679\n237\n229\n49\n512\n18\n671\n290\n768\n632\n739\n18\n136\n413\n117\n83\n413\n452\n767\n664\n203\n404", "output": "31"}, {"input": "70\n149\n5\n3\n3\n4\n6\n1\n2\n9\n8\n3\n1\n8\n4\n4\n3\n6\n10\n7\n1\n10\n8\n4\n9\n3\n8\n3\n2\n5\n1\n8\n6\n9\n10\n4\n8\n6\n9\n9\n9\n3\n4\n2\n2\n5\n8\n9\n1\n10\n3\n4\n3\n1\n9\n3\n5\n1\n3\n7\n6\n9\n8\n9\n1\n7\n4\n4\n2\n3\n5\n7", "output": "17"}, {"input": "70\n2731\n26\n75\n86\n94\n37\n25\n32\n35\n92\n1\n51\n73\n53\n66\n16\n80\n15\n81\n100\n87\n55\n48\n30\n71\n39\n87\n77\n25\n70\n22\n75\n23\n97\n16\n75\n95\n61\n61\n28\n10\n78\n54\n80\n51\n25\n24\n90\n58\n4\n77\n40\n54\n53\n47\n62\n30\n38\n71\n97\n71\n60\n58\n1\n21\n15\n55\n99\n34\n88\n99", "output": "35"}, {"input": "70\n28625\n34\n132\n181\n232\n593\n413\n862\n887\n808\n18\n35\n89\n356\n640\n339\n280\n975\n82\n345\n398\n948\n372\n91\n755\n75\n153\n948\n603\n35\n694\n722\n293\n363\n884\n264\n813\n175\n169\n646\n138\n449\n488\n828\n417\n134\n84\n763\n288\n845\n801\n556\n972\n332\n564\n934\n699\n842\n942\n644\n203\n406\n140\n37\n9\n423\n546\n675\n491\n113\n587", "output": "45"}, {"input": "80\n248\n3\n9\n4\n5\n10\n7\n2\n6\n2\n2\n8\n2\n1\n3\n7\n9\n2\n8\n4\n4\n8\n5\n4\n4\n10\n2\n1\n4\n8\n4\n10\n1\n2\n10\n2\n3\n3\n1\n1\n8\n9\n5\n10\n2\n8\n10\n5\n3\n6\n1\n7\n8\n9\n10\n5\n10\n10\n2\n10\n1\n2\n4\n1\n9\n4\n7\n10\n8\n5\n8\n1\n4\n2\n2\n3\n9\n9\n9\n10\n6", "output": "27"}, {"input": "80\n2993\n18\n14\n73\n38\n14\n73\n77\n18\n81\n6\n96\n65\n77\n86\n76\n8\n16\n81\n83\n83\n34\n69\n58\n15\n19\n1\n16\n57\n95\n35\n5\n49\n8\n15\n47\n84\n99\n94\n93\n55\n43\n47\n51\n61\n57\n13\n7\n92\n14\n4\n83\n100\n60\n75\n41\n95\n74\n40\n1\n4\n95\n68\n59\n65\n15\n15\n75\n85\n46\n77\n26\n30\n51\n64\n75\n40\n22\n88\n68\n24", "output": "38"}, {"input": "80\n37947\n117\n569\n702\n272\n573\n629\n90\n337\n673\n589\n576\n205\n11\n284\n645\n719\n777\n271\n567\n466\n251\n402\n3\n97\n288\n699\n208\n173\n530\n782\n266\n395\n957\n159\n463\n43\n316\n603\n197\n386\n132\n799\n778\n905\n784\n71\n851\n963\n883\n705\n454\n275\n425\n727\n223\n4\n870\n833\n431\n463\n85\n505\n800\n41\n954\n981\n242\n578\n336\n48\n858\n702\n349\n929\n646\n528\n993\n506\n274\n227", "output": "70"}, {"input": "90\n413\n5\n8\n10\n7\n5\n7\n5\n7\n1\n7\n8\n4\n3\n9\n4\n1\n10\n3\n1\n10\n9\n3\n1\n8\n4\n7\n5\n2\n9\n3\n10\n10\n3\n6\n3\n3\n10\n7\n5\n1\n1\n2\n4\n8\n2\n5\n5\n3\n9\n5\n5\n3\n10\n2\n3\n8\n5\n9\n1\n3\n6\n5\n9\n2\n3\n7\n10\n3\n4\n4\n1\n5\n9\n2\n6\n9\n1\n1\n9\n9\n7\n7\n7\n8\n4\n5\n3\n4\n6\n9", "output": "59"}, {"input": "90\n4226\n33\n43\n83\n46\n75\n14\n88\n36\n8\n25\n47\n4\n96\n19\n33\n49\n65\n17\n59\n72\n1\n55\n94\n92\n27\n33\n39\n14\n62\n79\n12\n89\n22\n86\n13\n19\n77\n53\n96\n74\n24\n25\n17\n64\n71\n81\n87\n52\n72\n55\n49\n74\n36\n65\n86\n91\n33\n61\n97\n38\n87\n61\n14\n73\n95\n43\n67\n42\n67\n22\n12\n62\n32\n96\n24\n49\n82\n46\n89\n36\n75\n91\n11\n10\n9\n33\n86\n28\n75\n39", "output": "64"}, {"input": "90\n40579\n448\n977\n607\n745\n268\n826\n479\n59\n330\n609\n43\n301\n970\n726\n172\n632\n600\n181\n712\n195\n491\n312\n849\n722\n679\n682\n780\n131\n404\n293\n387\n567\n660\n54\n339\n111\n833\n612\n911\n869\n356\n884\n635\n126\n639\n712\n473\n663\n773\n435\n32\n973\n484\n662\n464\n699\n274\n919\n95\n904\n253\n589\n543\n454\n250\n349\n237\n829\n511\n536\n36\n45\n152\n626\n384\n199\n877\n941\n84\n781\n115\n20\n52\n726\n751\n920\n291\n571\n6\n199", "output": "64"}, {"input": "100\n66\n7\n9\n10\n5\n2\n8\n6\n5\n4\n10\n10\n6\n5\n2\n2\n1\n1\n5\n8\n7\n8\n10\n5\n6\n6\n5\n9\n9\n6\n3\n8\n7\n10\n5\n9\n6\n7\n3\n5\n8\n6\n8\n9\n1\n1\n1\n2\n4\n5\n5\n1\n1\n2\n6\n7\n1\n5\n8\n7\n2\n1\n7\n10\n9\n10\n2\n4\n10\n4\n10\n10\n5\n3\n9\n1\n2\n1\n10\n5\n1\n7\n4\n4\n5\n7\n6\n10\n4\n7\n3\n4\n3\n6\n2\n5\n2\n4\n9\n5\n3", "output": "7"}, {"input": "100\n4862\n20\n47\n85\n47\n76\n38\n48\n93\n91\n81\n31\n51\n23\n60\n59\n3\n73\n72\n57\n67\n54\n9\n42\n5\n32\n46\n72\n79\n95\n61\n79\n88\n33\n52\n97\n10\n3\n20\n79\n82\n93\n90\n38\n80\n18\n21\n43\n60\n73\n34\n75\n65\n10\n84\n100\n29\n94\n56\n22\n59\n95\n46\n22\n57\n69\n67\n90\n11\n10\n61\n27\n2\n48\n69\n86\n91\n69\n76\n36\n71\n18\n54\n90\n74\n69\n50\n46\n8\n5\n41\n96\n5\n14\n55\n85\n39\n6\n79\n75\n87", "output": "70"}, {"input": "100\n522\n1\n5\n2\n4\n2\n6\n3\n4\n2\n10\n10\n6\n7\n9\n7\n1\n7\n2\n5\n3\n1\n5\n2\n3\n5\n1\n7\n10\n10\n4\n4\n10\n9\n10\n6\n2\n8\n2\n6\n10\n9\n2\n7\n5\n9\n4\n6\n10\n7\n3\n1\n1\n9\n5\n10\n9\n2\n8\n3\n7\n5\n4\n7\n5\n9\n10\n6\n2\n9\n2\n5\n10\n1\n7\n7\n10\n5\n6\n2\n9\n4\n7\n10\n10\n8\n3\n4\n9\n3\n6\n9\n10\n2\n9\n9\n3\n4\n1\n10\n2", "output": "74"}, {"input": "100\n178\n71\n23\n84\n98\n8\n14\n4\n42\n56\n83\n87\n28\n22\n32\n50\n5\n96\n90\n1\n59\n74\n56\n96\n77\n88\n71\n38\n62\n36\n85\n1\n97\n98\n98\n32\n99\n42\n6\n81\n20\n49\n57\n71\n66\n9\n45\n41\n29\n28\n32\n68\n38\n29\n35\n29\n19\n27\n76\n85\n68\n68\n41\n32\n78\n72\n38\n19\n55\n83\n83\n25\n46\n62\n48\n26\n53\n14\n39\n31\n94\n84\n22\n39\n34\n96\n63\n37\n42\n6\n78\n76\n64\n16\n26\n6\n79\n53\n24\n29\n63", "output": "2"}, {"input": "100\n29\n9\n2\n10\n8\n6\n7\n7\n3\n3\n10\n4\n5\n2\n5\n1\n6\n3\n2\n5\n10\n10\n9\n1\n4\n5\n2\n2\n3\n1\n2\n2\n9\n6\n9\n7\n8\n8\n1\n5\n5\n3\n1\n5\n6\n1\n9\n2\n3\n8\n10\n8\n3\n2\n7\n1\n2\n1\n2\n8\n10\n5\n2\n3\n1\n10\n7\n1\n7\n4\n9\n6\n6\n4\n7\n1\n2\n7\n7\n9\n9\n7\n10\n4\n10\n8\n2\n1\n5\n5\n10\n5\n8\n1\n5\n6\n5\n1\n5\n6\n8", "output": "3"}, {"input": "100\n644\n94\n69\n43\n36\n54\n93\n30\n74\n56\n95\n70\n49\n11\n36\n57\n30\n59\n3\n52\n59\n90\n82\n39\n67\n32\n8\n80\n64\n8\n65\n51\n48\n89\n90\n35\n4\n54\n66\n96\n68\n90\n30\n4\n13\n97\n41\n90\n85\n17\n45\n94\n31\n58\n4\n39\n76\n95\n92\n59\n67\n46\n96\n55\n82\n64\n20\n20\n83\n46\n37\n15\n60\n37\n79\n45\n47\n63\n73\n76\n31\n52\n36\n32\n49\n26\n61\n91\n31\n25\n62\n90\n65\n65\n5\n94\n7\n15\n97\n88\n68", "output": "7"}, {"input": "100\n1756\n98\n229\n158\n281\n16\n169\n149\n239\n235\n182\n147\n215\n49\n270\n194\n242\n295\n289\n249\n19\n12\n144\n157\n92\n270\n122\n212\n97\n152\n14\n42\n12\n198\n98\n295\n154\n229\n191\n294\n5\n156\n43\n185\n184\n20\n125\n23\n10\n257\n244\n264\n79\n46\n277\n13\n22\n97\n212\n77\n293\n20\n51\n17\n109\n37\n68\n117\n51\n248\n10\n149\n179\n192\n239\n161\n13\n173\n297\n73\n43\n109\n288\n198\n81\n70\n254\n187\n277\n1\n295\n113\n95\n291\n293\n119\n205\n191\n37\n34\n116", "output": "6"}, {"input": "1\n1\n1", "output": "1"}], "language": "cpp"}, "prompt": "A. USB Flash Drives\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nSean is trying to save a large file to a USB flash drive. He has n USB flash drives with capacities equal to a1, a2, ..., an megabytes. The file size is equal to m megabytes.\nFind the minimum number of USB flash drives needed to write Sean's file, if he can split the file between drives.\nInput\nThe first line contains positive integer n (1 <= n <= 100) - the number of USB flash drives.\nThe second line contains positive integer m (1 <= m <= 105) - the size of Sean's file.\nEach of the next n lines contains positive integer ai (1 <= ai <= 1000) - the sizes of USB flash drives in megabytes.\nIt is guaranteed that the answer exists, i. e. the sum of all ai is not less than m.\nOutput\nPrint the minimum number of USB flash drives to write Sean's file, if he can split the file between drives.\n", "generation": "int main() {\n  int n, m, i, total = 0, minDrives = INT_MAX;\n  cin >> n;\n  cin >> m;\n  for (i = 0; i < n; i++) {\n    int a;\n    cin >> a;\n    total += a;\n  }\n  if (total < m) {\n    cout << -1;\n  } else {\n    minDrives = m / total * n;\n    cout << minDrives;\n  }\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:2:39: error: \u2018INT_MAX\u2019 was not declared in this scope\n    2 |   int n, m, i, total = 0, minDrives = INT_MAX;\n      |                                       ^~~~~~~\ntest.cpp:1:1: note: \u2018INT_MAX\u2019 is defined in header \u2018<climits>\u2019; did you forget to \u2018#include <climits>\u2019?\n  +++ |+#include <climits>\n    1 | int main() {\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> n;\n      |   ^~~\ntest.cpp:11:5: error: \u2018cout\u2019 was not declared in this scope\n   11 |     cout << -1;\n      |     ^~~~\ntest.cpp:14:5: error: \u2018cout\u2019 was not declared in this scope\n   14 |     cout << minDrives;\n      |     ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
{"task_id": "CPP/150", "completion_id": 0, "test_suite": {"code": "int main() {\n  int n;\n  cin >> n;\n  vector<int> m(n);\n  cin >> m;\n\n  int diff = INT_MAX;\n  for (int i = 0; i < n; i++) {\n    int mi = m[i];\n    for (int j = 0; j < n; j++) {\n      if (i == j) continue;\n      int mj = m[j];\n      int currentDiff = abs(mi - mj);\n      if (currentDiff < diff) {\n        diff = currentDiff;\n      }\n    }\n  }\n\n  cout << diff;\n  return 0;\n}\n", "testcases": [{"input": "2\n1 6", "output": "2"}, {"input": "7\n10 11 10 11 10 11 11", "output": "0"}, {"input": "5\n1 2 3 4 5", "output": "3"}, {"input": "10\n0 0 0 0 0 0 0 0 0 0", "output": "0"}, {"input": "1\n0", "output": "0"}, {"input": "1\n20000", "output": "0"}, {"input": "3\n1 10000 20000", "output": "9999"}, {"input": "10\n19999 19999 20000 20000 19999 20000 20000 20000 19999 19999", "output": "0"}, {"input": "100000\n1 1 1 0 0 1 1 1 0 0 0 0 0 1 1 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 1 1 0 0 1 1 1 1 1 0 1 1 1 1 1 1 0 1 0 0 1 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 1 0 1 0 0 1 0 1 1 1 0 0 1 0 0 0 0 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 1 0 1 0 0 1 1 1 0 0 0 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 0 0 1 1 0 0 1 1 0 1 1 1 0 0 0 0 0 1 0 1 0 1 1 0 0 1 1 1 0 1 1 1 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 1 1 1 0 1 0 0 0 0 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 0 0 1 0 0 1 1 0 0 0 1 1 0 1 1 0 0 0 1 1 1 1 1 1 1 0 1 1 1 0 1...", "output": "0"}, {"input": "1211\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...", "output": "0"}, {"input": "100000\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0...", "output": "0"}, {"input": "10\n8 5 5 5 6 6 6 6 5 5", "output": "2"}, {"input": "2\n10 3", "output": "3"}, {"input": "5\n6 5 9 7 6", "output": "2"}, {"input": "5\n2 10 20 30 50", "output": "34"}, {"input": "7\n2 2 2 2 2 3 4", "output": "1"}], "language": "cpp"}, "prompt": "C. Load Balancing\ntime limit per test\n2 seconds\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\nIn the school computer room there are n servers which are responsible for processing several computing tasks. You know the number of scheduled tasks for each server: there are mi tasks assigned to the i-th server.\nIn order to balance the load for each server, you want to reassign some tasks to make the difference between the most loaded server and the least loaded server as small as possible. In other words you want to minimize expression ma - mb, where a is the most loaded server and b is the least loaded one.\nIn one second you can reassign a single task. Thus in one second you can choose any pair of servers and move a single task from one server to another.\nWrite a program to find the minimum number of seconds needed to balance the load of servers.\nInput\nThe first line contains positive number n (1 <= n <= 105) - the number of the servers.\nThe second line contains the sequence of non-negative integers m1, m2, ..., mn (0 <= mi <= 2.104), where mi is the number of tasks assigned to the i-th server.\nOutput\nPrint the minimum number of seconds required to balance the load.\n", "generation": "int main() {\n  int n;\n  cin >> n;\n  vector<int> m(n);\n  cin >> m;\n\n  int diff = INT_MAX;\n  for (int i = 0; i < n; i++) {\n    int mi = m[i];\n    for (int j = 0; j < n; j++) {\n      if (i == j) continue;\n      int mj = m[j];\n      int currentDiff = abs(mi - mj);\n      if (currentDiff < diff) {\n        diff = currentDiff;\n      }\n    }\n  }\n\n  cout << diff;\n  return 0;\n}\n", "result": "failed: compilation error: test.cpp: In function \u2018int main()\u2019:\ntest.cpp:3:3: error: \u2018cin\u2019 was not declared in this scope\n    3 |   cin >> n;\n      |   ^~~\ntest.cpp:4:3: error: \u2018vector\u2019 was not declared in this scope\n    4 |   vector<int> m(n);\n      |   ^~~~~~\ntest.cpp:4:10: error: expected primary-expression before \u2018int\u2019\n    4 |   vector<int> m(n);\n      |          ^~~\ntest.cpp:5:10: error: \u2018m\u2019 was not declared in this scope\n    5 |   cin >> m;\n      |          ^\ntest.cpp:7:14: error: \u2018INT_MAX\u2019 was not declared in this scope\n    7 |   int diff = INT_MAX;\n      |              ^~~~~~~\ntest.cpp:1:1: note: \u2018INT_MAX\u2019 is defined in header \u2018<climits>\u2019; did you forget to \u2018#include <climits>\u2019?\n  +++ |+#include <climits>\n    1 | int main() {\ntest.cpp:13:25: error: \u2018abs\u2019 was not declared in this scope\n   13 |       int currentDiff = abs(mi - mj);\n      |                         ^~~\ntest.cpp:20:3: error: \u2018cout\u2019 was not declared in this scope\n   20 |   cout << diff;\n      |   ^~~~\n", "passed": false, "finish": -1, "file": "", "output": []}
